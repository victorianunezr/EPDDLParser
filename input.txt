(define (domain cc)
    (:requirements :del :multi-agent :ontic-actions :modal-preconditions)

    (:action-type-libraries ma-star)

    (:types box room)

    (:predicates (at ?i - agent ?r - room)
                 (at ?b - box   ?r - room)
    )
    
    (:action left
        :parameters (?ag - agent)
        :precondition
            (exists (?room_from - room)
                (and
                    (at ?ag ?room_from)
                    (not (leftmost ?room_from))
                )
            )
        :action-type
            (ontic
                (~effects
                    (forall (?room_from - room ?room_to - room)
                        (iff
                            (and (at ?ag ?room_from) (neighbor ?room_to ?room_from))
                            (at ?ag ?room_to)
                        )
                    )
                ))
        :observability-conditions (always All Fully)
    )

    (:action right
        :parameters (?ag - agent)
        :precondition
            (exists (?room_from - room)
                (and
                    (at ?ag ?room_from)
                    (not (rightmost ?room_from))
                )
            )
        :action-type
            (ontic
                (~effects
                    (forall (?room_from - room ?room_to - room)
                        (iff
                            (and (at ?ag ?room_from) (neighbor ?room_from ?room_to))
                            (at ?ag ?room_to)
                        )
                    )
                ))
        :observability-conditions (always All Fully)
    )

    (:action check
        :parameters (?ag - agent ?box - box ?room - room)
        :precondition (at ?ag ?room)
        :action-type
            (sensing
                (~predicate (at ?box ?room))
            )
        :observability-conditions
            (and
                (always ?ag Fully)
                (forall (?i - agent)
                    (always ?i Oblivious)
                )
            )
    )

    (:action tell
        :parameters (?ag - agent ?box - box ?room - room)
        :precondition [?ag](at ?box ?room)
        :action-type
            (announcement
                (~formula (at ?box ?room))
            )
        :observability-conditions
            (and
                (always ?ag Fully)
                (forall (?ag' - agent ?r_ag - room)
                    (if (and (at ?ag ?r_ag) (at ?ag' ?r_ag)) ?ag' Fully)
                    (else ?ag' Oblivious)
                )
            )
    )
)
