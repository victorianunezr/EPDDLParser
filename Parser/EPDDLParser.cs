//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Parser/EPDDLParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EPDDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EVENT=1, EVENTS=2, PRECONDITION=3, EFFECT=4, ACCESSIBILITY=5, OWNERS=6, 
		POSTCONDITIONS=7, STATE=8, INIT=9, GOAL=10, WHERE=11, RELATIONS=12, DESIGNATED=13, 
		PREDICATES=14, MODALITY=15, ACTION=16, PARAMETERS=17, OBSERVABILITY_GROUPS=18, 
		ACTION_TYPE_LIBRARIES=19, REQUIREMENTS=20, TYPES=21, OBJECTS=22, STATIC=23, 
		AGENTS=24, AGENT_GROUPS=25, VALUATION=26, STATE_NAME=27, OBSERVABILITY_CONDITIONS=28, 
		ACTION_TYPE=29, WORLDS=30, CDOMAIN=31, COLON=32, IMPLY=33, OR=34, AND=35, 
		NOT=36, EXISTS=37, FORALL=38, TRUE=39, FALSE=40, ASSIGN=41, KW=42, IFF=43, 
		WHEN=44, ALWAYS=45, IF=46, OTHERWISE=47, DEFINE=48, DOMAIN=49, LIBRARY=50, 
		PROBLEM=51, PREDICATE=52, PREDICATE_FORMULA=53, FORMULA=54, POSTCONDITION=55, 
		LITERAL=56, ALL=57, WORLD=58, AGENT=59, TRIVIAL_DEF=60, NAME=61, AGENT_NAME=62, 
		MODALITY_NAME=63, REQUIREMENT_NAME=64, VARIABLE=65, INT=66, WS=67, COMMENT=68, 
		DASH=69, LPAREN=70, RPAREN=71, LBRACKET=72, RBRACKET=73, LBRACE=74, RBRACE=75, 
		LT=76, GT=77;
	public const int
		RULE_mainDef = 0, RULE_domainDef = 1, RULE_libraryDef = 2, RULE_problemDef = 3, 
		RULE_domainItemDef = 4, RULE_libraryItemDef = 5, RULE_problemItemDef = 6, 
		RULE_domainLibrariesNameDef = 7, RULE_problemDomainNameDef = 8, RULE_agentNamesDef = 9, 
		RULE_agentGroupsListDef = 10, RULE_agentGroupDef = 11, RULE_objectNamesDef = 12, 
		RULE_staticPredListDef = 13, RULE_requireDef = 14, RULE_typesDef = 15, 
		RULE_predicateListDef = 16, RULE_predicateDef = 17, RULE_actionDef = 18, 
		RULE_ownersDef = 19, RULE_agentList = 20, RULE_eventsDef = 21, RULE_eventDef = 22, 
		RULE_effectDef = 23, RULE_literal = 24, RULE_accessibilityDef = 25, RULE_accessibilityRel = 26, 
		RULE_eventPreDef = 27, RULE_eventPostDef = 28, RULE_parametersDef = 29, 
		RULE_modalityDef = 30, RULE_observabilityGroupsDef = 31, RULE_postconditionBlock = 32, 
		RULE_postcondition = 33, RULE_simplePostcondition = 34, RULE_actionTypeDef = 35, 
		RULE_stateDef = 36, RULE_initDef = 37, RULE_worldsDef = 38, RULE_worldDef = 39, 
		RULE_goalDef = 40, RULE_actionConditionDef = 41, RULE_actionTypeSignatureDef = 42, 
		RULE_actionPreDef = 43, RULE_actionObsDef = 44, RULE_typedIdentList = 45, 
		RULE_typedVariableList = 46, RULE_typedAgentList = 47, RULE_type = 48, 
		RULE_reservedType = 49, RULE_formula = 50, RULE_conditionFormula = 51, 
		RULE_condition = 52, RULE_atomicCondition = 53, RULE_predicateFormula = 54, 
		RULE_atomicEqFormula = 55, RULE_term = 56, RULE_groundTerm = 57, RULE_modality = 58, 
		RULE_singleModality = 59, RULE_groupModality = 60, RULE_modalityLabel = 61, 
		RULE_modalityAgent = 62, RULE_modalityAgentGroup = 63, RULE_allAgents = 64, 
		RULE_predicateName = 65, RULE_domainName = 66, RULE_problemName = 67, 
		RULE_libraryName = 68, RULE_stateName = 69, RULE_worldName = 70, RULE_actionName = 71, 
		RULE_eventName = 72, RULE_agentName = 73, RULE_modalityName = 74, RULE_staticPredDef = 75, 
		RULE_genericName = 76, RULE_stateWorldsDef = 77, RULE_stateRelDef = 78, 
		RULE_stateRelations = 79, RULE_worldRelation = 80, RULE_worldNamePair = 81, 
		RULE_stateValDef = 82, RULE_stateValuation = 83, RULE_worldValuation = 84, 
		RULE_stateDesignDef = 85, RULE_agentGroup = 86, RULE_initialStateDescr = 87, 
		RULE_fTheoryFormula = 88, RULE_simpleFTheoryFormula = 89, RULE_actionTypeName = 90, 
		RULE_parameter = 91, RULE_expression = 92, RULE_formulaOrEmpty = 93, RULE_obsConditionDef = 94, 
		RULE_universalObsCond = 95, RULE_obsCondition = 96, RULE_trivialObsCond = 97, 
		RULE_ifObsCond = 98, RULE_otherwiseObsCond = 99, RULE_observingAgent = 100, 
		RULE_observingAgentGroup = 101, RULE_agentGroupName = 102, RULE_predicate = 103, 
		RULE_actionTypeGroupsDef = 104, RULE_actionTypeEventsDef = 105, RULE_eventSignature = 106, 
		RULE_actionTypeRelDef = 107, RULE_actionRelations = 108, RULE_eventRelation = 109, 
		RULE_eventNamePair = 110, RULE_actionTypeDesignDef = 111, RULE_knowsWhether = 112, 
		RULE_requirementKey = 113;
	public static readonly string[] ruleNames = {
		"mainDef", "domainDef", "libraryDef", "problemDef", "domainItemDef", "libraryItemDef", 
		"problemItemDef", "domainLibrariesNameDef", "problemDomainNameDef", "agentNamesDef", 
		"agentGroupsListDef", "agentGroupDef", "objectNamesDef", "staticPredListDef", 
		"requireDef", "typesDef", "predicateListDef", "predicateDef", "actionDef", 
		"ownersDef", "agentList", "eventsDef", "eventDef", "effectDef", "literal", 
		"accessibilityDef", "accessibilityRel", "eventPreDef", "eventPostDef", 
		"parametersDef", "modalityDef", "observabilityGroupsDef", "postconditionBlock", 
		"postcondition", "simplePostcondition", "actionTypeDef", "stateDef", "initDef", 
		"worldsDef", "worldDef", "goalDef", "actionConditionDef", "actionTypeSignatureDef", 
		"actionPreDef", "actionObsDef", "typedIdentList", "typedVariableList", 
		"typedAgentList", "type", "reservedType", "formula", "conditionFormula", 
		"condition", "atomicCondition", "predicateFormula", "atomicEqFormula", 
		"term", "groundTerm", "modality", "singleModality", "groupModality", "modalityLabel", 
		"modalityAgent", "modalityAgentGroup", "allAgents", "predicateName", "domainName", 
		"problemName", "libraryName", "stateName", "worldName", "actionName", 
		"eventName", "agentName", "modalityName", "staticPredDef", "genericName", 
		"stateWorldsDef", "stateRelDef", "stateRelations", "worldRelation", "worldNamePair", 
		"stateValDef", "stateValuation", "worldValuation", "stateDesignDef", "agentGroup", 
		"initialStateDescr", "fTheoryFormula", "simpleFTheoryFormula", "actionTypeName", 
		"parameter", "expression", "formulaOrEmpty", "obsConditionDef", "universalObsCond", 
		"obsCondition", "trivialObsCond", "ifObsCond", "otherwiseObsCond", "observingAgent", 
		"observingAgentGroup", "agentGroupName", "predicate", "actionTypeGroupsDef", 
		"actionTypeEventsDef", "eventSignature", "actionTypeRelDef", "actionRelations", 
		"eventRelation", "eventNamePair", "actionTypeDesignDef", "knowsWhether", 
		"requirementKey"
	};

	private static readonly string[] _LiteralNames = {
		null, "':event'", "':events'", "':precondition'", "':effect'", "':accessibility'", 
		"':owners'", "':postconditions'", "':state'", "':init'", "':goal'", "':where'", 
		"':relations'", "':designated'", "':predicates'", "':modality'", "':action'", 
		"':parameters'", "':observability-groups'", "':action-type-libraries'", 
		"':requirements'", "':types'", "':objects'", "':static'", "':agents'", 
		"':agent-groups'", "':valuation'", "':state-name'", "':observability-conditions'", 
		"':action-type'", "':worlds'", "':domain'", "':'", "'imply'", "'or'", 
		"'and'", "'not'", "'exists'", "'forall'", "'true'", "'false'", "'<-'", 
		"'kw'", "'iff'", "'when'", "'always'", "'if'", "'otherwise'", "'define'", 
		"'domain'", "'library'", "'problem'", "'predicate'", "'predicate-formula'", 
		"'formula'", "'postcondition'", "'literal'", "'All'", "'world'", "'agent'", 
		"'()'", null, null, null, null, null, null, null, null, "'-'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EVENT", "EVENTS", "PRECONDITION", "EFFECT", "ACCESSIBILITY", "OWNERS", 
		"POSTCONDITIONS", "STATE", "INIT", "GOAL", "WHERE", "RELATIONS", "DESIGNATED", 
		"PREDICATES", "MODALITY", "ACTION", "PARAMETERS", "OBSERVABILITY_GROUPS", 
		"ACTION_TYPE_LIBRARIES", "REQUIREMENTS", "TYPES", "OBJECTS", "STATIC", 
		"AGENTS", "AGENT_GROUPS", "VALUATION", "STATE_NAME", "OBSERVABILITY_CONDITIONS", 
		"ACTION_TYPE", "WORLDS", "CDOMAIN", "COLON", "IMPLY", "OR", "AND", "NOT", 
		"EXISTS", "FORALL", "TRUE", "FALSE", "ASSIGN", "KW", "IFF", "WHEN", "ALWAYS", 
		"IF", "OTHERWISE", "DEFINE", "DOMAIN", "LIBRARY", "PROBLEM", "PREDICATE", 
		"PREDICATE_FORMULA", "FORMULA", "POSTCONDITION", "LITERAL", "ALL", "WORLD", 
		"AGENT", "TRIVIAL_DEF", "NAME", "AGENT_NAME", "MODALITY_NAME", "REQUIREMENT_NAME", 
		"VARIABLE", "INT", "WS", "COMMENT", "DASH", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "LBRACE", "RBRACE", "LT", "GT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EPDDLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EPDDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EPDDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EPDDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DomainDefContext domainDef() {
			return GetRuleContext<DomainDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryDefContext libraryDef() {
			return GetRuleContext<LibraryDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemDefContext problemDef() {
			return GetRuleContext<ProblemDefContext>(0);
		}
		public MainDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterMainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitMainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainDefContext mainDef() {
		MainDefContext _localctx = new MainDefContext(Context, State);
		EnterRule(_localctx, 0, RULE_mainDef);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				domainDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				libraryDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230;
				problemDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EPDDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN() { return GetToken(EPDDLParser.DOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainItemDefContext[] domainItemDef() {
			return GetRuleContexts<DomainItemDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainItemDefContext domainItemDef(int i) {
			return GetRuleContext<DomainItemDefContext>(i);
		}
		public DomainDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainDefContext domainDef() {
		DomainDefContext _localctx = new DomainDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_domainDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(LPAREN);
			State = 234;
			Match(DEFINE);
			State = 235;
			Match(LPAREN);
			State = 236;
			Match(DOMAIN);
			State = 237;
			domainName();
			State = 238;
			Match(RPAREN);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 239;
				domainItemDef();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 245;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EPDDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(EPDDLParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibraryNameContext libraryName() {
			return GetRuleContext<LibraryNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryItemDefContext[] libraryItemDef() {
			return GetRuleContexts<LibraryItemDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryItemDefContext libraryItemDef(int i) {
			return GetRuleContext<LibraryItemDefContext>(i);
		}
		public LibraryDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLibraryDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLibraryDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryDefContext libraryDef() {
		LibraryDefContext _localctx = new LibraryDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_libraryDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(LPAREN);
			State = 248;
			Match(DEFINE);
			State = 249;
			Match(LPAREN);
			State = 250;
			Match(LIBRARY);
			State = 251;
			libraryName();
			State = 252;
			Match(RPAREN);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 253;
				libraryItemDef();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EPDDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROBLEM() { return GetToken(EPDDLParser.PROBLEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemItemDefContext[] problemItemDef() {
			return GetRuleContexts<ProblemItemDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemItemDefContext problemItemDef(int i) {
			return GetRuleContext<ProblemItemDefContext>(i);
		}
		public ProblemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemDefContext problemDef() {
		ProblemDefContext _localctx = new ProblemDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_problemDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(LPAREN);
			State = 262;
			Match(DEFINE);
			State = 263;
			Match(LPAREN);
			State = 264;
			Match(PROBLEM);
			State = 265;
			problemName();
			State = 266;
			Match(RPAREN);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 267;
				problemItemDef();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 273;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainItemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DomainLibrariesNameDefContext domainLibrariesNameDef() {
			return GetRuleContext<DomainLibrariesNameDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesDefContext typesDef() {
			return GetRuleContext<TypesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateListDefContext predicateListDef() {
			return GetRuleContext<PredicateListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityDefContext modalityDef() {
			return GetRuleContext<ModalityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionDefContext actionDef() {
			return GetRuleContext<ActionDefContext>(0);
		}
		public DomainItemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainItemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainItemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainItemDefContext domainItemDef() {
		DomainItemDefContext _localctx = new DomainItemDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_domainItemDef);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				domainLibrariesNameDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				requireDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				typesDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 278;
				predicateListDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 279;
				modalityDef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 280;
				actionDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryItemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityDefContext modalityDef() {
			return GetRuleContext<ModalityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservabilityGroupsDefContext observabilityGroupsDef() {
			return GetRuleContext<ObservabilityGroupsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeDefContext actionTypeDef() {
			return GetRuleContext<ActionTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefContext eventDef() {
			return GetRuleContext<EventDefContext>(0);
		}
		public LibraryItemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryItemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLibraryItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLibraryItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryItemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryItemDefContext libraryItemDef() {
		LibraryItemDefContext _localctx = new LibraryItemDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_libraryItemDef);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				requireDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				modalityDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				observabilityGroupsDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286;
				actionTypeDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287;
				eventDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemItemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProblemDomainNameDefContext problemDomainNameDef() {
			return GetRuleContext<ProblemDomainNameDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityDefContext modalityDef() {
			return GetRuleContext<ModalityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNamesDefContext agentNamesDef() {
			return GetRuleContext<AgentNamesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupsListDefContext agentGroupsListDef() {
			return GetRuleContext<AgentGroupsListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectNamesDefContext objectNamesDef() {
			return GetRuleContext<ObjectNamesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticPredListDefContext staticPredListDef() {
			return GetRuleContext<StaticPredListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDefContext initDef() {
			return GetRuleContext<InitDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateDefContext stateDef() {
			return GetRuleContext<StateDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDefContext goalDef() {
			return GetRuleContext<GoalDefContext>(0);
		}
		public ProblemItemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemItemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemItemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemItemDefContext problemItemDef() {
		ProblemItemDefContext _localctx = new ProblemItemDefContext(Context, State);
		EnterRule(_localctx, 12, RULE_problemItemDef);
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				problemDomainNameDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				requireDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 292;
				modalityDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 293;
				agentNamesDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 294;
				agentGroupsListDef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 295;
				objectNamesDef();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 296;
				staticPredListDef();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 297;
				initDef();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 298;
				stateDef();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 299;
				goalDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainLibrariesNameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_TYPE_LIBRARIES() { return GetToken(EPDDLParser.ACTION_TYPE_LIBRARIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibraryNameContext[] libraryName() {
			return GetRuleContexts<LibraryNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryNameContext libraryName(int i) {
			return GetRuleContext<LibraryNameContext>(i);
		}
		public DomainLibrariesNameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainLibrariesNameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainLibrariesNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainLibrariesNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainLibrariesNameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainLibrariesNameDefContext domainLibrariesNameDef() {
		DomainLibrariesNameDefContext _localctx = new DomainLibrariesNameDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_domainLibrariesNameDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(LPAREN);
			State = 303;
			Match(ACTION_TYPE_LIBRARIES);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 304;
				libraryName();
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 309;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemDomainNameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDOMAIN() { return GetToken(EPDDLParser.CDOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ProblemDomainNameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemDomainNameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemDomainNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemDomainNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemDomainNameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemDomainNameDefContext problemDomainNameDef() {
		ProblemDomainNameDefContext _localctx = new ProblemDomainNameDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_problemDomainNameDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(LPAREN);
			State = 312;
			Match(CDOMAIN);
			State = 313;
			domainName();
			State = 314;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentNamesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENTS() { return GetToken(EPDDLParser.AGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedAgentListContext typedAgentList() {
			return GetRuleContext<TypedAgentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public AgentNamesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentNamesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentNamesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentNamesDefContext agentNamesDef() {
		AgentNamesDefContext _localctx = new AgentNamesDefContext(Context, State);
		EnterRule(_localctx, 18, RULE_agentNamesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(LPAREN);
			State = 317;
			Match(AGENTS);
			State = 318;
			typedAgentList();
			State = 319;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupsListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_GROUPS() { return GetToken(EPDDLParser.AGENT_GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupDefContext[] agentGroupDef() {
			return GetRuleContexts<AgentGroupDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupDefContext agentGroupDef(int i) {
			return GetRuleContext<AgentGroupDefContext>(i);
		}
		public AgentGroupsListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroupsListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroupsListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroupsListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroupsListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupsListDefContext agentGroupsListDef() {
		AgentGroupsListDefContext _localctx = new AgentGroupsListDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_agentGroupsListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(LPAREN);
			State = 322;
			Match(AGENT_GROUPS);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 323;
				agentGroupDef();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 328;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupNameContext agentGroupName() {
			return GetRuleContext<AgentGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext[] agentName() {
			return GetRuleContexts<AgentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName(int i) {
			return GetRuleContext<AgentNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		public AgentGroupDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroupDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroupDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroupDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroupDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupDefContext agentGroupDef() {
		AgentGroupDefContext _localctx = new AgentGroupDefContext(Context, State);
		EnterRule(_localctx, 22, RULE_agentGroupDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(LPAREN);
			State = 331;
			agentGroupName();
			State = 332;
			Match(ASSIGN);
			State = 333;
			Match(LPAREN);
			State = 334;
			agentName();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AGENT_NAME) {
				{
				{
				State = 335;
				agentName();
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 341;
			Match(RPAREN);
			State = 342;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNamesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECTS() { return GetToken(EPDDLParser.OBJECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ObjectNamesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectNamesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObjectNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObjectNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectNamesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNamesDefContext objectNamesDef() {
		ObjectNamesDefContext _localctx = new ObjectNamesDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_objectNamesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(LPAREN);
			State = 345;
			Match(OBJECTS);
			State = 346;
			typedIdentList();
			State = 347;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticPredListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EPDDLParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StaticPredDefContext[] staticPredDef() {
			return GetRuleContexts<StaticPredDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticPredDefContext staticPredDef(int i) {
			return GetRuleContext<StaticPredDefContext>(i);
		}
		public StaticPredListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticPredListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStaticPredListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStaticPredListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticPredListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticPredListDefContext staticPredListDef() {
		StaticPredListDefContext _localctx = new StaticPredListDefContext(Context, State);
		EnterRule(_localctx, 26, RULE_staticPredListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(LPAREN);
			State = 350;
			Match(STATIC);
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 351;
				staticPredDef();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 356;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIREMENTS() { return GetToken(EPDDLParser.REQUIREMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequirementKeyContext[] requirementKey() {
			return GetRuleContexts<RequirementKeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequirementKeyContext requirementKey(int i) {
			return GetRuleContext<RequirementKeyContext>(i);
		}
		public RequireDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterRequireDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitRequireDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefContext requireDef() {
		RequireDefContext _localctx = new RequireDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_requireDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(LPAREN);
			State = 359;
			Match(REQUIREMENTS);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REQUIREMENT_NAME) {
				{
				{
				State = 360;
				requirementKey();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES() { return GetToken(EPDDLParser.TYPES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public TypesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesDefContext typesDef() {
		TypesDefContext _localctx = new TypesDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_typesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(LPAREN);
			State = 369;
			Match(TYPES);
			State = 370;
			typedIdentList();
			State = 371;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATES() { return GetToken(EPDDLParser.PREDICATES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateDefContext[] predicateDef() {
			return GetRuleContexts<PredicateDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateDefContext predicateDef(int i) {
			return GetRuleContext<PredicateDefContext>(i);
		}
		public PredicateListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateListDefContext predicateListDef() {
		PredicateListDefContext _localctx = new PredicateListDefContext(Context, State);
		EnterRule(_localctx, 32, RULE_predicateListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(LPAREN);
			State = 374;
			Match(PREDICATES);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 375;
				predicateDef();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 380;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public PredicateDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateDefContext predicateDef() {
		PredicateDefContext _localctx = new PredicateDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_predicateDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(LPAREN);
			State = 383;
			predicateName();
			State = 384;
			typedVariableList();
			State = 385;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(EPDDLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionNameContext actionName() {
			return GetRuleContext<ActionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnersDefContext ownersDef() {
			return GetRuleContext<OwnersDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventsDefContext eventsDef() {
			return GetRuleContext<EventsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityDefContext accessibilityDef() {
			return GetRuleContext<AccessibilityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ActionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefContext actionDef() {
		ActionDefContext _localctx = new ActionDefContext(Context, State);
		EnterRule(_localctx, 36, RULE_actionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(LPAREN);
			State = 388;
			Match(ACTION);
			State = 389;
			actionName();
			State = 390;
			parametersDef();
			State = 391;
			ownersDef();
			State = 392;
			eventsDef();
			State = 393;
			accessibilityDef();
			State = 394;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnersDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNERS() { return GetToken(EPDDLParser.OWNERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentListContext agentList() {
			return GetRuleContext<AgentListContext>(0);
		}
		public OwnersDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownersDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterOwnersDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitOwnersDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnersDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnersDefContext ownersDef() {
		OwnersDefContext _localctx = new OwnersDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_ownersDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(OWNERS);
			State = 397;
			agentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext[] agentName() {
			return GetRuleContexts<AgentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName(int i) {
			return GetRuleContext<AgentNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public AgentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentListContext agentList() {
		AgentListContext _localctx = new AgentListContext(Context, State);
		EnterRule(_localctx, 40, RULE_agentList);
		int _la;
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399;
				Match(LPAREN);
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 400;
					agentName();
					}
					}
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 406;
				Match(RPAREN);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(EPDDLParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventDefContext[] eventDef() {
			return GetRuleContexts<EventDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefContext eventDef(int i) {
			return GetRuleContext<EventDefContext>(i);
		}
		public EventsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventsDefContext eventsDef() {
		EventsDefContext _localctx = new EventsDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_eventsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(EVENTS);
			State = 411;
			Match(LPAREN);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 412;
				eventDef();
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 417;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECONDITION() { return GetToken(EPDDLParser.PRECONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EFFECT() { return GetToken(EPDDLParser.EFFECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EffectDefContext effectDef() {
			return GetRuleContext<EffectDefContext>(0);
		}
		public EventDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefContext eventDef() {
		EventDefContext _localctx = new EventDefContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(LPAREN);
			State = 420;
			Match(NAME);
			{
			State = 421;
			Match(PRECONDITION);
			State = 422;
			formulaOrEmpty();
			}
			{
			State = 424;
			Match(EFFECT);
			State = 425;
			effectDef();
			}
			State = 427;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public EffectDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEffectDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEffectDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectDefContext effectDef() {
		EffectDefContext _localctx = new EffectDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_effectDef);
		int _la;
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRIVIAL_DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429;
				Match(TRIVIAL_DEF);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 430;
				Match(LPAREN);
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 431;
					literal();
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				State = 436;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_literal);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				predicate();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				Match(LPAREN);
				State = 442;
				Match(NOT);
				State = 443;
				predicate();
				State = 444;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessibilityDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESSIBILITY() { return GetToken(EPDDLParser.ACCESSIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityRelContext[] accessibilityRel() {
			return GetRuleContexts<AccessibilityRelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityRelContext accessibilityRel(int i) {
			return GetRuleContext<AccessibilityRelContext>(i);
		}
		public AccessibilityDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessibilityDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAccessibilityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAccessibilityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessibilityDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessibilityDefContext accessibilityDef() {
		AccessibilityDefContext _localctx = new AccessibilityDefContext(Context, State);
		EnterRule(_localctx, 50, RULE_accessibilityDef);
		int _la;
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448;
				Match(ACCESSIBILITY);
				State = 449;
				Match(TRIVIAL_DEF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450;
				Match(ACCESSIBILITY);
				State = 451;
				Match(LPAREN);
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 452;
					accessibilityRel();
					}
					}
					State = 455;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				State = 457;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessibilityRelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(EPDDLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(EPDDLParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext[] agentName() {
			return GetRuleContexts<AgentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName(int i) {
			return GetRuleContext<AgentNameContext>(i);
		}
		public AccessibilityRelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessibilityRel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAccessibilityRel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAccessibilityRel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessibilityRel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessibilityRelContext accessibilityRel() {
		AccessibilityRelContext _localctx = new AccessibilityRelContext(Context, State);
		EnterRule(_localctx, 52, RULE_accessibilityRel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(LPAREN);
			State = 462;
			Match(NAME);
			State = 463;
			Match(NAME);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 464;
				agentName();
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AGENT_NAME );
			State = 469;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventPreDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECONDITION() { return GetToken(EPDDLParser.PRECONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		public EventPreDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventPreDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventPreDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventPreDefContext eventPreDef() {
		EventPreDefContext _localctx = new EventPreDefContext(Context, State);
		EnterRule(_localctx, 54, RULE_eventPreDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(PRECONDITION);
			State = 472;
			formulaOrEmpty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventPostDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTCONDITIONS() { return GetToken(EPDDLParser.POSTCONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionBlockContext postconditionBlock() {
			return GetRuleContext<PostconditionBlockContext>(0);
		}
		public EventPostDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventPostDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventPostDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventPostDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventPostDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventPostDefContext eventPostDef() {
		EventPostDefContext _localctx = new EventPostDefContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventPostDef);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case POSTCONDITIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474;
				Match(POSTCONDITIONS);
				State = 475;
				postconditionBlock();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERS() { return GetToken(EPDDLParser.PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ParametersDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterParametersDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitParametersDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersDefContext parametersDef() {
		ParametersDefContext _localctx = new ParametersDefContext(Context, State);
		EnterRule(_localctx, 58, RULE_parametersDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(PARAMETERS);
			State = 480;
			Match(LPAREN);
			State = 481;
			typedVariableList();
			State = 482;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITY() { return GetToken(EPDDLParser.MODALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityNameContext[] modalityName() {
			return GetRuleContexts<ModalityNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityNameContext modalityName(int i) {
			return GetRuleContext<ModalityNameContext>(i);
		}
		public ModalityDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityDefContext modalityDef() {
		ModalityDefContext _localctx = new ModalityDefContext(Context, State);
		EnterRule(_localctx, 60, RULE_modalityDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(LPAREN);
			State = 485;
			Match(MODALITY);
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODALITY_NAME) {
				{
				{
				State = 486;
				modalityName();
				}
				}
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 492;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservabilityGroupsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSERVABILITY_GROUPS() { return GetToken(EPDDLParser.OBSERVABILITY_GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext[] observingAgentGroup() {
			return GetRuleContexts<ObservingAgentGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup(int i) {
			return GetRuleContext<ObservingAgentGroupContext>(i);
		}
		public ObservabilityGroupsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observabilityGroupsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObservabilityGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObservabilityGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObservabilityGroupsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObservabilityGroupsDefContext observabilityGroupsDef() {
		ObservabilityGroupsDefContext _localctx = new ObservabilityGroupsDefContext(Context, State);
		EnterRule(_localctx, 62, RULE_observabilityGroupsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(LPAREN);
			State = 495;
			Match(OBSERVABILITY_GROUPS);
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 289L) != 0)) {
				{
				{
				State = 496;
				observingAgentGroup();
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 502;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostconditionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EPDDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionContext[] postcondition() {
			return GetRuleContexts<PostconditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionContext postcondition(int i) {
			return GetRuleContext<PostconditionContext>(i);
		}
		public PostconditionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postconditionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPostconditionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPostconditionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostconditionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostconditionBlockContext postconditionBlock() {
		PostconditionBlockContext _localctx = new PostconditionBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_postconditionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(LPAREN);
			State = 505;
			Match(COLON);
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 506;
				postcondition();
				}
				}
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 512;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePostconditionContext simplePostcondition() {
			return GetRuleContext<SimplePostconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		public PostconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostconditionContext postcondition() {
		PostconditionContext _localctx = new PostconditionContext(Context, State);
		EnterRule(_localctx, 66, RULE_postcondition);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514;
				simplePostcondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515;
				Match(LPAREN);
				State = 516;
				Match(FORALL);
				State = 517;
				Match(LPAREN);
				State = 518;
				typedVariableList();
				State = 519;
				Match(RPAREN);
				State = 520;
				simplePostcondition();
				State = 521;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 523;
				Match(LPAREN);
				State = 524;
				Match(VARIABLE);
				State = 525;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplePostconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFF() { return GetToken(EPDDLParser.IFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EPDDLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(EPDDLParser.ALWAYS, 0); }
		public SimplePostconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplePostcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterSimplePostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitSimplePostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimplePostconditionContext simplePostcondition() {
		SimplePostconditionContext _localctx = new SimplePostconditionContext(Context, State);
		EnterRule(_localctx, 68, RULE_simplePostcondition);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 528;
				Match(LPAREN);
				State = 529;
				Match(IFF);
				State = 530;
				formulaOrEmpty();
				State = 531;
				literal();
				State = 532;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534;
				Match(LPAREN);
				State = 535;
				Match(WHEN);
				State = 536;
				formulaOrEmpty();
				State = 537;
				literal();
				State = 538;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 540;
				Match(LPAREN);
				State = 541;
				Match(ALWAYS);
				State = 542;
				literal();
				State = 543;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_TYPE() { return GetToken(EPDDLParser.ACTION_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeNameContext actionTypeName() {
			return GetRuleContext<ActionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeGroupsDefContext actionTypeGroupsDef() {
			return GetRuleContext<ActionTypeGroupsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeEventsDefContext actionTypeEventsDef() {
			return GetRuleContext<ActionTypeEventsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeRelDefContext actionTypeRelDef() {
			return GetRuleContext<ActionTypeRelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeDesignDefContext actionTypeDesignDef() {
			return GetRuleContext<ActionTypeDesignDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ActionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeDefContext actionTypeDef() {
		ActionTypeDefContext _localctx = new ActionTypeDefContext(Context, State);
		EnterRule(_localctx, 70, RULE_actionTypeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(LPAREN);
			State = 548;
			Match(ACTION_TYPE);
			State = 549;
			actionTypeName();
			State = 550;
			parametersDef();
			State = 551;
			actionTypeGroupsDef();
			State = 552;
			actionTypeEventsDef();
			State = 553;
			actionTypeRelDef();
			State = 554;
			actionTypeDesignDef();
			State = 555;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(EPDDLParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateNameContext stateName() {
			return GetRuleContext<StateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateWorldsDefContext stateWorldsDef() {
			return GetRuleContext<StateWorldsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateRelDefContext stateRelDef() {
			return GetRuleContext<StateRelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateValDefContext stateValDef() {
			return GetRuleContext<StateValDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateDesignDefContext stateDesignDef() {
			return GetRuleContext<StateDesignDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public StateDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDefContext stateDef() {
		StateDefContext _localctx = new StateDefContext(Context, State);
		EnterRule(_localctx, 72, RULE_stateDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(LPAREN);
			State = 558;
			Match(STATE);
			State = 559;
			stateName();
			State = 560;
			stateWorldsDef();
			State = 561;
			stateRelDef();
			State = 562;
			stateValDef();
			State = 563;
			stateDesignDef();
			State = 564;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(EPDDLParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldsDefContext worldsDef() {
			return GetRuleContext<WorldsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityDefContext accessibilityDef() {
			return GetRuleContext<AccessibilityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public InitDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterInitDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitInitDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDefContext initDef() {
		InitDefContext _localctx = new InitDefContext(Context, State);
		EnterRule(_localctx, 74, RULE_initDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(LPAREN);
			State = 567;
			Match(INIT);
			State = 568;
			worldsDef();
			State = 569;
			accessibilityDef();
			State = 570;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORLDS() { return GetToken(EPDDLParser.WORLDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldDefContext[] worldDef() {
			return GetRuleContexts<WorldDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldDefContext worldDef(int i) {
			return GetRuleContext<WorldDefContext>(i);
		}
		public WorldsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldsDefContext worldsDef() {
		WorldsDefContext _localctx = new WorldsDefContext(Context, State);
		EnterRule(_localctx, 76, RULE_worldsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(WORLDS);
			State = 573;
			Match(LPAREN);
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 574;
				worldDef();
				}
				}
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 579;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName() {
			return GetRuleContext<WorldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public WorldDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldDefContext worldDef() {
		WorldDefContext _localctx = new WorldDefContext(Context, State);
		EnterRule(_localctx, 78, RULE_worldDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(LPAREN);
			State = 582;
			worldName();
			State = 583;
			Match(LPAREN);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 584;
				predicate();
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 589;
			Match(RPAREN);
			State = 590;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOAL() { return GetToken(EPDDLParser.GOAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public GoalDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goalDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGoalDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGoalDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalDefContext goalDef() {
		GoalDefContext _localctx = new GoalDefContext(Context, State);
		EnterRule(_localctx, 80, RULE_goalDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(LPAREN);
			State = 593;
			Match(GOAL);
			State = 594;
			formula();
			State = 595;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionConditionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EPDDLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionFormulaContext conditionFormula() {
			return GetRuleContext<ConditionFormulaContext>(0);
		}
		public ActionConditionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionConditionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionConditionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionConditionDefContext actionConditionDef() {
		ActionConditionDefContext _localctx = new ActionConditionDefContext(Context, State);
		EnterRule(_localctx, 82, RULE_actionConditionDef);
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597;
				Match(WHERE);
				State = 598;
				conditionFormula();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeSignatureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_TYPE() { return GetToken(EPDDLParser.ACTION_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeNameContext actionTypeName() {
			return GetRuleContext<ActionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ActionTypeSignatureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeSignatureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeSignatureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeSignatureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeSignatureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeSignatureDefContext actionTypeSignatureDef() {
		ActionTypeSignatureDefContext _localctx = new ActionTypeSignatureDefContext(Context, State);
		EnterRule(_localctx, 84, RULE_actionTypeSignatureDef);
		int _la;
		try {
			State = 614;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACTION_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				Match(ACTION_TYPE);
				State = 603;
				Match(LPAREN);
				State = 604;
				actionTypeName();
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN) {
					{
					{
					State = 605;
					parameter();
					}
					}
					State = 610;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 611;
				Match(RPAREN);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionPreDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECONDITION() { return GetToken(EPDDLParser.PRECONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		public ActionPreDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionPreDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionPreDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionPreDefContext actionPreDef() {
		ActionPreDefContext _localctx = new ActionPreDefContext(Context, State);
		EnterRule(_localctx, 86, RULE_actionPreDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(PRECONDITION);
			State = 617;
			formulaOrEmpty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionObsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSERVABILITY_CONDITIONS() { return GetToken(EPDDLParser.OBSERVABILITY_CONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionDefContext[] obsConditionDef() {
			return GetRuleContexts<ObsConditionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionDefContext obsConditionDef(int i) {
			return GetRuleContext<ObsConditionDefContext>(i);
		}
		public ActionObsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionObsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionObsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionObsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionObsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionObsDefContext actionObsDef() {
		ActionObsDefContext _localctx = new ActionObsDefContext(Context, State);
		EnterRule(_localctx, 88, RULE_actionObsDef);
		int _la;
		try {
			State = 627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBSERVABILITY_CONDITIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(OBSERVABILITY_CONDITIONS);
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN) {
					{
					{
					State = 620;
					obsConditionDef();
					}
					}
					State = 625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(EPDDLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(EPDDLParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		public TypedIdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentListContext typedIdentList() {
		TypedIdentListContext _localctx = new TypedIdentListContext(Context, State);
		EnterRule(_localctx, 90, RULE_typedIdentList);
		int _la;
		try {
			State = 646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 629;
					Match(NAME);
					}
					}
					State = 634;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				Match(NAME);
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 636;
					Match(NAME);
					}
					}
					State = 641;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 642;
				Match(DASH);
				State = 643;
				type();
				State = 644;
				typedIdentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(EPDDLParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(EPDDLParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		public TypedVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypedVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypedVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVariableListContext typedVariableList() {
		TypedVariableListContext _localctx = new TypedVariableListContext(Context, State);
		EnterRule(_localctx, 92, RULE_typedVariableList);
		int _la;
		try {
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VARIABLE) {
					{
					{
					State = 648;
					Match(VARIABLE);
					}
					}
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 654;
				Match(VARIABLE);
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VARIABLE) {
					{
					{
					State = 655;
					Match(VARIABLE);
					}
					}
					State = 660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 661;
				Match(DASH);
				State = 662;
				type();
				State = 663;
				typedVariableList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedAgentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AGENT_NAME() { return GetTokens(EPDDLParser.AGENT_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME(int i) {
			return GetToken(EPDDLParser.AGENT_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedAgentListContext typedAgentList() {
			return GetRuleContext<TypedAgentListContext>(0);
		}
		public TypedAgentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedAgentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypedAgentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypedAgentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedAgentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedAgentListContext typedAgentList() {
		TypedAgentListContext _localctx = new TypedAgentListContext(Context, State);
		EnterRule(_localctx, 94, RULE_typedAgentList);
		int _la;
		try {
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 667;
					Match(AGENT_NAME);
					}
					}
					State = 672;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 673;
				Match(AGENT_NAME);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 674;
					Match(AGENT_NAME);
					}
					}
					State = 679;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 680;
				Match(DASH);
				State = 681;
				type();
				State = 682;
				typedAgentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedTypeContext reservedType() {
			return GetRuleContext<ReservedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_type);
		try {
			State = 688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREDICATE:
			case PREDICATE_FORMULA:
			case FORMULA:
			case POSTCONDITION:
			case LITERAL:
			case AGENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 686;
				reservedType();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 687;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT() { return GetToken(EPDDLParser.AGENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATE() { return GetToken(EPDDLParser.PREDICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(EPDDLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATE_FORMULA() { return GetToken(EPDDLParser.PREDICATE_FORMULA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMULA() { return GetToken(EPDDLParser.FORMULA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTCONDITION() { return GetToken(EPDDLParser.POSTCONDITION, 0); }
		public ReservedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterReservedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitReservedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedTypeContext reservedType() {
		ReservedTypeContext _localctx = new ReservedTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_reservedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 716072340751908864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLY() { return GetToken(EPDDLParser.IMPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext[] formula() {
			return GetRuleContexts<FormulaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula(int i) {
			return GetRuleContext<FormulaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(EPDDLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EPDDLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(EPDDLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityContext modality() {
			return GetRuleContext<ModalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext predicateFormula() {
			return GetRuleContext<PredicateFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicEqFormulaContext atomicEqFormula() {
			return GetRuleContext<AtomicEqFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(EPDDLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(EPDDLParser.FALSE, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 100, RULE_formula);
		int _la;
		try {
			State = 748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692;
				Match(LPAREN);
				State = 693;
				Match(IMPLY);
				State = 694;
				formula();
				State = 695;
				formula();
				State = 696;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 698;
				Match(LPAREN);
				State = 699;
				Match(OR);
				State = 700;
				formula();
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 148176371715L) != 0)) {
					{
					{
					State = 701;
					formula();
					}
					}
					State = 706;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 707;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 709;
				Match(LPAREN);
				State = 710;
				Match(AND);
				State = 711;
				formula();
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 148176371715L) != 0)) {
					{
					{
					State = 712;
					formula();
					}
					}
					State = 717;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 718;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 720;
				Match(LPAREN);
				State = 721;
				Match(NOT);
				State = 722;
				formula();
				State = 723;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 725;
				Match(LPAREN);
				State = 726;
				Match(EXISTS);
				State = 727;
				Match(LPAREN);
				State = 728;
				typedVariableList();
				State = 729;
				Match(RPAREN);
				State = 730;
				formula();
				State = 731;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 733;
				Match(LPAREN);
				State = 734;
				Match(FORALL);
				State = 735;
				Match(LPAREN);
				State = 736;
				typedVariableList();
				State = 737;
				Match(RPAREN);
				State = 738;
				formula();
				State = 739;
				Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 741;
				modality();
				State = 742;
				formula();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 744;
				predicateFormula();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 745;
				atomicEqFormula();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 746;
				Match(TRUE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 747;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EPDDLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ConditionFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterConditionFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitConditionFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionFormulaContext conditionFormula() {
		ConditionFormulaContext _localctx = new ConditionFormulaContext(Context, State);
		EnterRule(_localctx, 102, RULE_conditionFormula);
		int _la;
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 750;
				Match(LPAREN);
				State = 751;
				Match(AND);
				State = 752;
				condition();
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN) {
					{
					{
					State = 753;
					condition();
					}
					}
					State = 758;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 759;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicConditionContext atomicCondition() {
			return GetRuleContext<AtomicConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 104, RULE_condition);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 764;
				atomicCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 765;
				Match(LPAREN);
				State = 766;
				Match(NOT);
				State = 767;
				atomicCondition();
				State = 768;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		public AtomicConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAtomicCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAtomicCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicConditionContext atomicCondition() {
		AtomicConditionContext _localctx = new AtomicConditionContext(Context, State);
		EnterRule(_localctx, 106, RULE_atomicCondition);
		int _la;
		try {
			State = 788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 772;
				Match(LPAREN);
				State = 773;
				predicateName();
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 19L) != 0)) {
					{
					{
					State = 774;
					term();
					}
					}
					State = 779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 780;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782;
				Match(LPAREN);
				State = 783;
				Match(ASSIGN);
				State = 784;
				term();
				State = 785;
				term();
				State = 786;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLY() { return GetToken(EPDDLParser.IMPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext[] predicateFormula() {
			return GetRuleContexts<PredicateFormulaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext predicateFormula(int i) {
			return GetRuleContext<PredicateFormulaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(EPDDLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EPDDLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(EPDDLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public PredicateFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateFormulaContext predicateFormula() {
		PredicateFormulaContext _localctx = new PredicateFormulaContext(Context, State);
		EnterRule(_localctx, 108, RULE_predicateFormula);
		int _la;
		try {
			State = 845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 790;
				Match(LPAREN);
				State = 791;
				Match(IMPLY);
				State = 792;
				predicateFormula();
				State = 793;
				predicateFormula();
				State = 794;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				Match(LPAREN);
				State = 797;
				Match(OR);
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 798;
					predicateFormula();
					}
					}
					State = 801;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				State = 803;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 805;
				Match(LPAREN);
				State = 806;
				Match(AND);
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 807;
					predicateFormula();
					}
					}
					State = 810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				State = 812;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 814;
				Match(LPAREN);
				State = 815;
				Match(NOT);
				State = 816;
				predicateFormula();
				State = 817;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 819;
				Match(LPAREN);
				State = 820;
				Match(EXISTS);
				State = 821;
				Match(LPAREN);
				State = 822;
				typedVariableList();
				State = 823;
				Match(RPAREN);
				State = 824;
				predicateFormula();
				State = 825;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 827;
				Match(LPAREN);
				State = 828;
				Match(FORALL);
				State = 829;
				Match(LPAREN);
				State = 830;
				typedVariableList();
				State = 831;
				Match(RPAREN);
				State = 832;
				predicateFormula();
				State = 833;
				Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 835;
				Match(LPAREN);
				State = 836;
				predicateName();
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 19L) != 0)) {
					{
					{
					State = 837;
					term();
					}
					}
					State = 842;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 843;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicEqFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public AtomicEqFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicEqFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAtomicEqFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAtomicEqFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicEqFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicEqFormulaContext atomicEqFormula() {
		AtomicEqFormulaContext _localctx = new AtomicEqFormulaContext(Context, State);
		EnterRule(_localctx, 110, RULE_atomicEqFormula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			Match(LPAREN);
			State = 848;
			Match(ASSIGN);
			State = 849;
			term();
			State = 850;
			term();
			State = 851;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroundTermContext groundTerm() {
			return GetRuleContext<GroundTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 112, RULE_term);
		try {
			State = 855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 853;
				groundTerm();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 854;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroundTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		public GroundTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groundTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGroundTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGroundTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroundTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroundTermContext groundTerm() {
		GroundTermContext _localctx = new GroundTermContext(Context, State);
		EnterRule(_localctx, 114, RULE_groundTerm);
		try {
			State = 859;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857;
				Match(NAME);
				}
				break;
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 858;
				agentName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleModalityContext singleModality() {
			return GetRuleContext<SingleModalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupModalityContext groupModality() {
			return GetRuleContext<GroupModalityContext>(0);
		}
		public ModalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityContext modality() {
		ModalityContext _localctx = new ModalityContext(Context, State);
		EnterRule(_localctx, 116, RULE_modality);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				singleModality();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862;
				groupModality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleModalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityLabelContext modalityLabel() {
			return GetRuleContext<ModalityLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentContext modalityAgent() {
			return GetRuleContext<ModalityAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EPDDLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EPDDLParser.GT, 0); }
		public SingleModalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleModality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterSingleModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitSingleModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleModality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleModalityContext singleModality() {
		SingleModalityContext _localctx = new SingleModalityContext(Context, State);
		EnterRule(_localctx, 118, RULE_singleModality);
		try {
			State = 875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				Match(LBRACKET);
				State = 866;
				modalityLabel();
				State = 867;
				modalityAgent();
				State = 868;
				Match(RBRACKET);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 870;
				Match(LT);
				State = 871;
				modalityLabel();
				State = 872;
				modalityAgent();
				State = 873;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupModalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityLabelContext modalityLabel() {
			return GetRuleContext<ModalityLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentGroupContext modalityAgentGroup() {
			return GetRuleContext<ModalityAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EPDDLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EPDDLParser.GT, 0); }
		public GroupModalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupModality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGroupModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGroupModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupModality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupModalityContext groupModality() {
		GroupModalityContext _localctx = new GroupModalityContext(Context, State);
		EnterRule(_localctx, 120, RULE_groupModality);
		try {
			State = 887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 877;
				Match(LBRACKET);
				State = 878;
				modalityLabel();
				State = 879;
				modalityAgentGroup();
				State = 880;
				Match(RBRACKET);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 882;
				Match(LT);
				State = 883;
				modalityLabel();
				State = 884;
				modalityAgentGroup();
				State = 885;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModalityNameContext modalityName() {
			return GetRuleContext<ModalityNameContext>(0);
		}
		public ModalityLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityLabelContext modalityLabel() {
		ModalityLabelContext _localctx = new ModalityLabelContext(Context, State);
		EnterRule(_localctx, 122, RULE_modalityLabel);
		try {
			State = 891;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODALITY_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				modalityName();
				}
				break;
			case ALL:
			case AGENT_NAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityAgentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllAgentsContext allAgents() {
			return GetRuleContext<AllAgentsContext>(0);
		}
		public ModalityAgentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityAgent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityAgent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityAgentContext modalityAgent() {
		ModalityAgentContext _localctx = new ModalityAgentContext(Context, State);
		EnterRule(_localctx, 124, RULE_modalityAgent);
		try {
			State = 896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 893;
				agentName();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894;
				Match(VARIABLE);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 895;
				allAgents();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityAgentGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentContext[] modalityAgent() {
			return GetRuleContexts<ModalityAgentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentContext modalityAgent(int i) {
			return GetRuleContext<ModalityAgentContext>(i);
		}
		public ModalityAgentGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityAgentGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityAgentGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityAgentGroupContext modalityAgentGroup() {
		ModalityAgentGroupContext _localctx = new ModalityAgentGroupContext(Context, State);
		EnterRule(_localctx, 126, RULE_modalityAgentGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			modalityAgent();
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 289L) != 0)) {
				{
				{
				State = 899;
				modalityAgent();
				}
				}
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllAgentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public AllAgentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allAgents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAllAgents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAllAgents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllAgents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllAgentsContext allAgents() {
		AllAgentsContext _localctx = new AllAgentsContext(Context, State);
		EnterRule(_localctx, 128, RULE_allAgents);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public PredicateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateNameContext predicateName() {
		PredicateNameContext _localctx = new PredicateNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_predicateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(Context, State);
		EnterRule(_localctx, 132, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(Context, State);
		EnterRule(_localctx, 134, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public LibraryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLibraryName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLibraryName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryNameContext libraryName() {
		LibraryNameContext _localctx = new LibraryNameContext(Context, State);
		EnterRule(_localctx, 136, RULE_libraryName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public StateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateNameContext stateName() {
		StateNameContext _localctx = new StateNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_stateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public WorldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldNameContext worldName() {
		WorldNameContext _localctx = new WorldNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_worldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public ActionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionNameContext actionName() {
		ActionNameContext _localctx = new ActionNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_actionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME() { return GetToken(EPDDLParser.AGENT_NAME, 0); }
		public AgentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentNameContext agentName() {
		AgentNameContext _localctx = new AgentNameContext(Context, State);
		EnterRule(_localctx, 146, RULE_agentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			Match(AGENT_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITY_NAME() { return GetToken(EPDDLParser.MODALITY_NAME, 0); }
		public ModalityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityNameContext modalityName() {
		ModalityNameContext _localctx = new ModalityNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_modalityName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(MODALITY_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticPredDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericNameContext[] genericName() {
			return GetRuleContexts<GenericNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericNameContext genericName(int i) {
			return GetRuleContext<GenericNameContext>(i);
		}
		public StaticPredDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticPredDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStaticPredDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStaticPredDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticPredDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticPredDefContext staticPredDef() {
		StaticPredDefContext _localctx = new StaticPredDefContext(Context, State);
		EnterRule(_localctx, 150, RULE_staticPredDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			Match(LPAREN);
			State = 928;
			predicateName();
			State = 932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME || _la==AGENT_NAME) {
				{
				{
				State = 929;
				genericName();
				}
				}
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 935;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		public GenericNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericNameContext genericName() {
		GenericNameContext _localctx = new GenericNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_genericName);
		try {
			State = 939;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937;
				Match(NAME);
				}
				break;
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 938;
				agentName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateWorldsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORLDS() { return GetToken(EPDDLParser.WORLDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext[] worldName() {
			return GetRuleContexts<WorldNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName(int i) {
			return GetRuleContext<WorldNameContext>(i);
		}
		public StateWorldsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateWorldsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateWorldsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateWorldsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateWorldsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateWorldsDefContext stateWorldsDef() {
		StateWorldsDefContext _localctx = new StateWorldsDefContext(Context, State);
		EnterRule(_localctx, 154, RULE_stateWorldsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			Match(WORLDS);
			State = 942;
			Match(LPAREN);
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 943;
				worldName();
				}
				}
				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 948;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateRelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONS() { return GetToken(EPDDLParser.RELATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateRelationsContext stateRelations() {
			return GetRuleContext<StateRelationsContext>(0);
		}
		public StateRelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateRelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateRelDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateRelDefContext stateRelDef() {
		StateRelDefContext _localctx = new StateRelDefContext(Context, State);
		EnterRule(_localctx, 156, RULE_stateRelDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			Match(RELATIONS);
			State = 951;
			stateRelations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateRelationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WorldRelationContext[] worldRelation() {
			return GetRuleContexts<WorldRelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldRelationContext worldRelation(int i) {
			return GetRuleContext<WorldRelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public StateRelationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateRelations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateRelations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateRelationsContext stateRelations() {
		StateRelationsContext _localctx = new StateRelationsContext(Context, State);
		EnterRule(_localctx, 158, RULE_stateRelations);
		int _la;
		try {
			State = 961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 953;
					worldRelation();
					}
					}
					State = 956;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 958;
				Match(LPAREN);
				State = 959;
				Match(TRIVIAL_DEF);
				State = 960;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldRelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupContext agentGroup() {
			return GetRuleContext<AgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNamePairContext[] worldNamePair() {
			return GetRuleContexts<WorldNamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNamePairContext worldNamePair(int i) {
			return GetRuleContext<WorldNamePairContext>(i);
		}
		public WorldRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldRelationContext worldRelation() {
		WorldRelationContext _localctx = new WorldRelationContext(Context, State);
		EnterRule(_localctx, 160, RULE_worldRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			Match(LPAREN);
			State = 964;
			agentGroup();
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 965;
				worldNamePair();
				}
				}
				State = 968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 970;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldNamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext[] worldName() {
			return GetRuleContexts<WorldNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName(int i) {
			return GetRuleContext<WorldNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public WorldNamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldNamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldNamePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldNamePairContext worldNamePair() {
		WorldNamePairContext _localctx = new WorldNamePairContext(Context, State);
		EnterRule(_localctx, 162, RULE_worldNamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			Match(LPAREN);
			State = 973;
			worldName();
			State = 974;
			worldName();
			State = 975;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateValDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUATION() { return GetToken(EPDDLParser.VALUATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateValuationContext stateValuation() {
			return GetRuleContext<StateValuationContext>(0);
		}
		public StateValDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateValDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateValDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateValDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateValDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateValDefContext stateValDef() {
		StateValDefContext _localctx = new StateValDefContext(Context, State);
		EnterRule(_localctx, 164, RULE_stateValDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			Match(VALUATION);
			State = 978;
			stateValuation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateValuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WorldValuationContext[] worldValuation() {
			return GetRuleContexts<WorldValuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldValuationContext worldValuation(int i) {
			return GetRuleContext<WorldValuationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public StateValuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateValuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateValuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateValuationContext stateValuation() {
		StateValuationContext _localctx = new StateValuationContext(Context, State);
		EnterRule(_localctx, 166, RULE_stateValuation);
		int _la;
		try {
			State = 988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 980;
					worldValuation();
					}
					}
					State = 983;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985;
				Match(LPAREN);
				State = 986;
				Match(TRIVIAL_DEF);
				State = 987;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldValuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName() {
			return GetRuleContext<WorldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public WorldValuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldValuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldValuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldValuationContext worldValuation() {
		WorldValuationContext _localctx = new WorldValuationContext(Context, State);
		EnterRule(_localctx, 168, RULE_worldValuation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(LPAREN);
			State = 991;
			worldName();
			State = 992;
			Match(LBRACKET);
			State = 996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 993;
				literal();
				}
				}
				State = 998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 999;
			Match(RBRACKET);
			State = 1000;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDesignDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESIGNATED() { return GetToken(EPDDLParser.DESIGNATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext[] worldName() {
			return GetRuleContexts<WorldNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName(int i) {
			return GetRuleContext<WorldNameContext>(i);
		}
		public StateDesignDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDesignDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDesignDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDesignDefContext stateDesignDef() {
		StateDesignDefContext _localctx = new StateDesignDefContext(Context, State);
		EnterRule(_localctx, 170, RULE_stateDesignDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			Match(DESIGNATED);
			State = 1003;
			Match(LPAREN);
			State = 1005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1004;
				worldName();
				}
				}
				State = 1007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 1009;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupNameContext agentGroupName() {
			return GetRuleContext<AgentGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(EPDDLParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext[] agentName() {
			return GetRuleContexts<AgentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName(int i) {
			return GetRuleContext<AgentNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(EPDDLParser.RBRACE, 0); }
		public AgentGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupContext agentGroup() {
		AgentGroupContext _localctx = new AgentGroupContext(Context, State);
		EnterRule(_localctx, 172, RULE_agentGroup);
		int _la;
		try {
			State = 1022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1011;
				agentGroupName();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1012;
				Match(LBRACE);
				State = 1013;
				agentName();
				State = 1017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 1014;
					agentName();
					}
					}
					State = 1019;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1020;
				Match(RBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialStateDescrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FTheoryFormulaContext[] fTheoryFormula() {
			return GetRuleContexts<FTheoryFormulaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FTheoryFormulaContext fTheoryFormula(int i) {
			return GetRuleContext<FTheoryFormulaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE_NAME() { return GetToken(EPDDLParser.STATE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateNameContext stateName() {
			return GetRuleContext<StateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public InitialStateDescrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialStateDescr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterInitialStateDescr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitInitialStateDescr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialStateDescr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialStateDescrContext initialStateDescr() {
		InitialStateDescrContext _localctx = new InitialStateDescrContext(Context, State);
		EnterRule(_localctx, 174, RULE_initialStateDescr);
		int _la;
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN || _la==LBRACKET) {
					{
					{
					State = 1024;
					fTheoryFormula();
					}
					}
					State = 1029;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1030;
				Match(LPAREN);
				State = 1031;
				Match(STATE_NAME);
				State = 1032;
				stateName();
				State = 1033;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FTheoryFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFTheoryFormulaContext simpleFTheoryFormula() {
			return GetRuleContext<SimpleFTheoryFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		public FTheoryFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fTheoryFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFTheoryFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FTheoryFormulaContext fTheoryFormula() {
		FTheoryFormulaContext _localctx = new FTheoryFormulaContext(Context, State);
		EnterRule(_localctx, 176, RULE_fTheoryFormula);
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037;
				simpleFTheoryFormula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1038;
				Match(LPAREN);
				State = 1039;
				Match(FORALL);
				State = 1040;
				Match(LPAREN);
				State = 1041;
				typedVariableList();
				State = 1042;
				Match(RPAREN);
				State = 1043;
				simpleFTheoryFormula();
				State = 1044;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFTheoryFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext predicateFormula() {
			return GetRuleContext<PredicateFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(EPDDLParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(EPDDLParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(EPDDLParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(EPDDLParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KnowsWhetherContext knowsWhether() {
			return GetRuleContext<KnowsWhetherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public SimpleFTheoryFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFTheoryFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterSimpleFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitSimpleFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFTheoryFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFTheoryFormulaContext simpleFTheoryFormula() {
		SimpleFTheoryFormulaContext _localctx = new SimpleFTheoryFormulaContext(Context, State);
		EnterRule(_localctx, 178, RULE_simpleFTheoryFormula);
		try {
			State = 1076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1048;
				predicateFormula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1049;
				Match(LBRACKET);
				State = 1050;
				Match(ALL);
				State = 1051;
				Match(RBRACKET);
				State = 1052;
				predicateFormula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1053;
				Match(LBRACKET);
				State = 1054;
				Match(ALL);
				State = 1055;
				Match(RBRACKET);
				State = 1056;
				Match(LBRACKET);
				State = 1057;
				agentName();
				State = 1058;
				Match(RBRACKET);
				State = 1059;
				predicateFormula();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1061;
				Match(LBRACKET);
				State = 1062;
				Match(ALL);
				State = 1063;
				Match(RBRACKET);
				State = 1064;
				knowsWhether();
				State = 1065;
				predicateFormula();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1067;
				Match(LBRACKET);
				State = 1068;
				Match(ALL);
				State = 1069;
				Match(RBRACKET);
				State = 1070;
				Match(LPAREN);
				State = 1071;
				Match(NOT);
				State = 1072;
				knowsWhether();
				State = 1073;
				predicateFormula();
				State = 1074;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public ActionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeNameContext actionTypeName() {
		ActionTypeNameContext _localctx = new ActionTypeNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_actionTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 182, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			Match(LPAREN);
			State = 1081;
			Match(VARIABLE);
			State = 1082;
			Match(ASSIGN);
			State = 1083;
			expression();
			State = 1084;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionBlockContext postconditionBlock() {
			return GetRuleContext<PostconditionBlockContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_expression);
		try {
			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1086;
				term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1087;
				formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1088;
				postconditionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormulaOrEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		public FormulaOrEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formulaOrEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterFormulaOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitFormulaOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormulaOrEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaOrEmptyContext formulaOrEmpty() {
		FormulaOrEmptyContext _localctx = new FormulaOrEmptyContext(Context, State);
		EnterRule(_localctx, 186, RULE_formulaOrEmpty);
		try {
			State = 1093;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRIVIAL_DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1091;
				Match(TRIVIAL_DEF);
				}
				break;
			case TRUE:
			case FALSE:
			case LPAREN:
			case LBRACKET:
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1092;
				formula();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsConditionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniversalObsCondContext universalObsCond() {
			return GetRuleContext<UniversalObsCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionContext obsCondition() {
			return GetRuleContext<ObsConditionContext>(0);
		}
		public ObsConditionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obsConditionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObsConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObsConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObsConditionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObsConditionDefContext obsConditionDef() {
		ObsConditionDefContext _localctx = new ObsConditionDefContext(Context, State);
		EnterRule(_localctx, 188, RULE_obsConditionDef);
		try {
			State = 1097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1095;
				universalObsCond();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1096;
				obsCondition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionContext[] obsCondition() {
			return GetRuleContexts<ObsConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionContext obsCondition(int i) {
			return GetRuleContext<ObsConditionContext>(i);
		}
		public UniversalObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterUniversalObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitUniversalObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalObsCondContext universalObsCond() {
		UniversalObsCondContext _localctx = new UniversalObsCondContext(Context, State);
		EnterRule(_localctx, 190, RULE_universalObsCond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			Match(LPAREN);
			State = 1100;
			Match(FORALL);
			State = 1101;
			Match(LPAREN);
			State = 1102;
			Match(VARIABLE);
			State = 1103;
			Match(DASH);
			State = 1104;
			type();
			State = 1105;
			Match(RPAREN);
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1106;
				obsCondition();
				}
				}
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 1111;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrivialObsCondContext trivialObsCond() {
			return GetRuleContext<TrivialObsCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfObsCondContext ifObsCond() {
			return GetRuleContext<IfObsCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherwiseObsCondContext otherwiseObsCond() {
			return GetRuleContext<OtherwiseObsCondContext>(0);
		}
		public ObsConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obsCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObsCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObsCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObsCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObsConditionContext obsCondition() {
		ObsConditionContext _localctx = new ObsConditionContext(Context, State);
		EnterRule(_localctx, 192, RULE_obsCondition);
		try {
			State = 1116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1113;
				trivialObsCond();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1114;
				ifObsCond();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1115;
				otherwiseObsCond();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent() {
			return GetRuleContext<ObservingAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup() {
			return GetRuleContext<ObservingAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public TrivialObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTrivialObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTrivialObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialObsCondContext trivialObsCond() {
		TrivialObsCondContext _localctx = new TrivialObsCondContext(Context, State);
		EnterRule(_localctx, 194, RULE_trivialObsCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(LPAREN);
			State = 1119;
			observingAgent();
			State = 1120;
			observingAgentGroup();
			State = 1121;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EPDDLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent() {
			return GetRuleContext<ObservingAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup() {
			return GetRuleContext<ObservingAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public IfObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterIfObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitIfObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfObsCondContext ifObsCond() {
		IfObsCondContext _localctx = new IfObsCondContext(Context, State);
		EnterRule(_localctx, 196, RULE_ifObsCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			Match(LPAREN);
			State = 1124;
			Match(IF);
			State = 1125;
			formula();
			State = 1126;
			observingAgent();
			State = 1127;
			observingAgentGroup();
			State = 1128;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherwiseObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(EPDDLParser.OTHERWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent() {
			return GetRuleContext<ObservingAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup() {
			return GetRuleContext<ObservingAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public OtherwiseObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwiseObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterOtherwiseObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitOtherwiseObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherwiseObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherwiseObsCondContext otherwiseObsCond() {
		OtherwiseObsCondContext _localctx = new OtherwiseObsCondContext(Context, State);
		EnterRule(_localctx, 198, RULE_otherwiseObsCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			Match(LPAREN);
			State = 1131;
			Match(OTHERWISE);
			State = 1132;
			observingAgent();
			State = 1133;
			observingAgentGroup();
			State = 1134;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservingAgentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME() { return GetToken(EPDDLParser.AGENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public ObservingAgentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observingAgent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObservingAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObservingAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObservingAgent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObservingAgentContext observingAgent() {
		ObservingAgentContext _localctx = new ObservingAgentContext(Context, State);
		EnterRule(_localctx, 200, RULE_observingAgent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 289L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservingAgentGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext[] observingAgent() {
			return GetRuleContexts<ObservingAgentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent(int i) {
			return GetRuleContext<ObservingAgentContext>(i);
		}
		public ObservingAgentGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observingAgentGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObservingAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObservingAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObservingAgentGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObservingAgentGroupContext observingAgentGroup() {
		ObservingAgentGroupContext _localctx = new ObservingAgentGroupContext(Context, State);
		EnterRule(_localctx, 202, RULE_observingAgentGroup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			observingAgent();
			State = 1142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1139;
					observingAgent();
					}
					} 
				}
				State = 1144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME() { return GetToken(EPDDLParser.AGENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public AgentGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroupName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroupName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupNameContext agentGroupName() {
		AgentGroupNameContext _localctx = new AgentGroupNameContext(Context, State);
		EnterRule(_localctx, 204, RULE_agentGroupName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==AGENT_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 206, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			Match(LPAREN);
			State = 1148;
			predicateName();
			State = 1152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 19L) != 0)) {
				{
				{
				State = 1149;
				term();
				}
				}
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1155;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeGroupsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSERVABILITY_GROUPS() { return GetToken(EPDDLParser.OBSERVABILITY_GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext[] observingAgentGroup() {
			return GetRuleContexts<ObservingAgentGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup(int i) {
			return GetRuleContext<ObservingAgentGroupContext>(i);
		}
		public ActionTypeGroupsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeGroupsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeGroupsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeGroupsDefContext actionTypeGroupsDef() {
		ActionTypeGroupsDefContext _localctx = new ActionTypeGroupsDefContext(Context, State);
		EnterRule(_localctx, 208, RULE_actionTypeGroupsDef);
		int _la;
		try {
			State = 1167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBSERVABILITY_GROUPS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157;
				Match(OBSERVABILITY_GROUPS);
				State = 1158;
				Match(LPAREN);
				State = 1162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 289L) != 0)) {
					{
					{
					State = 1159;
					observingAgentGroup();
					}
					}
					State = 1164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1165;
				Match(RPAREN);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeEventsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EPDDLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventSignatureContext[] eventSignature() {
			return GetRuleContexts<EventSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventSignatureContext eventSignature(int i) {
			return GetRuleContext<EventSignatureContext>(i);
		}
		public ActionTypeEventsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeEventsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeEventsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeEventsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeEventsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeEventsDefContext actionTypeEventsDef() {
		ActionTypeEventsDefContext _localctx = new ActionTypeEventsDefContext(Context, State);
		EnterRule(_localctx, 210, RULE_actionTypeEventsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169;
			Match(EVENT);
			State = 1171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1170;
				eventSignature();
				}
				}
				State = 1173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public EventSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventSignatureContext eventSignature() {
		EventSignatureContext _localctx = new EventSignatureContext(Context, State);
		EnterRule(_localctx, 212, RULE_eventSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1175;
			Match(LPAREN);
			State = 1176;
			eventName();
			State = 1180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 1177;
				parameter();
				}
				}
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1183;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeRelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONS() { return GetToken(EPDDLParser.RELATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionRelationsContext actionRelations() {
			return GetRuleContext<ActionRelationsContext>(0);
		}
		public ActionTypeRelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeRelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeRelDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeRelDefContext actionTypeRelDef() {
		ActionTypeRelDefContext _localctx = new ActionTypeRelDefContext(Context, State);
		EnterRule(_localctx, 214, RULE_actionTypeRelDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			Match(RELATIONS);
			State = 1186;
			actionRelations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionRelationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventRelationContext[] eventRelation() {
			return GetRuleContexts<EventRelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventRelationContext eventRelation(int i) {
			return GetRuleContext<EventRelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ActionRelationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionRelations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionRelations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionRelationsContext actionRelations() {
		ActionRelationsContext _localctx = new ActionRelationsContext(Context, State);
		EnterRule(_localctx, 216, RULE_actionRelations);
		int _la;
		try {
			State = 1196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1188;
					eventRelation();
					}
					}
					State = 1191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1193;
				Match(LPAREN);
				State = 1194;
				Match(TRIVIAL_DEF);
				State = 1195;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupContext agentGroup() {
			return GetRuleContext<AgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNamePairContext[] eventNamePair() {
			return GetRuleContexts<EventNamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventNamePairContext eventNamePair(int i) {
			return GetRuleContext<EventNamePairContext>(i);
		}
		public EventRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventRelationContext eventRelation() {
		EventRelationContext _localctx = new EventRelationContext(Context, State);
		EnterRule(_localctx, 218, RULE_eventRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			Match(LPAREN);
			State = 1199;
			agentGroup();
			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1200;
				eventNamePair();
				}
				}
				State = 1203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 1205;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext[] eventName() {
			return GetRuleContexts<EventNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName(int i) {
			return GetRuleContext<EventNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public EventNamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventNamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventNamePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventNamePairContext eventNamePair() {
		EventNamePairContext _localctx = new EventNamePairContext(Context, State);
		EnterRule(_localctx, 220, RULE_eventNamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			Match(LPAREN);
			State = 1208;
			eventName();
			State = 1209;
			eventName();
			State = 1210;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeDesignDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESIGNATED() { return GetToken(EPDDLParser.DESIGNATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext[] eventName() {
			return GetRuleContexts<EventNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName(int i) {
			return GetRuleContext<EventNameContext>(i);
		}
		public ActionTypeDesignDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeDesignDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeDesignDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeDesignDefContext actionTypeDesignDef() {
		ActionTypeDesignDefContext _localctx = new ActionTypeDesignDefContext(Context, State);
		EnterRule(_localctx, 222, RULE_actionTypeDesignDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			Match(DESIGNATED);
			State = 1213;
			Match(LPAREN);
			State = 1217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 1214;
				eventName();
				}
				}
				State = 1219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1220;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KnowsWhetherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITY_NAME() { return GetToken(EPDDLParser.MODALITY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		public KnowsWhetherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_knowsWhether; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterKnowsWhether(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitKnowsWhether(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnowsWhether(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KnowsWhetherContext knowsWhether() {
		KnowsWhetherContext _localctx = new KnowsWhetherContext(Context, State);
		EnterRule(_localctx, 224, RULE_knowsWhether);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(LBRACKET);
			State = 1223;
			Match(MODALITY_NAME);
			State = 1224;
			agentName();
			State = 1225;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequirementKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIREMENT_NAME() { return GetToken(EPDDLParser.REQUIREMENT_NAME, 0); }
		public RequirementKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requirementKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterRequirementKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitRequirementKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequirementKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequirementKeyContext requirementKey() {
		RequirementKeyContext _localctx = new RequirementKeyContext(Context, State);
		EnterRule(_localctx, 226, RULE_requirementKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227;
			Match(REQUIREMENT_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,77,1230,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,1,0,1,0,1,0,3,0,232,8,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,5,1,241,8,1,10,1,12,1,244,9,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,5,2,255,8,2,10,2,12,2,258,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,5,3,269,8,3,10,3,12,3,272,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
		4,3,4,282,8,4,1,5,1,5,1,5,1,5,1,5,3,5,289,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,3,6,301,8,6,1,7,1,7,1,7,4,7,306,8,7,11,7,12,7,307,1,7,
		1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,4,10,325,8,
		10,11,10,12,10,326,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,337,8,
		11,10,11,12,11,340,9,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,4,13,353,8,13,11,13,12,13,354,1,13,1,13,1,14,1,14,1,14,5,14,362,
		8,14,10,14,12,14,365,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		1,16,4,16,377,8,16,11,16,12,16,378,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
		5,20,402,8,20,10,20,12,20,405,9,20,1,20,1,20,3,20,409,8,20,1,21,1,21,1,
		21,4,21,414,8,21,11,21,12,21,415,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,4,23,433,8,23,11,23,12,23,434,1,
		23,1,23,3,23,439,8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,447,8,24,1,25,
		1,25,1,25,1,25,1,25,4,25,454,8,25,11,25,12,25,455,1,25,1,25,3,25,460,8,
		25,1,26,1,26,1,26,1,26,4,26,466,8,26,11,26,12,26,467,1,26,1,26,1,27,1,
		27,1,27,1,28,1,28,1,28,3,28,478,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,5,30,488,8,30,10,30,12,30,491,9,30,1,30,1,30,1,31,1,31,1,31,5,31,
		498,8,31,10,31,12,31,501,9,31,1,31,1,31,1,32,1,32,1,32,5,32,508,8,32,10,
		32,12,32,511,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,3,33,527,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,546,8,34,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,4,38,576,8,38,
		11,38,12,38,577,1,38,1,38,1,39,1,39,1,39,1,39,4,39,586,8,39,11,39,12,39,
		587,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,3,41,601,8,
		41,1,42,1,42,1,42,1,42,5,42,607,8,42,10,42,12,42,610,9,42,1,42,1,42,1,
		42,3,42,615,8,42,1,43,1,43,1,43,1,44,1,44,5,44,622,8,44,10,44,12,44,625,
		9,44,1,44,3,44,628,8,44,1,45,5,45,631,8,45,10,45,12,45,634,9,45,1,45,1,
		45,5,45,638,8,45,10,45,12,45,641,9,45,1,45,1,45,1,45,1,45,3,45,647,8,45,
		1,46,5,46,650,8,46,10,46,12,46,653,9,46,1,46,1,46,5,46,657,8,46,10,46,
		12,46,660,9,46,1,46,1,46,1,46,1,46,3,46,666,8,46,1,47,5,47,669,8,47,10,
		47,12,47,672,9,47,1,47,1,47,5,47,676,8,47,10,47,12,47,679,9,47,1,47,1,
		47,1,47,1,47,3,47,685,8,47,1,48,1,48,3,48,689,8,48,1,49,1,49,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,703,8,50,10,50,12,50,706,
		9,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,714,8,50,10,50,12,50,717,9,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,3,50,749,8,50,1,51,1,51,1,51,1,51,5,51,755,8,51,10,51,12,51,
		758,9,51,1,51,1,51,1,51,3,51,763,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,
		52,771,8,52,1,53,1,53,1,53,5,53,776,8,53,10,53,12,53,779,9,53,1,53,1,53,
		1,53,1,53,1,53,1,53,1,53,1,53,3,53,789,8,53,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,4,54,800,8,54,11,54,12,54,801,1,54,1,54,1,54,1,54,1,
		54,4,54,809,8,54,11,54,12,54,810,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,5,54,839,8,54,10,54,12,54,842,9,54,1,54,1,54,3,
		54,846,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,3,56,856,8,56,1,57,
		1,57,3,57,860,8,57,1,58,1,58,3,58,864,8,58,1,59,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,3,59,876,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,3,60,888,8,60,1,61,1,61,3,61,892,8,61,1,62,1,62,1,62,3,
		62,897,8,62,1,63,1,63,5,63,901,8,63,10,63,12,63,904,9,63,1,64,1,64,1,65,
		1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,
		1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,5,75,931,8,75,10,75,12,75,934,
		9,75,1,75,1,75,1,76,1,76,3,76,940,8,76,1,77,1,77,1,77,4,77,945,8,77,11,
		77,12,77,946,1,77,1,77,1,78,1,78,1,78,1,79,4,79,955,8,79,11,79,12,79,956,
		1,79,1,79,1,79,3,79,962,8,79,1,80,1,80,1,80,4,80,967,8,80,11,80,12,80,
		968,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,83,4,83,982,8,
		83,11,83,12,83,983,1,83,1,83,1,83,3,83,989,8,83,1,84,1,84,1,84,1,84,5,
		84,995,8,84,10,84,12,84,998,9,84,1,84,1,84,1,84,1,85,1,85,1,85,4,85,1006,
		8,85,11,85,12,85,1007,1,85,1,85,1,86,1,86,1,86,1,86,5,86,1016,8,86,10,
		86,12,86,1019,9,86,1,86,1,86,3,86,1023,8,86,1,87,5,87,1026,8,87,10,87,
		12,87,1029,9,87,1,87,1,87,1,87,1,87,1,87,3,87,1036,8,87,1,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,3,88,1047,8,88,1,89,1,89,1,89,1,89,1,89,
		1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
		1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1077,8,89,1,90,1,90,
		1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,3,92,1090,8,92,1,93,1,93,
		3,93,1094,8,93,1,94,1,94,3,94,1098,8,94,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,4,95,1108,8,95,11,95,12,95,1109,1,95,1,95,1,96,1,96,1,96,3,96,
		1117,8,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
		1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,101,1,101,5,101,1141,8,101,
		10,101,12,101,1144,9,101,1,102,1,102,1,103,1,103,1,103,5,103,1151,8,103,
		10,103,12,103,1154,9,103,1,103,1,103,1,104,1,104,1,104,5,104,1161,8,104,
		10,104,12,104,1164,9,104,1,104,1,104,3,104,1168,8,104,1,105,1,105,4,105,
		1172,8,105,11,105,12,105,1173,1,106,1,106,1,106,5,106,1179,8,106,10,106,
		12,106,1182,9,106,1,106,1,106,1,107,1,107,1,107,1,108,4,108,1190,8,108,
		11,108,12,108,1191,1,108,1,108,1,108,3,108,1197,8,108,1,109,1,109,1,109,
		4,109,1202,8,109,11,109,12,109,1203,1,109,1,109,1,110,1,110,1,110,1,110,
		1,110,1,111,1,111,1,111,5,111,1216,8,111,10,111,12,111,1219,9,111,1,111,
		1,111,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,0,0,114,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,0,3,2,0,52,56,59,59,3,0,57,57,62,62,
		65,65,2,0,57,57,62,62,1249,0,231,1,0,0,0,2,233,1,0,0,0,4,247,1,0,0,0,6,
		261,1,0,0,0,8,281,1,0,0,0,10,288,1,0,0,0,12,300,1,0,0,0,14,302,1,0,0,0,
		16,311,1,0,0,0,18,316,1,0,0,0,20,321,1,0,0,0,22,330,1,0,0,0,24,344,1,0,
		0,0,26,349,1,0,0,0,28,358,1,0,0,0,30,368,1,0,0,0,32,373,1,0,0,0,34,382,
		1,0,0,0,36,387,1,0,0,0,38,396,1,0,0,0,40,408,1,0,0,0,42,410,1,0,0,0,44,
		419,1,0,0,0,46,438,1,0,0,0,48,446,1,0,0,0,50,459,1,0,0,0,52,461,1,0,0,
		0,54,471,1,0,0,0,56,477,1,0,0,0,58,479,1,0,0,0,60,484,1,0,0,0,62,494,1,
		0,0,0,64,504,1,0,0,0,66,526,1,0,0,0,68,545,1,0,0,0,70,547,1,0,0,0,72,557,
		1,0,0,0,74,566,1,0,0,0,76,572,1,0,0,0,78,581,1,0,0,0,80,592,1,0,0,0,82,
		600,1,0,0,0,84,614,1,0,0,0,86,616,1,0,0,0,88,627,1,0,0,0,90,646,1,0,0,
		0,92,665,1,0,0,0,94,684,1,0,0,0,96,688,1,0,0,0,98,690,1,0,0,0,100,748,
		1,0,0,0,102,762,1,0,0,0,104,770,1,0,0,0,106,788,1,0,0,0,108,845,1,0,0,
		0,110,847,1,0,0,0,112,855,1,0,0,0,114,859,1,0,0,0,116,863,1,0,0,0,118,
		875,1,0,0,0,120,887,1,0,0,0,122,891,1,0,0,0,124,896,1,0,0,0,126,898,1,
		0,0,0,128,905,1,0,0,0,130,907,1,0,0,0,132,909,1,0,0,0,134,911,1,0,0,0,
		136,913,1,0,0,0,138,915,1,0,0,0,140,917,1,0,0,0,142,919,1,0,0,0,144,921,
		1,0,0,0,146,923,1,0,0,0,148,925,1,0,0,0,150,927,1,0,0,0,152,939,1,0,0,
		0,154,941,1,0,0,0,156,950,1,0,0,0,158,961,1,0,0,0,160,963,1,0,0,0,162,
		972,1,0,0,0,164,977,1,0,0,0,166,988,1,0,0,0,168,990,1,0,0,0,170,1002,1,
		0,0,0,172,1022,1,0,0,0,174,1035,1,0,0,0,176,1046,1,0,0,0,178,1076,1,0,
		0,0,180,1078,1,0,0,0,182,1080,1,0,0,0,184,1089,1,0,0,0,186,1093,1,0,0,
		0,188,1097,1,0,0,0,190,1099,1,0,0,0,192,1116,1,0,0,0,194,1118,1,0,0,0,
		196,1123,1,0,0,0,198,1130,1,0,0,0,200,1136,1,0,0,0,202,1138,1,0,0,0,204,
		1145,1,0,0,0,206,1147,1,0,0,0,208,1167,1,0,0,0,210,1169,1,0,0,0,212,1175,
		1,0,0,0,214,1185,1,0,0,0,216,1196,1,0,0,0,218,1198,1,0,0,0,220,1207,1,
		0,0,0,222,1212,1,0,0,0,224,1222,1,0,0,0,226,1227,1,0,0,0,228,232,3,2,1,
		0,229,232,3,4,2,0,230,232,3,6,3,0,231,228,1,0,0,0,231,229,1,0,0,0,231,
		230,1,0,0,0,232,1,1,0,0,0,233,234,5,70,0,0,234,235,5,48,0,0,235,236,5,
		70,0,0,236,237,5,49,0,0,237,238,3,132,66,0,238,242,5,71,0,0,239,241,3,
		8,4,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,
		243,245,1,0,0,0,244,242,1,0,0,0,245,246,5,71,0,0,246,3,1,0,0,0,247,248,
		5,70,0,0,248,249,5,48,0,0,249,250,5,70,0,0,250,251,5,50,0,0,251,252,3,
		136,68,0,252,256,5,71,0,0,253,255,3,10,5,0,254,253,1,0,0,0,255,258,1,0,
		0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,
		260,5,71,0,0,260,5,1,0,0,0,261,262,5,70,0,0,262,263,5,48,0,0,263,264,5,
		70,0,0,264,265,5,51,0,0,265,266,3,134,67,0,266,270,5,71,0,0,267,269,3,
		12,6,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,
		271,273,1,0,0,0,272,270,1,0,0,0,273,274,5,71,0,0,274,7,1,0,0,0,275,282,
		3,14,7,0,276,282,3,28,14,0,277,282,3,30,15,0,278,282,3,32,16,0,279,282,
		3,60,30,0,280,282,3,36,18,0,281,275,1,0,0,0,281,276,1,0,0,0,281,277,1,
		0,0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,9,1,0,0,0,283,
		289,3,28,14,0,284,289,3,60,30,0,285,289,3,62,31,0,286,289,3,70,35,0,287,
		289,3,44,22,0,288,283,1,0,0,0,288,284,1,0,0,0,288,285,1,0,0,0,288,286,
		1,0,0,0,288,287,1,0,0,0,289,11,1,0,0,0,290,301,3,16,8,0,291,301,3,28,14,
		0,292,301,3,60,30,0,293,301,3,18,9,0,294,301,3,20,10,0,295,301,3,24,12,
		0,296,301,3,26,13,0,297,301,3,74,37,0,298,301,3,72,36,0,299,301,3,80,40,
		0,300,290,1,0,0,0,300,291,1,0,0,0,300,292,1,0,0,0,300,293,1,0,0,0,300,
		294,1,0,0,0,300,295,1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,1,
		0,0,0,300,299,1,0,0,0,301,13,1,0,0,0,302,303,5,70,0,0,303,305,5,19,0,0,
		304,306,3,136,68,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,
		308,1,0,0,0,308,309,1,0,0,0,309,310,5,71,0,0,310,15,1,0,0,0,311,312,5,
		70,0,0,312,313,5,31,0,0,313,314,3,132,66,0,314,315,5,71,0,0,315,17,1,0,
		0,0,316,317,5,70,0,0,317,318,5,24,0,0,318,319,3,94,47,0,319,320,5,71,0,
		0,320,19,1,0,0,0,321,322,5,70,0,0,322,324,5,25,0,0,323,325,3,22,11,0,324,
		323,1,0,0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,328,1,
		0,0,0,328,329,5,71,0,0,329,21,1,0,0,0,330,331,5,70,0,0,331,332,3,204,102,
		0,332,333,5,41,0,0,333,334,5,70,0,0,334,338,3,146,73,0,335,337,3,146,73,
		0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
		341,1,0,0,0,340,338,1,0,0,0,341,342,5,71,0,0,342,343,5,71,0,0,343,23,1,
		0,0,0,344,345,5,70,0,0,345,346,5,22,0,0,346,347,3,90,45,0,347,348,5,71,
		0,0,348,25,1,0,0,0,349,350,5,70,0,0,350,352,5,23,0,0,351,353,3,150,75,
		0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,
		356,1,0,0,0,356,357,5,71,0,0,357,27,1,0,0,0,358,359,5,70,0,0,359,363,5,
		20,0,0,360,362,3,226,113,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,
		0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,367,5,71,0,0,367,
		29,1,0,0,0,368,369,5,70,0,0,369,370,5,21,0,0,370,371,3,90,45,0,371,372,
		5,71,0,0,372,31,1,0,0,0,373,374,5,70,0,0,374,376,5,14,0,0,375,377,3,34,
		17,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,
		380,1,0,0,0,380,381,5,71,0,0,381,33,1,0,0,0,382,383,5,70,0,0,383,384,3,
		130,65,0,384,385,3,92,46,0,385,386,5,71,0,0,386,35,1,0,0,0,387,388,5,70,
		0,0,388,389,5,16,0,0,389,390,3,142,71,0,390,391,3,58,29,0,391,392,3,38,
		19,0,392,393,3,42,21,0,393,394,3,50,25,0,394,395,5,71,0,0,395,37,1,0,0,
		0,396,397,5,6,0,0,397,398,3,40,20,0,398,39,1,0,0,0,399,403,5,70,0,0,400,
		402,3,146,73,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,
		1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,409,5,71,0,0,407,409,5,57,
		0,0,408,399,1,0,0,0,408,407,1,0,0,0,409,41,1,0,0,0,410,411,5,2,0,0,411,
		413,5,70,0,0,412,414,3,44,22,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,
		1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,71,0,0,418,43,1,0,0,
		0,419,420,5,70,0,0,420,421,5,61,0,0,421,422,5,3,0,0,422,423,3,186,93,0,
		423,424,1,0,0,0,424,425,5,4,0,0,425,426,3,46,23,0,426,427,1,0,0,0,427,
		428,5,71,0,0,428,45,1,0,0,0,429,439,5,60,0,0,430,432,5,70,0,0,431,433,
		3,48,24,0,432,431,1,0,0,0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,1,0,
		0,0,435,436,1,0,0,0,436,437,5,71,0,0,437,439,1,0,0,0,438,429,1,0,0,0,438,
		430,1,0,0,0,439,47,1,0,0,0,440,447,3,206,103,0,441,442,5,70,0,0,442,443,
		5,36,0,0,443,444,3,206,103,0,444,445,5,71,0,0,445,447,1,0,0,0,446,440,
		1,0,0,0,446,441,1,0,0,0,447,49,1,0,0,0,448,449,5,5,0,0,449,460,5,60,0,
		0,450,451,5,5,0,0,451,453,5,70,0,0,452,454,3,52,26,0,453,452,1,0,0,0,454,
		455,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,5,
		71,0,0,458,460,1,0,0,0,459,448,1,0,0,0,459,450,1,0,0,0,460,51,1,0,0,0,
		461,462,5,70,0,0,462,463,5,61,0,0,463,465,5,61,0,0,464,466,3,146,73,0,
		465,464,1,0,0,0,466,467,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,469,
		1,0,0,0,469,470,5,71,0,0,470,53,1,0,0,0,471,472,5,3,0,0,472,473,3,186,
		93,0,473,55,1,0,0,0,474,475,5,7,0,0,475,478,3,64,32,0,476,478,1,0,0,0,
		477,474,1,0,0,0,477,476,1,0,0,0,478,57,1,0,0,0,479,480,5,17,0,0,480,481,
		5,70,0,0,481,482,3,92,46,0,482,483,5,71,0,0,483,59,1,0,0,0,484,485,5,70,
		0,0,485,489,5,15,0,0,486,488,3,148,74,0,487,486,1,0,0,0,488,491,1,0,0,
		0,489,487,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,489,1,0,0,0,492,
		493,5,71,0,0,493,61,1,0,0,0,494,495,5,70,0,0,495,499,5,18,0,0,496,498,
		3,202,101,0,497,496,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,
		0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,5,71,0,0,503,63,1,0,0,0,
		504,505,5,70,0,0,505,509,5,32,0,0,506,508,3,66,33,0,507,506,1,0,0,0,508,
		511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,509,1,
		0,0,0,512,513,5,71,0,0,513,65,1,0,0,0,514,527,3,68,34,0,515,516,5,70,0,
		0,516,517,5,38,0,0,517,518,5,70,0,0,518,519,3,92,46,0,519,520,5,71,0,0,
		520,521,3,68,34,0,521,522,5,71,0,0,522,527,1,0,0,0,523,524,5,70,0,0,524,
		525,5,65,0,0,525,527,5,71,0,0,526,514,1,0,0,0,526,515,1,0,0,0,526,523,
		1,0,0,0,527,67,1,0,0,0,528,529,5,70,0,0,529,530,5,43,0,0,530,531,3,186,
		93,0,531,532,3,48,24,0,532,533,5,71,0,0,533,546,1,0,0,0,534,535,5,70,0,
		0,535,536,5,44,0,0,536,537,3,186,93,0,537,538,3,48,24,0,538,539,5,71,0,
		0,539,546,1,0,0,0,540,541,5,70,0,0,541,542,5,45,0,0,542,543,3,48,24,0,
		543,544,5,71,0,0,544,546,1,0,0,0,545,528,1,0,0,0,545,534,1,0,0,0,545,540,
		1,0,0,0,546,69,1,0,0,0,547,548,5,70,0,0,548,549,5,29,0,0,549,550,3,180,
		90,0,550,551,3,58,29,0,551,552,3,208,104,0,552,553,3,210,105,0,553,554,
		3,214,107,0,554,555,3,222,111,0,555,556,5,71,0,0,556,71,1,0,0,0,557,558,
		5,70,0,0,558,559,5,8,0,0,559,560,3,138,69,0,560,561,3,154,77,0,561,562,
		3,156,78,0,562,563,3,164,82,0,563,564,3,170,85,0,564,565,5,71,0,0,565,
		73,1,0,0,0,566,567,5,70,0,0,567,568,5,9,0,0,568,569,3,76,38,0,569,570,
		3,50,25,0,570,571,5,71,0,0,571,75,1,0,0,0,572,573,5,30,0,0,573,575,5,70,
		0,0,574,576,3,78,39,0,575,574,1,0,0,0,576,577,1,0,0,0,577,575,1,0,0,0,
		577,578,1,0,0,0,578,579,1,0,0,0,579,580,5,71,0,0,580,77,1,0,0,0,581,582,
		5,70,0,0,582,583,3,140,70,0,583,585,5,70,0,0,584,586,3,206,103,0,585,584,
		1,0,0,0,586,587,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,
		0,589,590,5,71,0,0,590,591,5,71,0,0,591,79,1,0,0,0,592,593,5,70,0,0,593,
		594,5,10,0,0,594,595,3,100,50,0,595,596,5,71,0,0,596,81,1,0,0,0,597,598,
		5,11,0,0,598,601,3,102,51,0,599,601,1,0,0,0,600,597,1,0,0,0,600,599,1,
		0,0,0,601,83,1,0,0,0,602,603,5,29,0,0,603,604,5,70,0,0,604,608,3,180,90,
		0,605,607,3,182,91,0,606,605,1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,
		609,1,0,0,0,609,611,1,0,0,0,610,608,1,0,0,0,611,612,5,71,0,0,612,615,1,
		0,0,0,613,615,1,0,0,0,614,602,1,0,0,0,614,613,1,0,0,0,615,85,1,0,0,0,616,
		617,5,3,0,0,617,618,3,186,93,0,618,87,1,0,0,0,619,623,5,28,0,0,620,622,
		3,188,94,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,
		0,0,624,628,1,0,0,0,625,623,1,0,0,0,626,628,1,0,0,0,627,619,1,0,0,0,627,
		626,1,0,0,0,628,89,1,0,0,0,629,631,5,61,0,0,630,629,1,0,0,0,631,634,1,
		0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,647,1,0,0,0,634,632,1,0,0,0,
		635,639,5,61,0,0,636,638,5,61,0,0,637,636,1,0,0,0,638,641,1,0,0,0,639,
		637,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,639,1,0,0,0,642,643,5,
		69,0,0,643,644,3,96,48,0,644,645,3,90,45,0,645,647,1,0,0,0,646,632,1,0,
		0,0,646,635,1,0,0,0,647,91,1,0,0,0,648,650,5,65,0,0,649,648,1,0,0,0,650,
		653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,666,1,0,0,0,653,651,1,
		0,0,0,654,658,5,65,0,0,655,657,5,65,0,0,656,655,1,0,0,0,657,660,1,0,0,
		0,658,656,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,658,1,0,0,0,661,
		662,5,69,0,0,662,663,3,96,48,0,663,664,3,92,46,0,664,666,1,0,0,0,665,651,
		1,0,0,0,665,654,1,0,0,0,666,93,1,0,0,0,667,669,5,62,0,0,668,667,1,0,0,
		0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,685,1,0,0,0,672,
		670,1,0,0,0,673,677,5,62,0,0,674,676,5,62,0,0,675,674,1,0,0,0,676,679,
		1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,
		0,680,681,5,69,0,0,681,682,3,96,48,0,682,683,3,94,47,0,683,685,1,0,0,0,
		684,670,1,0,0,0,684,673,1,0,0,0,685,95,1,0,0,0,686,689,3,98,49,0,687,689,
		5,61,0,0,688,686,1,0,0,0,688,687,1,0,0,0,689,97,1,0,0,0,690,691,7,0,0,
		0,691,99,1,0,0,0,692,693,5,70,0,0,693,694,5,33,0,0,694,695,3,100,50,0,
		695,696,3,100,50,0,696,697,5,71,0,0,697,749,1,0,0,0,698,699,5,70,0,0,699,
		700,5,34,0,0,700,704,3,100,50,0,701,703,3,100,50,0,702,701,1,0,0,0,703,
		706,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,704,1,
		0,0,0,707,708,5,71,0,0,708,749,1,0,0,0,709,710,5,70,0,0,710,711,5,35,0,
		0,711,715,3,100,50,0,712,714,3,100,50,0,713,712,1,0,0,0,714,717,1,0,0,
		0,715,713,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,715,1,0,0,0,718,
		719,5,71,0,0,719,749,1,0,0,0,720,721,5,70,0,0,721,722,5,36,0,0,722,723,
		3,100,50,0,723,724,5,71,0,0,724,749,1,0,0,0,725,726,5,70,0,0,726,727,5,
		37,0,0,727,728,5,70,0,0,728,729,3,92,46,0,729,730,5,71,0,0,730,731,3,100,
		50,0,731,732,5,71,0,0,732,749,1,0,0,0,733,734,5,70,0,0,734,735,5,38,0,
		0,735,736,5,70,0,0,736,737,3,92,46,0,737,738,5,71,0,0,738,739,3,100,50,
		0,739,740,5,71,0,0,740,749,1,0,0,0,741,742,3,116,58,0,742,743,3,100,50,
		0,743,749,1,0,0,0,744,749,3,108,54,0,745,749,3,110,55,0,746,749,5,39,0,
		0,747,749,5,40,0,0,748,692,1,0,0,0,748,698,1,0,0,0,748,709,1,0,0,0,748,
		720,1,0,0,0,748,725,1,0,0,0,748,733,1,0,0,0,748,741,1,0,0,0,748,744,1,
		0,0,0,748,745,1,0,0,0,748,746,1,0,0,0,748,747,1,0,0,0,749,101,1,0,0,0,
		750,751,5,70,0,0,751,752,5,35,0,0,752,756,3,104,52,0,753,755,3,104,52,
		0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,
		759,1,0,0,0,758,756,1,0,0,0,759,760,5,71,0,0,760,763,1,0,0,0,761,763,3,
		104,52,0,762,750,1,0,0,0,762,761,1,0,0,0,763,103,1,0,0,0,764,771,3,106,
		53,0,765,766,5,70,0,0,766,767,5,36,0,0,767,768,3,106,53,0,768,769,5,71,
		0,0,769,771,1,0,0,0,770,764,1,0,0,0,770,765,1,0,0,0,771,105,1,0,0,0,772,
		773,5,70,0,0,773,777,3,130,65,0,774,776,3,112,56,0,775,774,1,0,0,0,776,
		779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,
		0,0,0,780,781,5,71,0,0,781,789,1,0,0,0,782,783,5,70,0,0,783,784,5,41,0,
		0,784,785,3,112,56,0,785,786,3,112,56,0,786,787,5,71,0,0,787,789,1,0,0,
		0,788,772,1,0,0,0,788,782,1,0,0,0,789,107,1,0,0,0,790,791,5,70,0,0,791,
		792,5,33,0,0,792,793,3,108,54,0,793,794,3,108,54,0,794,795,5,71,0,0,795,
		846,1,0,0,0,796,797,5,70,0,0,797,799,5,34,0,0,798,800,3,108,54,0,799,798,
		1,0,0,0,800,801,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,
		0,803,804,5,71,0,0,804,846,1,0,0,0,805,806,5,70,0,0,806,808,5,35,0,0,807,
		809,3,108,54,0,808,807,1,0,0,0,809,810,1,0,0,0,810,808,1,0,0,0,810,811,
		1,0,0,0,811,812,1,0,0,0,812,813,5,71,0,0,813,846,1,0,0,0,814,815,5,70,
		0,0,815,816,5,36,0,0,816,817,3,108,54,0,817,818,5,71,0,0,818,846,1,0,0,
		0,819,820,5,70,0,0,820,821,5,37,0,0,821,822,5,70,0,0,822,823,3,92,46,0,
		823,824,5,71,0,0,824,825,3,108,54,0,825,826,5,71,0,0,826,846,1,0,0,0,827,
		828,5,70,0,0,828,829,5,38,0,0,829,830,5,70,0,0,830,831,3,92,46,0,831,832,
		5,71,0,0,832,833,3,108,54,0,833,834,5,71,0,0,834,846,1,0,0,0,835,836,5,
		70,0,0,836,840,3,130,65,0,837,839,3,112,56,0,838,837,1,0,0,0,839,842,1,
		0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,840,1,0,0,0,
		843,844,5,71,0,0,844,846,1,0,0,0,845,790,1,0,0,0,845,796,1,0,0,0,845,805,
		1,0,0,0,845,814,1,0,0,0,845,819,1,0,0,0,845,827,1,0,0,0,845,835,1,0,0,
		0,846,109,1,0,0,0,847,848,5,70,0,0,848,849,5,41,0,0,849,850,3,112,56,0,
		850,851,3,112,56,0,851,852,5,71,0,0,852,111,1,0,0,0,853,856,3,114,57,0,
		854,856,5,65,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,113,1,0,0,0,857,860,
		5,61,0,0,858,860,3,146,73,0,859,857,1,0,0,0,859,858,1,0,0,0,860,115,1,
		0,0,0,861,864,3,118,59,0,862,864,3,120,60,0,863,861,1,0,0,0,863,862,1,
		0,0,0,864,117,1,0,0,0,865,866,5,72,0,0,866,867,3,122,61,0,867,868,3,124,
		62,0,868,869,5,73,0,0,869,876,1,0,0,0,870,871,5,76,0,0,871,872,3,122,61,
		0,872,873,3,124,62,0,873,874,5,77,0,0,874,876,1,0,0,0,875,865,1,0,0,0,
		875,870,1,0,0,0,876,119,1,0,0,0,877,878,5,72,0,0,878,879,3,122,61,0,879,
		880,3,126,63,0,880,881,5,73,0,0,881,888,1,0,0,0,882,883,5,76,0,0,883,884,
		3,122,61,0,884,885,3,126,63,0,885,886,5,77,0,0,886,888,1,0,0,0,887,877,
		1,0,0,0,887,882,1,0,0,0,888,121,1,0,0,0,889,892,3,148,74,0,890,892,1,0,
		0,0,891,889,1,0,0,0,891,890,1,0,0,0,892,123,1,0,0,0,893,897,3,146,73,0,
		894,897,5,65,0,0,895,897,3,128,64,0,896,893,1,0,0,0,896,894,1,0,0,0,896,
		895,1,0,0,0,897,125,1,0,0,0,898,902,3,124,62,0,899,901,3,124,62,0,900,
		899,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,127,1,
		0,0,0,904,902,1,0,0,0,905,906,5,57,0,0,906,129,1,0,0,0,907,908,5,61,0,
		0,908,131,1,0,0,0,909,910,5,61,0,0,910,133,1,0,0,0,911,912,5,61,0,0,912,
		135,1,0,0,0,913,914,5,61,0,0,914,137,1,0,0,0,915,916,5,61,0,0,916,139,
		1,0,0,0,917,918,5,61,0,0,918,141,1,0,0,0,919,920,5,61,0,0,920,143,1,0,
		0,0,921,922,5,61,0,0,922,145,1,0,0,0,923,924,5,62,0,0,924,147,1,0,0,0,
		925,926,5,63,0,0,926,149,1,0,0,0,927,928,5,70,0,0,928,932,3,130,65,0,929,
		931,3,152,76,0,930,929,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,
		1,0,0,0,933,935,1,0,0,0,934,932,1,0,0,0,935,936,5,71,0,0,936,151,1,0,0,
		0,937,940,5,61,0,0,938,940,3,146,73,0,939,937,1,0,0,0,939,938,1,0,0,0,
		940,153,1,0,0,0,941,942,5,30,0,0,942,944,5,70,0,0,943,945,3,140,70,0,944,
		943,1,0,0,0,945,946,1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,948,1,
		0,0,0,948,949,5,71,0,0,949,155,1,0,0,0,950,951,5,12,0,0,951,952,3,158,
		79,0,952,157,1,0,0,0,953,955,3,160,80,0,954,953,1,0,0,0,955,956,1,0,0,
		0,956,954,1,0,0,0,956,957,1,0,0,0,957,962,1,0,0,0,958,959,5,70,0,0,959,
		960,5,60,0,0,960,962,5,71,0,0,961,954,1,0,0,0,961,958,1,0,0,0,962,159,
		1,0,0,0,963,964,5,70,0,0,964,966,3,172,86,0,965,967,3,162,81,0,966,965,
		1,0,0,0,967,968,1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,
		0,970,971,5,71,0,0,971,161,1,0,0,0,972,973,5,70,0,0,973,974,3,140,70,0,
		974,975,3,140,70,0,975,976,5,71,0,0,976,163,1,0,0,0,977,978,5,26,0,0,978,
		979,3,166,83,0,979,165,1,0,0,0,980,982,3,168,84,0,981,980,1,0,0,0,982,
		983,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,989,1,0,0,0,985,986,5,
		70,0,0,986,987,5,60,0,0,987,989,5,71,0,0,988,981,1,0,0,0,988,985,1,0,0,
		0,989,167,1,0,0,0,990,991,5,70,0,0,991,992,3,140,70,0,992,996,5,72,0,0,
		993,995,3,48,24,0,994,993,1,0,0,0,995,998,1,0,0,0,996,994,1,0,0,0,996,
		997,1,0,0,0,997,999,1,0,0,0,998,996,1,0,0,0,999,1000,5,73,0,0,1000,1001,
		5,71,0,0,1001,169,1,0,0,0,1002,1003,5,13,0,0,1003,1005,5,70,0,0,1004,1006,
		3,140,70,0,1005,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1005,1,0,0,0,1007,
		1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,5,71,0,0,1010,171,1,0,0,0,1011,
		1023,3,204,102,0,1012,1013,5,74,0,0,1013,1017,3,146,73,0,1014,1016,3,146,
		73,0,1015,1014,1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,
		0,0,0,1018,1020,1,0,0,0,1019,1017,1,0,0,0,1020,1021,5,75,0,0,1021,1023,
		1,0,0,0,1022,1011,1,0,0,0,1022,1012,1,0,0,0,1023,173,1,0,0,0,1024,1026,
		3,176,88,0,1025,1024,1,0,0,0,1026,1029,1,0,0,0,1027,1025,1,0,0,0,1027,
		1028,1,0,0,0,1028,1036,1,0,0,0,1029,1027,1,0,0,0,1030,1031,5,70,0,0,1031,
		1032,5,27,0,0,1032,1033,3,138,69,0,1033,1034,5,71,0,0,1034,1036,1,0,0,
		0,1035,1027,1,0,0,0,1035,1030,1,0,0,0,1036,175,1,0,0,0,1037,1047,3,178,
		89,0,1038,1039,5,70,0,0,1039,1040,5,38,0,0,1040,1041,5,70,0,0,1041,1042,
		3,92,46,0,1042,1043,5,71,0,0,1043,1044,3,178,89,0,1044,1045,5,71,0,0,1045,
		1047,1,0,0,0,1046,1037,1,0,0,0,1046,1038,1,0,0,0,1047,177,1,0,0,0,1048,
		1077,3,108,54,0,1049,1050,5,72,0,0,1050,1051,5,57,0,0,1051,1052,5,73,0,
		0,1052,1077,3,108,54,0,1053,1054,5,72,0,0,1054,1055,5,57,0,0,1055,1056,
		5,73,0,0,1056,1057,5,72,0,0,1057,1058,3,146,73,0,1058,1059,5,73,0,0,1059,
		1060,3,108,54,0,1060,1077,1,0,0,0,1061,1062,5,72,0,0,1062,1063,5,57,0,
		0,1063,1064,5,73,0,0,1064,1065,3,224,112,0,1065,1066,3,108,54,0,1066,1077,
		1,0,0,0,1067,1068,5,72,0,0,1068,1069,5,57,0,0,1069,1070,5,73,0,0,1070,
		1071,5,70,0,0,1071,1072,5,36,0,0,1072,1073,3,224,112,0,1073,1074,3,108,
		54,0,1074,1075,5,71,0,0,1075,1077,1,0,0,0,1076,1048,1,0,0,0,1076,1049,
		1,0,0,0,1076,1053,1,0,0,0,1076,1061,1,0,0,0,1076,1067,1,0,0,0,1077,179,
		1,0,0,0,1078,1079,5,61,0,0,1079,181,1,0,0,0,1080,1081,5,70,0,0,1081,1082,
		5,65,0,0,1082,1083,5,41,0,0,1083,1084,3,184,92,0,1084,1085,5,71,0,0,1085,
		183,1,0,0,0,1086,1090,3,112,56,0,1087,1090,3,100,50,0,1088,1090,3,64,32,
		0,1089,1086,1,0,0,0,1089,1087,1,0,0,0,1089,1088,1,0,0,0,1090,185,1,0,0,
		0,1091,1094,5,60,0,0,1092,1094,3,100,50,0,1093,1091,1,0,0,0,1093,1092,
		1,0,0,0,1094,187,1,0,0,0,1095,1098,3,190,95,0,1096,1098,3,192,96,0,1097,
		1095,1,0,0,0,1097,1096,1,0,0,0,1098,189,1,0,0,0,1099,1100,5,70,0,0,1100,
		1101,5,38,0,0,1101,1102,5,70,0,0,1102,1103,5,65,0,0,1103,1104,5,69,0,0,
		1104,1105,3,96,48,0,1105,1107,5,71,0,0,1106,1108,3,192,96,0,1107,1106,
		1,0,0,0,1108,1109,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1111,
		1,0,0,0,1111,1112,5,71,0,0,1112,191,1,0,0,0,1113,1117,3,194,97,0,1114,
		1117,3,196,98,0,1115,1117,3,198,99,0,1116,1113,1,0,0,0,1116,1114,1,0,0,
		0,1116,1115,1,0,0,0,1117,193,1,0,0,0,1118,1119,5,70,0,0,1119,1120,3,200,
		100,0,1120,1121,3,202,101,0,1121,1122,5,71,0,0,1122,195,1,0,0,0,1123,1124,
		5,70,0,0,1124,1125,5,46,0,0,1125,1126,3,100,50,0,1126,1127,3,200,100,0,
		1127,1128,3,202,101,0,1128,1129,5,71,0,0,1129,197,1,0,0,0,1130,1131,5,
		70,0,0,1131,1132,5,47,0,0,1132,1133,3,200,100,0,1133,1134,3,202,101,0,
		1134,1135,5,71,0,0,1135,199,1,0,0,0,1136,1137,7,1,0,0,1137,201,1,0,0,0,
		1138,1142,3,200,100,0,1139,1141,3,200,100,0,1140,1139,1,0,0,0,1141,1144,
		1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,203,1,0,0,0,1144,1142,
		1,0,0,0,1145,1146,7,2,0,0,1146,205,1,0,0,0,1147,1148,5,70,0,0,1148,1152,
		3,130,65,0,1149,1151,3,112,56,0,1150,1149,1,0,0,0,1151,1154,1,0,0,0,1152,
		1150,1,0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,1152,1,0,0,0,1155,
		1156,5,71,0,0,1156,207,1,0,0,0,1157,1158,5,18,0,0,1158,1162,5,70,0,0,1159,
		1161,3,202,101,0,1160,1159,1,0,0,0,1161,1164,1,0,0,0,1162,1160,1,0,0,0,
		1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1162,1,0,0,0,1165,1168,5,71,0,
		0,1166,1168,1,0,0,0,1167,1157,1,0,0,0,1167,1166,1,0,0,0,1168,209,1,0,0,
		0,1169,1171,5,1,0,0,1170,1172,3,212,106,0,1171,1170,1,0,0,0,1172,1173,
		1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,211,1,0,0,0,1175,1176,
		5,70,0,0,1176,1180,3,144,72,0,1177,1179,3,182,91,0,1178,1177,1,0,0,0,1179,
		1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,0,0,1182,
		1180,1,0,0,0,1183,1184,5,71,0,0,1184,213,1,0,0,0,1185,1186,5,12,0,0,1186,
		1187,3,216,108,0,1187,215,1,0,0,0,1188,1190,3,218,109,0,1189,1188,1,0,
		0,0,1190,1191,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,1197,1,
		0,0,0,1193,1194,5,70,0,0,1194,1195,5,60,0,0,1195,1197,5,71,0,0,1196,1189,
		1,0,0,0,1196,1193,1,0,0,0,1197,217,1,0,0,0,1198,1199,5,70,0,0,1199,1201,
		3,172,86,0,1200,1202,3,220,110,0,1201,1200,1,0,0,0,1202,1203,1,0,0,0,1203,
		1201,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,5,71,0,0,1206,
		219,1,0,0,0,1207,1208,5,70,0,0,1208,1209,3,144,72,0,1209,1210,3,144,72,
		0,1210,1211,5,71,0,0,1211,221,1,0,0,0,1212,1213,5,13,0,0,1213,1217,5,70,
		0,0,1214,1216,3,144,72,0,1215,1214,1,0,0,0,1216,1219,1,0,0,0,1217,1215,
		1,0,0,0,1217,1218,1,0,0,0,1218,1220,1,0,0,0,1219,1217,1,0,0,0,1220,1221,
		5,71,0,0,1221,223,1,0,0,0,1222,1223,5,72,0,0,1223,1224,5,63,0,0,1224,1225,
		3,146,73,0,1225,1226,5,73,0,0,1226,225,1,0,0,0,1227,1228,5,64,0,0,1228,
		227,1,0,0,0,96,231,242,256,270,281,288,300,307,326,338,354,363,378,403,
		408,415,434,438,446,455,459,467,477,489,499,509,526,545,577,587,600,608,
		614,623,627,632,639,646,651,658,665,670,677,684,688,704,715,748,756,762,
		770,777,788,801,810,840,845,855,859,863,875,887,891,896,902,932,939,946,
		956,961,968,983,988,996,1007,1017,1022,1027,1035,1046,1076,1089,1093,1097,
		1109,1116,1142,1152,1162,1167,1173,1180,1191,1196,1203,1217
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
