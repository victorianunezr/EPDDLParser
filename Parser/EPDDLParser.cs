//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EPDDLParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EPDDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EVENT=1, PRECONDITION=2, POSTCONDITIONS=3, STATE=4, INIT=5, GOAL=6, WHERE=7, 
		RELATIONS=8, DESIGNATED=9, PREDICATES=10, MODALITY=11, ACTION=12, PARAMETERS=13, 
		OBSERVABILITY_GROUPS=14, ACTION_TYPE_LIBRARIES=15, REQUIREMENTS=16, TYPES=17, 
		OBJECTS=18, STATIC=19, AGENTS=20, AGENT_GROUPS=21, VALUATION=22, STATE_NAME=23, 
		OBSERVABILITY_CONDITIONS=24, ACTION_TYPE=25, WORLDS=26, DEL=27, TYPING=28, 
		EQUALITY=29, CDOMAIN=30, EXISTENTIAL_FORMULAE=31, MULTI_AGENT=32, ONTIC_ACTIONS=33, 
		UNIVERSAL_FORMULAE=34, UNIVERSAL_POSTCONDITIONS=35, MODAL_PRECONDITIONS=36, 
		MODAL_POSTCONDITIONS=37, MODALITIES=38, ONTIC_CHANGE=39, COMMON_KNOWLEDGE=40, 
		DYNAMIC_COMMON_KNOWLEDGE=41, FINITARY_S5_THEORY=42, MAX_PRECONDITIONS_DEPTH=43, 
		MAX_POSTCONDITIONS_DEPTH=44, MAX_MODAL_DEPTH=45, FINITARY_THEORY=46, COLON=47, 
		IMPLY=48, OR=49, AND=50, NOT=51, EXISTS=52, FORALL=53, TRUE=54, FALSE=55, 
		ASSIGN=56, KW=57, IFF=58, WHEN=59, ALWAYS=60, IF=61, OTHERWISE=62, DEFINE=63, 
		DOMAIN=64, LIBRARY=65, PROBLEM=66, PREDICATE=67, PREDICATE_FORMULA=68, 
		FORMULA=69, POSTCONDITION=70, LITERAL=71, ALL=72, WORLD=73, AGENT=74, 
		TRIVIAL_DEF=75, NAME=76, AGENT_NAME=77, MODALITY_NAME=78, VARIABLE=79, 
		INT=80, WS=81, COMMENT=82, DASH=83, LPAREN=84, RPAREN=85, LBRACKET=86, 
		RBRACKET=87, LBRACE=88, RBRACE=89, LT=90, GT=91;
	public const int
		RULE_mainDef = 0, RULE_domainDef = 1, RULE_libraryDef = 2, RULE_problemDef = 3, 
		RULE_domainItemDef = 4, RULE_libraryItemDef = 5, RULE_problemItemDef = 6, 
		RULE_domainLibrariesNameDef = 7, RULE_problemDomainNameDef = 8, RULE_agentNamesDef = 9, 
		RULE_agentGroupsListDef = 10, RULE_agentGroupDef = 11, RULE_objectNamesDef = 12, 
		RULE_staticPredListDef = 13, RULE_requireDef = 14, RULE_typesDef = 15, 
		RULE_predicateListDef = 16, RULE_predicateDef = 17, RULE_actionDef = 18, 
		RULE_parametersDef = 19, RULE_modalityDef = 20, RULE_observabilityGroupsDef = 21, 
		RULE_eventDef = 22, RULE_eventPreDef = 23, RULE_eventPostDef = 24, RULE_postconditionBlock = 25, 
		RULE_postcondition = 26, RULE_simplePostcondition = 27, RULE_actionTypeDef = 28, 
		RULE_stateDef = 29, RULE_initDef = 30, RULE_goalDef = 31, RULE_actionConditionDef = 32, 
		RULE_actionTypeSignatureDef = 33, RULE_actionPreDef = 34, RULE_actionObsDef = 35, 
		RULE_typedIdentList = 36, RULE_typedVariableList = 37, RULE_type = 38, 
		RULE_reservedType = 39, RULE_formula = 40, RULE_conditionFormula = 41, 
		RULE_condition = 42, RULE_atomicCondition = 43, RULE_predicateFormula = 44, 
		RULE_atomicEqFormula = 45, RULE_term = 46, RULE_groundTerm = 47, RULE_modality = 48, 
		RULE_singleModality = 49, RULE_groupModality = 50, RULE_modalityLabel = 51, 
		RULE_modalityAgent = 52, RULE_modalityAgentGroup = 53, RULE_allAgents = 54, 
		RULE_predicateName = 55, RULE_domainName = 56, RULE_problemName = 57, 
		RULE_libraryName = 58, RULE_stateName = 59, RULE_worldName = 60, RULE_actionName = 61, 
		RULE_eventName = 62, RULE_agentName = 63, RULE_modalityName = 64, RULE_staticPredDef = 65, 
		RULE_genericName = 66, RULE_stateWorldsDef = 67, RULE_stateRelDef = 68, 
		RULE_stateRelations = 69, RULE_worldRelation = 70, RULE_worldNamePair = 71, 
		RULE_stateValDef = 72, RULE_stateValuation = 73, RULE_worldValuation = 74, 
		RULE_stateDesignDef = 75, RULE_agentGroup = 76, RULE_literal = 77, RULE_initialStateDescr = 78, 
		RULE_fTheoryFormula = 79, RULE_simpleFTheoryFormula = 80, RULE_actionTypeName = 81, 
		RULE_parameter = 82, RULE_expression = 83, RULE_formulaOrEmpty = 84, RULE_obsConditionDef = 85, 
		RULE_universalObsCond = 86, RULE_obsCondition = 87, RULE_trivialObsCond = 88, 
		RULE_ifObsCond = 89, RULE_otherwiseObsCond = 90, RULE_observingAgent = 91, 
		RULE_observingAgentGroup = 92, RULE_agentGroupName = 93, RULE_predicate = 94, 
		RULE_actionTypeGroupsDef = 95, RULE_actionTypeEventsDef = 96, RULE_eventSignature = 97, 
		RULE_actionTypeRelDef = 98, RULE_actionRelations = 99, RULE_eventRelation = 100, 
		RULE_eventNamePair = 101, RULE_actionTypeDesignDef = 102, RULE_typedAgentList = 103, 
		RULE_knowsWhether = 104, RULE_requirementKey = 105;
	public static readonly string[] ruleNames = {
		"mainDef", "domainDef", "libraryDef", "problemDef", "domainItemDef", "libraryItemDef", 
		"problemItemDef", "domainLibrariesNameDef", "problemDomainNameDef", "agentNamesDef", 
		"agentGroupsListDef", "agentGroupDef", "objectNamesDef", "staticPredListDef", 
		"requireDef", "typesDef", "predicateListDef", "predicateDef", "actionDef", 
		"parametersDef", "modalityDef", "observabilityGroupsDef", "eventDef", 
		"eventPreDef", "eventPostDef", "postconditionBlock", "postcondition", 
		"simplePostcondition", "actionTypeDef", "stateDef", "initDef", "goalDef", 
		"actionConditionDef", "actionTypeSignatureDef", "actionPreDef", "actionObsDef", 
		"typedIdentList", "typedVariableList", "type", "reservedType", "formula", 
		"conditionFormula", "condition", "atomicCondition", "predicateFormula", 
		"atomicEqFormula", "term", "groundTerm", "modality", "singleModality", 
		"groupModality", "modalityLabel", "modalityAgent", "modalityAgentGroup", 
		"allAgents", "predicateName", "domainName", "problemName", "libraryName", 
		"stateName", "worldName", "actionName", "eventName", "agentName", "modalityName", 
		"staticPredDef", "genericName", "stateWorldsDef", "stateRelDef", "stateRelations", 
		"worldRelation", "worldNamePair", "stateValDef", "stateValuation", "worldValuation", 
		"stateDesignDef", "agentGroup", "literal", "initialStateDescr", "fTheoryFormula", 
		"simpleFTheoryFormula", "actionTypeName", "parameter", "expression", "formulaOrEmpty", 
		"obsConditionDef", "universalObsCond", "obsCondition", "trivialObsCond", 
		"ifObsCond", "otherwiseObsCond", "observingAgent", "observingAgentGroup", 
		"agentGroupName", "predicate", "actionTypeGroupsDef", "actionTypeEventsDef", 
		"eventSignature", "actionTypeRelDef", "actionRelations", "eventRelation", 
		"eventNamePair", "actionTypeDesignDef", "typedAgentList", "knowsWhether", 
		"requirementKey"
	};

	private static readonly string[] _LiteralNames = {
		null, "':event'", "':precondition'", "':postconditions'", "':state'", 
		"':init'", "':goal'", "':where'", "':relations'", "':designated'", "':predicates'", 
		"':modality'", "':action'", "':parameters'", "':observability-groups'", 
		"':action-type-libraries'", "':requirements'", "':types'", "':objects'", 
		"':static'", "':agents'", "':agent-groups'", "':valuation'", "':state-name'", 
		"':observability-conditions'", "':action-type'", "':worlds'", "':del'", 
		"':typing'", "':equality'", "':domain'", "':existential-formulae'", "':multi-agent'", 
		"':ontic-actions'", "':universal-formulae'", "':universal-postconditions'", 
		"':modal-preconditions'", "':modal-postconditions'", "':modalities'", 
		"':ontic-change'", "':common-knowledge'", "':dynamic-common-knowledge'", 
		"':finitary-S5-theory'", "':maximum-preconditions-depth'", "':maximum-postconditions-depth'", 
		"':maximum-modal-depth'", "':ma-star-finitary-theory'", "':'", "'imply'", 
		"'or'", "'and'", "'not'", "'exists'", "'forall'", "'true'", "'false'", 
		"'<-'", "'kw'", "'iff'", "'when'", "'always'", "'if'", "'otherwise'", 
		"'define'", "'domain'", "'library'", "'problem'", "'predicate'", "'predicate-formula'", 
		"'formula'", "'postcondition'", "'literal'", "'All'", "'world'", "'agent'", 
		"'()'", null, null, null, null, null, null, null, "'-'", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EVENT", "PRECONDITION", "POSTCONDITIONS", "STATE", "INIT", "GOAL", 
		"WHERE", "RELATIONS", "DESIGNATED", "PREDICATES", "MODALITY", "ACTION", 
		"PARAMETERS", "OBSERVABILITY_GROUPS", "ACTION_TYPE_LIBRARIES", "REQUIREMENTS", 
		"TYPES", "OBJECTS", "STATIC", "AGENTS", "AGENT_GROUPS", "VALUATION", "STATE_NAME", 
		"OBSERVABILITY_CONDITIONS", "ACTION_TYPE", "WORLDS", "DEL", "TYPING", 
		"EQUALITY", "CDOMAIN", "EXISTENTIAL_FORMULAE", "MULTI_AGENT", "ONTIC_ACTIONS", 
		"UNIVERSAL_FORMULAE", "UNIVERSAL_POSTCONDITIONS", "MODAL_PRECONDITIONS", 
		"MODAL_POSTCONDITIONS", "MODALITIES", "ONTIC_CHANGE", "COMMON_KNOWLEDGE", 
		"DYNAMIC_COMMON_KNOWLEDGE", "FINITARY_S5_THEORY", "MAX_PRECONDITIONS_DEPTH", 
		"MAX_POSTCONDITIONS_DEPTH", "MAX_MODAL_DEPTH", "FINITARY_THEORY", "COLON", 
		"IMPLY", "OR", "AND", "NOT", "EXISTS", "FORALL", "TRUE", "FALSE", "ASSIGN", 
		"KW", "IFF", "WHEN", "ALWAYS", "IF", "OTHERWISE", "DEFINE", "DOMAIN", 
		"LIBRARY", "PROBLEM", "PREDICATE", "PREDICATE_FORMULA", "FORMULA", "POSTCONDITION", 
		"LITERAL", "ALL", "WORLD", "AGENT", "TRIVIAL_DEF", "NAME", "AGENT_NAME", 
		"MODALITY_NAME", "VARIABLE", "INT", "WS", "COMMENT", "DASH", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "LT", "GT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EPDDLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EPDDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EPDDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EPDDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DomainDefContext domainDef() {
			return GetRuleContext<DomainDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryDefContext libraryDef() {
			return GetRuleContext<LibraryDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemDefContext problemDef() {
			return GetRuleContext<ProblemDefContext>(0);
		}
		public MainDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterMainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitMainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainDefContext mainDef() {
		MainDefContext _localctx = new MainDefContext(Context, State);
		EnterRule(_localctx, 0, RULE_mainDef);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				domainDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				libraryDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				problemDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EPDDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN() { return GetToken(EPDDLParser.DOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainItemDefContext[] domainItemDef() {
			return GetRuleContexts<DomainItemDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainItemDefContext domainItemDef(int i) {
			return GetRuleContext<DomainItemDefContext>(i);
		}
		public DomainDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainDefContext domainDef() {
		DomainDefContext _localctx = new DomainDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_domainDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(LPAREN);
			State = 218;
			Match(DEFINE);
			State = 219;
			Match(LPAREN);
			State = 220;
			Match(DOMAIN);
			State = 221;
			domainName();
			State = 222;
			Match(RPAREN);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 223;
				domainItemDef();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EPDDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(EPDDLParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibraryNameContext libraryName() {
			return GetRuleContext<LibraryNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryItemDefContext[] libraryItemDef() {
			return GetRuleContexts<LibraryItemDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryItemDefContext libraryItemDef(int i) {
			return GetRuleContext<LibraryItemDefContext>(i);
		}
		public LibraryDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLibraryDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLibraryDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryDefContext libraryDef() {
		LibraryDefContext _localctx = new LibraryDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_libraryDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(LPAREN);
			State = 232;
			Match(DEFINE);
			State = 233;
			Match(LPAREN);
			State = 234;
			Match(LIBRARY);
			State = 235;
			libraryName();
			State = 236;
			Match(RPAREN);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 237;
				libraryItemDef();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EPDDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROBLEM() { return GetToken(EPDDLParser.PROBLEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemItemDefContext[] problemItemDef() {
			return GetRuleContexts<ProblemItemDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemItemDefContext problemItemDef(int i) {
			return GetRuleContext<ProblemItemDefContext>(i);
		}
		public ProblemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemDefContext problemDef() {
		ProblemDefContext _localctx = new ProblemDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_problemDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(LPAREN);
			State = 246;
			Match(DEFINE);
			State = 247;
			Match(LPAREN);
			State = 248;
			Match(PROBLEM);
			State = 249;
			problemName();
			State = 250;
			Match(RPAREN);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 251;
				problemItemDef();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 257;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainItemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DomainLibrariesNameDefContext domainLibrariesNameDef() {
			return GetRuleContext<DomainLibrariesNameDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesDefContext typesDef() {
			return GetRuleContext<TypesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateListDefContext predicateListDef() {
			return GetRuleContext<PredicateListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityDefContext modalityDef() {
			return GetRuleContext<ModalityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionDefContext actionDef() {
			return GetRuleContext<ActionDefContext>(0);
		}
		public DomainItemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainItemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainItemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainItemDefContext domainItemDef() {
		DomainItemDefContext _localctx = new DomainItemDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_domainItemDef);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				domainLibrariesNameDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				requireDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261;
				typesDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 262;
				predicateListDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				modalityDef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 264;
				actionDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryItemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityDefContext modalityDef() {
			return GetRuleContext<ModalityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservabilityGroupsDefContext observabilityGroupsDef() {
			return GetRuleContext<ObservabilityGroupsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeDefContext actionTypeDef() {
			return GetRuleContext<ActionTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefContext eventDef() {
			return GetRuleContext<EventDefContext>(0);
		}
		public LibraryItemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryItemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLibraryItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLibraryItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryItemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryItemDefContext libraryItemDef() {
		LibraryItemDefContext _localctx = new LibraryItemDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_libraryItemDef);
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				requireDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				modalityDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269;
				observabilityGroupsDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 270;
				actionTypeDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 271;
				eventDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemItemDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProblemDomainNameDefContext problemDomainNameDef() {
			return GetRuleContext<ProblemDomainNameDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityDefContext modalityDef() {
			return GetRuleContext<ModalityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNamesDefContext agentNamesDef() {
			return GetRuleContext<AgentNamesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupsListDefContext agentGroupsListDef() {
			return GetRuleContext<AgentGroupsListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectNamesDefContext objectNamesDef() {
			return GetRuleContext<ObjectNamesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticPredListDefContext staticPredListDef() {
			return GetRuleContext<StaticPredListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDefContext initDef() {
			return GetRuleContext<InitDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateDefContext stateDef() {
			return GetRuleContext<StateDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDefContext goalDef() {
			return GetRuleContext<GoalDefContext>(0);
		}
		public ProblemItemDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemItemDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemItemDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemItemDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemItemDefContext problemItemDef() {
		ProblemItemDefContext _localctx = new ProblemItemDefContext(Context, State);
		EnterRule(_localctx, 12, RULE_problemItemDef);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274;
				problemDomainNameDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				requireDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276;
				modalityDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 277;
				agentNamesDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 278;
				agentGroupsListDef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 279;
				objectNamesDef();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 280;
				staticPredListDef();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 281;
				initDef();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 282;
				stateDef();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 283;
				goalDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainLibrariesNameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_TYPE_LIBRARIES() { return GetToken(EPDDLParser.ACTION_TYPE_LIBRARIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibraryNameContext[] libraryName() {
			return GetRuleContexts<LibraryNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryNameContext libraryName(int i) {
			return GetRuleContext<LibraryNameContext>(i);
		}
		public DomainLibrariesNameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainLibrariesNameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainLibrariesNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainLibrariesNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainLibrariesNameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainLibrariesNameDefContext domainLibrariesNameDef() {
		DomainLibrariesNameDefContext _localctx = new DomainLibrariesNameDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_domainLibrariesNameDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(LPAREN);
			State = 287;
			Match(ACTION_TYPE_LIBRARIES);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 288;
				libraryName();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 293;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemDomainNameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDOMAIN() { return GetToken(EPDDLParser.CDOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ProblemDomainNameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemDomainNameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemDomainNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemDomainNameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemDomainNameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemDomainNameDefContext problemDomainNameDef() {
		ProblemDomainNameDefContext _localctx = new ProblemDomainNameDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_problemDomainNameDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(LPAREN);
			State = 296;
			Match(CDOMAIN);
			State = 297;
			domainName();
			State = 298;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentNamesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENTS() { return GetToken(EPDDLParser.AGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedAgentListContext typedAgentList() {
			return GetRuleContext<TypedAgentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public AgentNamesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentNamesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentNamesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentNamesDefContext agentNamesDef() {
		AgentNamesDefContext _localctx = new AgentNamesDefContext(Context, State);
		EnterRule(_localctx, 18, RULE_agentNamesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(LPAREN);
			State = 301;
			Match(AGENTS);
			State = 302;
			typedAgentList();
			State = 303;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupsListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_GROUPS() { return GetToken(EPDDLParser.AGENT_GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupDefContext[] agentGroupDef() {
			return GetRuleContexts<AgentGroupDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupDefContext agentGroupDef(int i) {
			return GetRuleContext<AgentGroupDefContext>(i);
		}
		public AgentGroupsListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroupsListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroupsListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroupsListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroupsListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupsListDefContext agentGroupsListDef() {
		AgentGroupsListDefContext _localctx = new AgentGroupsListDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_agentGroupsListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(LPAREN);
			State = 306;
			Match(AGENT_GROUPS);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 307;
				agentGroupDef();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 312;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupNameContext agentGroupName() {
			return GetRuleContext<AgentGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext[] agentName() {
			return GetRuleContexts<AgentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName(int i) {
			return GetRuleContext<AgentNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		public AgentGroupDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroupDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroupDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroupDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroupDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupDefContext agentGroupDef() {
		AgentGroupDefContext _localctx = new AgentGroupDefContext(Context, State);
		EnterRule(_localctx, 22, RULE_agentGroupDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(LPAREN);
			State = 315;
			agentGroupName();
			State = 316;
			Match(ASSIGN);
			State = 317;
			Match(LPAREN);
			State = 318;
			agentName();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AGENT_NAME) {
				{
				{
				State = 319;
				agentName();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(RPAREN);
			State = 326;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNamesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECTS() { return GetToken(EPDDLParser.OBJECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ObjectNamesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectNamesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObjectNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObjectNamesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectNamesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNamesDefContext objectNamesDef() {
		ObjectNamesDefContext _localctx = new ObjectNamesDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_objectNamesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(LPAREN);
			State = 329;
			Match(OBJECTS);
			State = 330;
			typedIdentList();
			State = 331;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticPredListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EPDDLParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StaticPredDefContext[] staticPredDef() {
			return GetRuleContexts<StaticPredDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticPredDefContext staticPredDef(int i) {
			return GetRuleContext<StaticPredDefContext>(i);
		}
		public StaticPredListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticPredListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStaticPredListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStaticPredListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticPredListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticPredListDefContext staticPredListDef() {
		StaticPredListDefContext _localctx = new StaticPredListDefContext(Context, State);
		EnterRule(_localctx, 26, RULE_staticPredListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(LPAREN);
			State = 334;
			Match(STATIC);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 335;
				staticPredDef();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 340;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIREMENTS() { return GetToken(EPDDLParser.REQUIREMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequirementKeyContext[] requirementKey() {
			return GetRuleContexts<RequirementKeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequirementKeyContext requirementKey(int i) {
			return GetRuleContext<RequirementKeyContext>(i);
		}
		public RequireDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterRequireDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitRequireDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefContext requireDef() {
		RequireDefContext _localctx = new RequireDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_requireDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(LPAREN);
			State = 343;
			Match(REQUIREMENTS);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & 144115188076445687L) != 0)) {
				{
				{
				State = 344;
				requirementKey();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 350;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES() { return GetToken(EPDDLParser.TYPES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext typedIdentList() {
			return GetRuleContext<TypedIdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public TypesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesDefContext typesDef() {
		TypesDefContext _localctx = new TypesDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_typesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(LPAREN);
			State = 353;
			Match(TYPES);
			State = 354;
			typedIdentList();
			State = 355;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATES() { return GetToken(EPDDLParser.PREDICATES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateDefContext[] predicateDef() {
			return GetRuleContexts<PredicateDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateDefContext predicateDef(int i) {
			return GetRuleContext<PredicateDefContext>(i);
		}
		public PredicateListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateListDefContext predicateListDef() {
		PredicateListDefContext _localctx = new PredicateListDefContext(Context, State);
		EnterRule(_localctx, 32, RULE_predicateListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(LPAREN);
			State = 358;
			Match(PREDICATES);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 359;
				predicateDef();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 364;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public PredicateDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateDefContext predicateDef() {
		PredicateDefContext _localctx = new PredicateDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_predicateDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(LPAREN);
			State = 367;
			predicateName();
			State = 368;
			typedVariableList();
			State = 369;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(EPDDLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionNameContext actionName() {
			return GetRuleContext<ActionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionConditionDefContext actionConditionDef() {
			return GetRuleContext<ActionConditionDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionPreDefContext actionPreDef() {
			return GetRuleContext<ActionPreDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeSignatureDefContext actionTypeSignatureDef() {
			return GetRuleContext<ActionTypeSignatureDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionObsDefContext actionObsDef() {
			return GetRuleContext<ActionObsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ActionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefContext actionDef() {
		ActionDefContext _localctx = new ActionDefContext(Context, State);
		EnterRule(_localctx, 36, RULE_actionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(LPAREN);
			State = 372;
			Match(ACTION);
			State = 373;
			actionName();
			State = 374;
			parametersDef();
			State = 375;
			actionConditionDef();
			State = 376;
			actionPreDef();
			State = 377;
			actionTypeSignatureDef();
			State = 378;
			actionObsDef();
			State = 379;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERS() { return GetToken(EPDDLParser.PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ParametersDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterParametersDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitParametersDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersDefContext parametersDef() {
		ParametersDefContext _localctx = new ParametersDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_parametersDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(PARAMETERS);
			State = 382;
			Match(LPAREN);
			State = 383;
			typedVariableList();
			State = 384;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITY() { return GetToken(EPDDLParser.MODALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityNameContext[] modalityName() {
			return GetRuleContexts<ModalityNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityNameContext modalityName(int i) {
			return GetRuleContext<ModalityNameContext>(i);
		}
		public ModalityDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityDefContext modalityDef() {
		ModalityDefContext _localctx = new ModalityDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_modalityDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(LPAREN);
			State = 387;
			Match(MODALITY);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODALITY_NAME) {
				{
				{
				State = 388;
				modalityName();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservabilityGroupsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSERVABILITY_GROUPS() { return GetToken(EPDDLParser.OBSERVABILITY_GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext[] observingAgentGroup() {
			return GetRuleContexts<ObservingAgentGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup(int i) {
			return GetRuleContext<ObservingAgentGroupContext>(i);
		}
		public ObservabilityGroupsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observabilityGroupsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObservabilityGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObservabilityGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObservabilityGroupsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObservabilityGroupsDefContext observabilityGroupsDef() {
		ObservabilityGroupsDefContext _localctx = new ObservabilityGroupsDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_observabilityGroupsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(LPAREN);
			State = 397;
			Match(OBSERVABILITY_GROUPS);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 161L) != 0)) {
				{
				{
				State = 398;
				observingAgentGroup();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 404;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EPDDLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventPreDefContext eventPreDef() {
			return GetRuleContext<EventPreDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventPostDefContext eventPostDef() {
			return GetRuleContext<EventPostDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public EventDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefContext eventDef() {
		EventDefContext _localctx = new EventDefContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(LPAREN);
			State = 407;
			Match(EVENT);
			State = 408;
			eventName();
			State = 409;
			parametersDef();
			State = 410;
			eventPreDef();
			State = 411;
			eventPostDef();
			State = 412;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventPreDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECONDITION() { return GetToken(EPDDLParser.PRECONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		public EventPreDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventPreDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventPreDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventPreDefContext eventPreDef() {
		EventPreDefContext _localctx = new EventPreDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_eventPreDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(PRECONDITION);
			State = 415;
			formulaOrEmpty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventPostDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTCONDITIONS() { return GetToken(EPDDLParser.POSTCONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionBlockContext postconditionBlock() {
			return GetRuleContext<PostconditionBlockContext>(0);
		}
		public EventPostDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventPostDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventPostDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventPostDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventPostDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventPostDefContext eventPostDef() {
		EventPostDefContext _localctx = new EventPostDefContext(Context, State);
		EnterRule(_localctx, 48, RULE_eventPostDef);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case POSTCONDITIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417;
				Match(POSTCONDITIONS);
				State = 418;
				postconditionBlock();
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostconditionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EPDDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionContext[] postcondition() {
			return GetRuleContexts<PostconditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionContext postcondition(int i) {
			return GetRuleContext<PostconditionContext>(i);
		}
		public PostconditionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postconditionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPostconditionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPostconditionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostconditionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostconditionBlockContext postconditionBlock() {
		PostconditionBlockContext _localctx = new PostconditionBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_postconditionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(LPAREN);
			State = 423;
			Match(COLON);
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 424;
				postcondition();
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 430;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePostconditionContext simplePostcondition() {
			return GetRuleContext<SimplePostconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		public PostconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostconditionContext postcondition() {
		PostconditionContext _localctx = new PostconditionContext(Context, State);
		EnterRule(_localctx, 52, RULE_postcondition);
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				simplePostcondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				Match(LPAREN);
				State = 434;
				Match(FORALL);
				State = 435;
				Match(LPAREN);
				State = 436;
				typedVariableList();
				State = 437;
				Match(RPAREN);
				State = 438;
				simplePostcondition();
				State = 439;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 441;
				Match(LPAREN);
				State = 442;
				Match(VARIABLE);
				State = 443;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplePostconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFF() { return GetToken(EPDDLParser.IFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EPDDLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(EPDDLParser.ALWAYS, 0); }
		public SimplePostconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplePostcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterSimplePostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitSimplePostcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimplePostconditionContext simplePostcondition() {
		SimplePostconditionContext _localctx = new SimplePostconditionContext(Context, State);
		EnterRule(_localctx, 54, RULE_simplePostcondition);
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				Match(LPAREN);
				State = 447;
				Match(IFF);
				State = 448;
				formulaOrEmpty();
				State = 449;
				literal();
				State = 450;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				Match(LPAREN);
				State = 453;
				Match(WHEN);
				State = 454;
				formulaOrEmpty();
				State = 455;
				literal();
				State = 456;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				Match(LPAREN);
				State = 459;
				Match(ALWAYS);
				State = 460;
				literal();
				State = 461;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_TYPE() { return GetToken(EPDDLParser.ACTION_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeNameContext actionTypeName() {
			return GetRuleContext<ActionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeGroupsDefContext actionTypeGroupsDef() {
			return GetRuleContext<ActionTypeGroupsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeEventsDefContext actionTypeEventsDef() {
			return GetRuleContext<ActionTypeEventsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeRelDefContext actionTypeRelDef() {
			return GetRuleContext<ActionTypeRelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeDesignDefContext actionTypeDesignDef() {
			return GetRuleContext<ActionTypeDesignDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ActionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeDefContext actionTypeDef() {
		ActionTypeDefContext _localctx = new ActionTypeDefContext(Context, State);
		EnterRule(_localctx, 56, RULE_actionTypeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(LPAREN);
			State = 466;
			Match(ACTION_TYPE);
			State = 467;
			actionTypeName();
			State = 468;
			parametersDef();
			State = 469;
			actionTypeGroupsDef();
			State = 470;
			actionTypeEventsDef();
			State = 471;
			actionTypeRelDef();
			State = 472;
			actionTypeDesignDef();
			State = 473;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(EPDDLParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateNameContext stateName() {
			return GetRuleContext<StateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateWorldsDefContext stateWorldsDef() {
			return GetRuleContext<StateWorldsDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateRelDefContext stateRelDef() {
			return GetRuleContext<StateRelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateValDefContext stateValDef() {
			return GetRuleContext<StateValDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateDesignDefContext stateDesignDef() {
			return GetRuleContext<StateDesignDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public StateDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDefContext stateDef() {
		StateDefContext _localctx = new StateDefContext(Context, State);
		EnterRule(_localctx, 58, RULE_stateDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(LPAREN);
			State = 476;
			Match(STATE);
			State = 477;
			stateName();
			State = 478;
			stateWorldsDef();
			State = 479;
			stateRelDef();
			State = 480;
			stateValDef();
			State = 481;
			stateDesignDef();
			State = 482;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(EPDDLParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitialStateDescrContext initialStateDescr() {
			return GetRuleContext<InitialStateDescrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public InitDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterInitDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitInitDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDefContext initDef() {
		InitDefContext _localctx = new InitDefContext(Context, State);
		EnterRule(_localctx, 60, RULE_initDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(LPAREN);
			State = 485;
			Match(INIT);
			State = 486;
			initialStateDescr();
			State = 487;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOAL() { return GetToken(EPDDLParser.GOAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public GoalDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goalDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGoalDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGoalDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalDefContext goalDef() {
		GoalDefContext _localctx = new GoalDefContext(Context, State);
		EnterRule(_localctx, 62, RULE_goalDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(LPAREN);
			State = 490;
			Match(GOAL);
			State = 491;
			formula();
			State = 492;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionConditionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EPDDLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionFormulaContext conditionFormula() {
			return GetRuleContext<ConditionFormulaContext>(0);
		}
		public ActionConditionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionConditionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionConditionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionConditionDefContext actionConditionDef() {
		ActionConditionDefContext _localctx = new ActionConditionDefContext(Context, State);
		EnterRule(_localctx, 64, RULE_actionConditionDef);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494;
				Match(WHERE);
				State = 495;
				conditionFormula();
				}
				break;
			case PRECONDITION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeSignatureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_TYPE() { return GetToken(EPDDLParser.ACTION_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionTypeNameContext actionTypeName() {
			return GetRuleContext<ActionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ActionTypeSignatureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeSignatureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeSignatureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeSignatureDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeSignatureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeSignatureDefContext actionTypeSignatureDef() {
		ActionTypeSignatureDefContext _localctx = new ActionTypeSignatureDefContext(Context, State);
		EnterRule(_localctx, 66, RULE_actionTypeSignatureDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(ACTION_TYPE);
			State = 500;
			Match(LPAREN);
			State = 501;
			actionTypeName();
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 502;
				parameter();
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 508;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionPreDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECONDITION() { return GetToken(EPDDLParser.PRECONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaOrEmptyContext formulaOrEmpty() {
			return GetRuleContext<FormulaOrEmptyContext>(0);
		}
		public ActionPreDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionPreDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionPreDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionPreDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionPreDefContext actionPreDef() {
		ActionPreDefContext _localctx = new ActionPreDefContext(Context, State);
		EnterRule(_localctx, 68, RULE_actionPreDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(PRECONDITION);
			State = 511;
			formulaOrEmpty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionObsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSERVABILITY_CONDITIONS() { return GetToken(EPDDLParser.OBSERVABILITY_CONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionDefContext[] obsConditionDef() {
			return GetRuleContexts<ObsConditionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionDefContext obsConditionDef(int i) {
			return GetRuleContext<ObsConditionDefContext>(i);
		}
		public ActionObsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionObsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionObsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionObsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionObsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionObsDefContext actionObsDef() {
		ActionObsDefContext _localctx = new ActionObsDefContext(Context, State);
		EnterRule(_localctx, 70, RULE_actionObsDef);
		int _la;
		try {
			State = 521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBSERVABILITY_CONDITIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				Match(OBSERVABILITY_CONDITIONS);
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN) {
					{
					{
					State = 514;
					obsConditionDef();
					}
					}
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(EPDDLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(EPDDLParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(EPDDLParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(EPDDLParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext[] typedIdentList() {
			return GetRuleContexts<TypedIdentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentListContext typedIdentList(int i) {
			return GetRuleContext<TypedIdentListContext>(i);
		}
		public TypedIdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypedIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypedIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentListContext typedIdentList() {
		TypedIdentListContext _localctx = new TypedIdentListContext(Context, State);
		EnterRule(_localctx, 72, RULE_typedIdentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 523;
					Match(NAME);
					State = 527;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NAME) {
						{
						{
						State = 524;
						Match(NAME);
						}
						}
						State = 529;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 530;
					Match(ASSIGN);
					State = 531;
					type();
					State = 532;
					typedIdentList();
					}
					} 
				}
				State = 538;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(EPDDLParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(EPDDLParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		public TypedVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypedVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypedVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVariableListContext typedVariableList() {
		TypedVariableListContext _localctx = new TypedVariableListContext(Context, State);
		EnterRule(_localctx, 74, RULE_typedVariableList);
		int _la;
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 539;
					Match(VARIABLE);
					State = 543;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==VARIABLE) {
						{
						{
						State = 540;
						Match(VARIABLE);
						}
						}
						State = 545;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 546;
					Match(DASH);
					State = 547;
					type();
					State = 548;
					typedVariableList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedTypeContext reservedType() {
			return GetRuleContext<ReservedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_type);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREDICATE:
			case PREDICATE_FORMULA:
			case FORMULA:
			case POSTCONDITION:
			case LITERAL:
			case AGENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				reservedType();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT() { return GetToken(EPDDLParser.AGENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATE() { return GetToken(EPDDLParser.PREDICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(EPDDLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICATE_FORMULA() { return GetToken(EPDDLParser.PREDICATE_FORMULA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMULA() { return GetToken(EPDDLParser.FORMULA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTCONDITION() { return GetToken(EPDDLParser.POSTCONDITION, 0); }
		public ReservedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterReservedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitReservedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedTypeContext reservedType() {
		ReservedTypeContext _localctx = new ReservedTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_reservedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 159L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLY() { return GetToken(EPDDLParser.IMPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext[] formula() {
			return GetRuleContexts<FormulaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula(int i) {
			return GetRuleContext<FormulaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(EPDDLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EPDDLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(EPDDLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityContext modality() {
			return GetRuleContext<ModalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext predicateFormula() {
			return GetRuleContext<PredicateFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicEqFormulaContext atomicEqFormula() {
			return GetRuleContext<AtomicEqFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(EPDDLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(EPDDLParser.FALSE, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 80, RULE_formula);
		int _la;
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561;
				Match(LPAREN);
				State = 562;
				Match(IMPLY);
				State = 563;
				formula();
				State = 564;
				formula();
				State = 565;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				Match(LPAREN);
				State = 568;
				Match(OR);
				State = 569;
				formula();
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 74088185859L) != 0)) {
					{
					{
					State = 570;
					formula();
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 576;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 578;
				Match(LPAREN);
				State = 579;
				Match(AND);
				State = 580;
				formula();
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 74088185859L) != 0)) {
					{
					{
					State = 581;
					formula();
					}
					}
					State = 586;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 587;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 589;
				Match(LPAREN);
				State = 590;
				Match(NOT);
				State = 591;
				formula();
				State = 592;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 594;
				Match(LPAREN);
				State = 595;
				Match(EXISTS);
				State = 596;
				Match(LPAREN);
				State = 597;
				typedVariableList();
				State = 598;
				Match(RPAREN);
				State = 599;
				formula();
				State = 600;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 602;
				Match(LPAREN);
				State = 603;
				Match(FORALL);
				State = 604;
				Match(LPAREN);
				State = 605;
				typedVariableList();
				State = 606;
				Match(RPAREN);
				State = 607;
				formula();
				State = 608;
				Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 610;
				modality();
				State = 611;
				formula();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 613;
				predicateFormula();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 614;
				atomicEqFormula();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 615;
				Match(TRUE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 616;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EPDDLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ConditionFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterConditionFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitConditionFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionFormulaContext conditionFormula() {
		ConditionFormulaContext _localctx = new ConditionFormulaContext(Context, State);
		EnterRule(_localctx, 82, RULE_conditionFormula);
		int _la;
		try {
			State = 631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(LPAREN);
				State = 620;
				Match(AND);
				State = 621;
				condition();
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN) {
					{
					{
					State = 622;
					condition();
					}
					}
					State = 627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 628;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 630;
				condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicConditionContext atomicCondition() {
			return GetRuleContext<AtomicConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 84, RULE_condition);
		try {
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 633;
				atomicCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 634;
				Match(LPAREN);
				State = 635;
				Match(NOT);
				State = 636;
				atomicCondition();
				State = 637;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		public AtomicConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAtomicCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAtomicCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicConditionContext atomicCondition() {
		AtomicConditionContext _localctx = new AtomicConditionContext(Context, State);
		EnterRule(_localctx, 86, RULE_atomicCondition);
		int _la;
		try {
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 641;
				Match(LPAREN);
				State = 642;
				predicateName();
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 11L) != 0)) {
					{
					{
					State = 643;
					term();
					}
					}
					State = 648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 649;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				Match(LPAREN);
				State = 652;
				Match(ASSIGN);
				State = 653;
				term();
				State = 654;
				term();
				State = 655;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLY() { return GetToken(EPDDLParser.IMPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext[] predicateFormula() {
			return GetRuleContexts<PredicateFormulaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext predicateFormula(int i) {
			return GetRuleContext<PredicateFormulaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(EPDDLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EPDDLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(EPDDLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroundTermContext[] groundTerm() {
			return GetRuleContexts<GroundTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroundTermContext groundTerm(int i) {
			return GetRuleContext<GroundTermContext>(i);
		}
		public PredicateFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateFormulaContext predicateFormula() {
		PredicateFormulaContext _localctx = new PredicateFormulaContext(Context, State);
		EnterRule(_localctx, 88, RULE_predicateFormula);
		int _la;
		try {
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 659;
				Match(LPAREN);
				State = 660;
				Match(IMPLY);
				State = 661;
				predicateFormula();
				State = 662;
				predicateFormula();
				State = 663;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665;
				Match(LPAREN);
				State = 666;
				Match(OR);
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 667;
					predicateFormula();
					}
					}
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				State = 672;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 674;
				Match(LPAREN);
				State = 675;
				Match(AND);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 676;
					predicateFormula();
					}
					}
					State = 679;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				State = 681;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 683;
				Match(LPAREN);
				State = 684;
				Match(NOT);
				State = 685;
				predicateFormula();
				State = 686;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 688;
				Match(LPAREN);
				State = 689;
				Match(EXISTS);
				State = 690;
				Match(LPAREN);
				State = 691;
				typedVariableList();
				State = 692;
				Match(RPAREN);
				State = 693;
				predicateFormula();
				State = 694;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 696;
				Match(LPAREN);
				State = 697;
				Match(FORALL);
				State = 698;
				Match(LPAREN);
				State = 699;
				typedVariableList();
				State = 700;
				Match(RPAREN);
				State = 701;
				predicateFormula();
				State = 702;
				Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 704;
				Match(LPAREN);
				State = 705;
				predicateName();
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME || _la==AGENT_NAME) {
					{
					{
					State = 706;
					groundTerm();
					}
					}
					State = 711;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 712;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicEqFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public AtomicEqFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicEqFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAtomicEqFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAtomicEqFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicEqFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicEqFormulaContext atomicEqFormula() {
		AtomicEqFormulaContext _localctx = new AtomicEqFormulaContext(Context, State);
		EnterRule(_localctx, 90, RULE_atomicEqFormula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(LPAREN);
			State = 717;
			Match(ASSIGN);
			State = 718;
			term();
			State = 719;
			term();
			State = 720;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroundTermContext groundTerm() {
			return GetRuleContext<GroundTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 92, RULE_term);
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 722;
				groundTerm();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 723;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroundTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		public GroundTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groundTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGroundTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGroundTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroundTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroundTermContext groundTerm() {
		GroundTermContext _localctx = new GroundTermContext(Context, State);
		EnterRule(_localctx, 94, RULE_groundTerm);
		try {
			State = 728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				Match(NAME);
				}
				break;
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				agentName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleModalityContext singleModality() {
			return GetRuleContext<SingleModalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupModalityContext groupModality() {
			return GetRuleContext<GroupModalityContext>(0);
		}
		public ModalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityContext modality() {
		ModalityContext _localctx = new ModalityContext(Context, State);
		EnterRule(_localctx, 96, RULE_modality);
		try {
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 730;
				singleModality();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 731;
				groupModality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleModalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityLabelContext modalityLabel() {
			return GetRuleContext<ModalityLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentContext modalityAgent() {
			return GetRuleContext<ModalityAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EPDDLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EPDDLParser.GT, 0); }
		public SingleModalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleModality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterSingleModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitSingleModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleModality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleModalityContext singleModality() {
		SingleModalityContext _localctx = new SingleModalityContext(Context, State);
		EnterRule(_localctx, 98, RULE_singleModality);
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 734;
				Match(LBRACKET);
				State = 735;
				modalityLabel();
				State = 736;
				modalityAgent();
				State = 737;
				Match(RBRACKET);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 739;
				Match(LT);
				State = 740;
				modalityLabel();
				State = 741;
				modalityAgent();
				State = 742;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupModalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModalityLabelContext modalityLabel() {
			return GetRuleContext<ModalityLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentGroupContext modalityAgentGroup() {
			return GetRuleContext<ModalityAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EPDDLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EPDDLParser.GT, 0); }
		public GroupModalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupModality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGroupModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGroupModality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupModality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupModalityContext groupModality() {
		GroupModalityContext _localctx = new GroupModalityContext(Context, State);
		EnterRule(_localctx, 100, RULE_groupModality);
		try {
			State = 756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746;
				Match(LBRACKET);
				State = 747;
				modalityLabel();
				State = 748;
				modalityAgentGroup();
				State = 749;
				Match(RBRACKET);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 751;
				Match(LT);
				State = 752;
				modalityLabel();
				State = 753;
				modalityAgentGroup();
				State = 754;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModalityNameContext modalityName() {
			return GetRuleContext<ModalityNameContext>(0);
		}
		public ModalityLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityLabelContext modalityLabel() {
		ModalityLabelContext _localctx = new ModalityLabelContext(Context, State);
		EnterRule(_localctx, 102, RULE_modalityLabel);
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODALITY_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758;
				modalityName();
				}
				break;
			case ALL:
			case AGENT_NAME:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityAgentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllAgentsContext allAgents() {
			return GetRuleContext<AllAgentsContext>(0);
		}
		public ModalityAgentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityAgent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityAgent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityAgentContext modalityAgent() {
		ModalityAgentContext _localctx = new ModalityAgentContext(Context, State);
		EnterRule(_localctx, 104, RULE_modalityAgent);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762;
				agentName();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				Match(VARIABLE);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 764;
				allAgents();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityAgentGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentContext[] modalityAgent() {
			return GetRuleContexts<ModalityAgentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModalityAgentContext modalityAgent(int i) {
			return GetRuleContext<ModalityAgentContext>(i);
		}
		public ModalityAgentGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityAgentGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityAgentGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityAgentGroupContext modalityAgentGroup() {
		ModalityAgentGroupContext _localctx = new ModalityAgentGroupContext(Context, State);
		EnterRule(_localctx, 106, RULE_modalityAgentGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			modalityAgent();
			State = 771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 161L) != 0)) {
				{
				{
				State = 768;
				modalityAgent();
				}
				}
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllAgentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public AllAgentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allAgents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAllAgents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAllAgents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllAgents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllAgentsContext allAgents() {
		AllAgentsContext _localctx = new AllAgentsContext(Context, State);
		EnterRule(_localctx, 108, RULE_allAgents);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			Match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public PredicateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateNameContext predicateName() {
		PredicateNameContext _localctx = new PredicateNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_predicateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterDomainName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitDomainName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(Context, State);
		EnterRule(_localctx, 112, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterProblemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitProblemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public LibraryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLibraryName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLibraryName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryNameContext libraryName() {
		LibraryNameContext _localctx = new LibraryNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_libraryName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public StateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateNameContext stateName() {
		StateNameContext _localctx = new StateNameContext(Context, State);
		EnterRule(_localctx, 118, RULE_stateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public WorldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldNameContext worldName() {
		WorldNameContext _localctx = new WorldNameContext(Context, State);
		EnterRule(_localctx, 120, RULE_worldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public ActionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionNameContext actionName() {
		ActionNameContext _localctx = new ActionNameContext(Context, State);
		EnterRule(_localctx, 122, RULE_actionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME() { return GetToken(EPDDLParser.AGENT_NAME, 0); }
		public AgentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentNameContext agentName() {
		AgentNameContext _localctx = new AgentNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_agentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			Match(AGENT_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModalityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITY_NAME() { return GetToken(EPDDLParser.MODALITY_NAME, 0); }
		public ModalityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modalityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterModalityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitModalityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModalityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModalityNameContext modalityName() {
		ModalityNameContext _localctx = new ModalityNameContext(Context, State);
		EnterRule(_localctx, 128, RULE_modalityName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(MODALITY_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticPredDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericNameContext[] genericName() {
			return GetRuleContexts<GenericNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericNameContext genericName(int i) {
			return GetRuleContext<GenericNameContext>(i);
		}
		public StaticPredDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticPredDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStaticPredDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStaticPredDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticPredDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticPredDefContext staticPredDef() {
		StaticPredDefContext _localctx = new StaticPredDefContext(Context, State);
		EnterRule(_localctx, 130, RULE_staticPredDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			Match(LPAREN);
			State = 797;
			predicateName();
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME || _la==AGENT_NAME) {
				{
				{
				State = 798;
				genericName();
				}
				}
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 804;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		public GenericNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericNameContext genericName() {
		GenericNameContext _localctx = new GenericNameContext(Context, State);
		EnterRule(_localctx, 132, RULE_genericName);
		try {
			State = 808;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 806;
				Match(NAME);
				}
				break;
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 807;
				agentName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateWorldsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORLDS() { return GetToken(EPDDLParser.WORLDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext[] worldName() {
			return GetRuleContexts<WorldNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName(int i) {
			return GetRuleContext<WorldNameContext>(i);
		}
		public StateWorldsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateWorldsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateWorldsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateWorldsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateWorldsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateWorldsDefContext stateWorldsDef() {
		StateWorldsDefContext _localctx = new StateWorldsDefContext(Context, State);
		EnterRule(_localctx, 134, RULE_stateWorldsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(WORLDS);
			State = 811;
			Match(LPAREN);
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 812;
				worldName();
				}
				}
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 817;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateRelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONS() { return GetToken(EPDDLParser.RELATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateRelationsContext stateRelations() {
			return GetRuleContext<StateRelationsContext>(0);
		}
		public StateRelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateRelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateRelDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateRelDefContext stateRelDef() {
		StateRelDefContext _localctx = new StateRelDefContext(Context, State);
		EnterRule(_localctx, 136, RULE_stateRelDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(RELATIONS);
			State = 820;
			stateRelations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateRelationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WorldRelationContext[] worldRelation() {
			return GetRuleContexts<WorldRelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldRelationContext worldRelation(int i) {
			return GetRuleContext<WorldRelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public StateRelationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateRelations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateRelations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateRelationsContext stateRelations() {
		StateRelationsContext _localctx = new StateRelationsContext(Context, State);
		EnterRule(_localctx, 138, RULE_stateRelations);
		int _la;
		try {
			State = 830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 822;
					worldRelation();
					}
					}
					State = 825;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				Match(LPAREN);
				State = 828;
				Match(TRIVIAL_DEF);
				State = 829;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldRelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupContext agentGroup() {
			return GetRuleContext<AgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNamePairContext[] worldNamePair() {
			return GetRuleContexts<WorldNamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNamePairContext worldNamePair(int i) {
			return GetRuleContext<WorldNamePairContext>(i);
		}
		public WorldRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldRelationContext worldRelation() {
		WorldRelationContext _localctx = new WorldRelationContext(Context, State);
		EnterRule(_localctx, 140, RULE_worldRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(LPAREN);
			State = 833;
			agentGroup();
			State = 835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 834;
				worldNamePair();
				}
				}
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 839;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldNamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext[] worldName() {
			return GetRuleContexts<WorldNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName(int i) {
			return GetRuleContext<WorldNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public WorldNamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldNamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldNamePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldNamePairContext worldNamePair() {
		WorldNamePairContext _localctx = new WorldNamePairContext(Context, State);
		EnterRule(_localctx, 142, RULE_worldNamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(LPAREN);
			State = 842;
			worldName();
			State = 843;
			worldName();
			State = 844;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateValDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUATION() { return GetToken(EPDDLParser.VALUATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateValuationContext stateValuation() {
			return GetRuleContext<StateValuationContext>(0);
		}
		public StateValDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateValDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateValDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateValDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateValDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateValDefContext stateValDef() {
		StateValDefContext _localctx = new StateValDefContext(Context, State);
		EnterRule(_localctx, 144, RULE_stateValDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(VALUATION);
			State = 847;
			stateValuation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateValuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WorldValuationContext[] worldValuation() {
			return GetRuleContexts<WorldValuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldValuationContext worldValuation(int i) {
			return GetRuleContext<WorldValuationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public StateValuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateValuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateValuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateValuationContext stateValuation() {
		StateValuationContext _localctx = new StateValuationContext(Context, State);
		EnterRule(_localctx, 146, RULE_stateValuation);
		int _la;
		try {
			State = 857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 849;
					worldValuation();
					}
					}
					State = 852;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 854;
				Match(LPAREN);
				State = 855;
				Match(TRIVIAL_DEF);
				State = 856;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldValuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName() {
			return GetRuleContext<WorldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public WorldValuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldValuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterWorldValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitWorldValuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldValuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldValuationContext worldValuation() {
		WorldValuationContext _localctx = new WorldValuationContext(Context, State);
		EnterRule(_localctx, 148, RULE_worldValuation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			Match(LPAREN);
			State = 860;
			worldName();
			State = 861;
			Match(LBRACKET);
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 862;
				literal();
				}
				}
				State = 867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 868;
			Match(RBRACKET);
			State = 869;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDesignDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESIGNATED() { return GetToken(EPDDLParser.DESIGNATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext[] worldName() {
			return GetRuleContexts<WorldNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorldNameContext worldName(int i) {
			return GetRuleContext<WorldNameContext>(i);
		}
		public StateDesignDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDesignDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterStateDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitStateDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDesignDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDesignDefContext stateDesignDef() {
		StateDesignDefContext _localctx = new StateDesignDefContext(Context, State);
		EnterRule(_localctx, 150, RULE_stateDesignDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			Match(DESIGNATED);
			State = 872;
			Match(LPAREN);
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 873;
				worldName();
				}
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 878;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupNameContext agentGroupName() {
			return GetRuleContext<AgentGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(EPDDLParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext[] agentName() {
			return GetRuleContexts<AgentNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName(int i) {
			return GetRuleContext<AgentNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(EPDDLParser.RBRACE, 0); }
		public AgentGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupContext agentGroup() {
		AgentGroupContext _localctx = new AgentGroupContext(Context, State);
		EnterRule(_localctx, 152, RULE_agentGroup);
		int _la;
		try {
			State = 891;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AGENT_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 880;
				agentGroupName();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881;
				Match(LBRACE);
				State = 882;
				agentName();
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 883;
					agentName();
					}
					}
					State = 888;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 889;
				Match(RBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_literal);
		try {
			State = 899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 893;
				predicate();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894;
				Match(LPAREN);
				State = 895;
				Match(NOT);
				State = 896;
				predicate();
				State = 897;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialStateDescrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FTheoryFormulaContext[] fTheoryFormula() {
			return GetRuleContexts<FTheoryFormulaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FTheoryFormulaContext fTheoryFormula(int i) {
			return GetRuleContext<FTheoryFormulaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE_NAME() { return GetToken(EPDDLParser.STATE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateNameContext stateName() {
			return GetRuleContext<StateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public InitialStateDescrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialStateDescr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterInitialStateDescr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitInitialStateDescr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialStateDescr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialStateDescrContext initialStateDescr() {
		InitialStateDescrContext _localctx = new InitialStateDescrContext(Context, State);
		EnterRule(_localctx, 156, RULE_initialStateDescr);
		int _la;
		try {
			State = 912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LPAREN || _la==LBRACKET) {
					{
					{
					State = 901;
					fTheoryFormula();
					}
					}
					State = 906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 907;
				Match(LPAREN);
				State = 908;
				Match(STATE_NAME);
				State = 909;
				stateName();
				State = 910;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FTheoryFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFTheoryFormulaContext simpleFTheoryFormula() {
			return GetRuleContext<SimpleFTheoryFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		public FTheoryFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fTheoryFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFTheoryFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FTheoryFormulaContext fTheoryFormula() {
		FTheoryFormulaContext _localctx = new FTheoryFormulaContext(Context, State);
		EnterRule(_localctx, 158, RULE_fTheoryFormula);
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914;
				simpleFTheoryFormula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915;
				Match(LPAREN);
				State = 916;
				Match(FORALL);
				State = 917;
				Match(LPAREN);
				State = 918;
				typedVariableList();
				State = 919;
				Match(RPAREN);
				State = 920;
				simpleFTheoryFormula();
				State = 921;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFTheoryFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateFormulaContext predicateFormula() {
			return GetRuleContext<PredicateFormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(EPDDLParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(EPDDLParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(EPDDLParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(EPDDLParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KnowsWhetherContext knowsWhether() {
			return GetRuleContext<KnowsWhetherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(EPDDLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public SimpleFTheoryFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFTheoryFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterSimpleFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitSimpleFTheoryFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFTheoryFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFTheoryFormulaContext simpleFTheoryFormula() {
		SimpleFTheoryFormulaContext _localctx = new SimpleFTheoryFormulaContext(Context, State);
		EnterRule(_localctx, 160, RULE_simpleFTheoryFormula);
		try {
			State = 953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 925;
				predicateFormula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 926;
				Match(LBRACKET);
				State = 927;
				Match(ALL);
				State = 928;
				Match(RBRACKET);
				State = 929;
				predicateFormula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 930;
				Match(LBRACKET);
				State = 931;
				Match(ALL);
				State = 932;
				Match(RBRACKET);
				State = 933;
				Match(LBRACKET);
				State = 934;
				agentName();
				State = 935;
				Match(RBRACKET);
				State = 936;
				predicateFormula();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 938;
				Match(LBRACKET);
				State = 939;
				Match(ALL);
				State = 940;
				Match(RBRACKET);
				State = 941;
				knowsWhether();
				State = 942;
				predicateFormula();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 944;
				Match(LBRACKET);
				State = 945;
				Match(ALL);
				State = 946;
				Match(RBRACKET);
				State = 947;
				Match(LPAREN);
				State = 948;
				Match(NOT);
				State = 949;
				knowsWhether();
				State = 950;
				predicateFormula();
				State = 951;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EPDDLParser.NAME, 0); }
		public ActionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeNameContext actionTypeName() {
		ActionTypeNameContext _localctx = new ActionTypeNameContext(Context, State);
		EnterRule(_localctx, 162, RULE_actionTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(EPDDLParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 164, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			Match(LPAREN);
			State = 958;
			Match(VARIABLE);
			State = 959;
			Match(ASSIGN);
			State = 960;
			expression();
			State = 961;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostconditionBlockContext postconditionBlock() {
			return GetRuleContext<PostconditionBlockContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_expression);
		try {
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 963;
				term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 964;
				formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 965;
				postconditionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormulaOrEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		public FormulaOrEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formulaOrEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterFormulaOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitFormulaOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormulaOrEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaOrEmptyContext formulaOrEmpty() {
		FormulaOrEmptyContext _localctx = new FormulaOrEmptyContext(Context, State);
		EnterRule(_localctx, 168, RULE_formulaOrEmpty);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case LPAREN:
			case LBRACKET:
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 968;
				formula();
				}
				break;
			case TRIVIAL_DEF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 969;
				Match(TRIVIAL_DEF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsConditionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniversalObsCondContext universalObsCond() {
			return GetRuleContext<UniversalObsCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionContext obsCondition() {
			return GetRuleContext<ObsConditionContext>(0);
		}
		public ObsConditionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obsConditionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObsConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObsConditionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObsConditionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObsConditionDefContext obsConditionDef() {
		ObsConditionDefContext _localctx = new ObsConditionDefContext(Context, State);
		EnterRule(_localctx, 170, RULE_obsConditionDef);
		try {
			State = 974;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972;
				universalObsCond();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 973;
				obsCondition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EPDDLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EPDDLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(EPDDLParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EPDDLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EPDDLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionContext[] obsCondition() {
			return GetRuleContexts<ObsConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObsConditionContext obsCondition(int i) {
			return GetRuleContext<ObsConditionContext>(i);
		}
		public UniversalObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universalObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterUniversalObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitUniversalObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalObsCondContext universalObsCond() {
		UniversalObsCondContext _localctx = new UniversalObsCondContext(Context, State);
		EnterRule(_localctx, 172, RULE_universalObsCond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			Match(LPAREN);
			State = 977;
			Match(FORALL);
			State = 978;
			Match(LPAREN);
			State = 979;
			Match(VARIABLE);
			State = 980;
			Match(DASH);
			State = 981;
			type();
			State = 982;
			Match(RPAREN);
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 983;
				obsCondition();
				}
				}
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 988;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrivialObsCondContext trivialObsCond() {
			return GetRuleContext<TrivialObsCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfObsCondContext ifObsCond() {
			return GetRuleContext<IfObsCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherwiseObsCondContext otherwiseObsCond() {
			return GetRuleContext<OtherwiseObsCondContext>(0);
		}
		public ObsConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obsCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObsCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObsCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObsCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObsConditionContext obsCondition() {
		ObsConditionContext _localctx = new ObsConditionContext(Context, State);
		EnterRule(_localctx, 174, RULE_obsCondition);
		try {
			State = 993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 990;
				trivialObsCond();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 991;
				ifObsCond();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 992;
				otherwiseObsCond();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent() {
			return GetRuleContext<ObservingAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup() {
			return GetRuleContext<ObservingAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public TrivialObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTrivialObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTrivialObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialObsCondContext trivialObsCond() {
		TrivialObsCondContext _localctx = new TrivialObsCondContext(Context, State);
		EnterRule(_localctx, 176, RULE_trivialObsCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			Match(LPAREN);
			State = 996;
			observingAgent();
			State = 997;
			observingAgentGroup();
			State = 998;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EPDDLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent() {
			return GetRuleContext<ObservingAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup() {
			return GetRuleContext<ObservingAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public IfObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterIfObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitIfObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfObsCondContext ifObsCond() {
		IfObsCondContext _localctx = new IfObsCondContext(Context, State);
		EnterRule(_localctx, 178, RULE_ifObsCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			Match(LPAREN);
			State = 1001;
			Match(IF);
			State = 1002;
			formula();
			State = 1003;
			observingAgent();
			State = 1004;
			observingAgentGroup();
			State = 1005;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherwiseObsCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(EPDDLParser.OTHERWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent() {
			return GetRuleContext<ObservingAgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup() {
			return GetRuleContext<ObservingAgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public OtherwiseObsCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwiseObsCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterOtherwiseObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitOtherwiseObsCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherwiseObsCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherwiseObsCondContext otherwiseObsCond() {
		OtherwiseObsCondContext _localctx = new OtherwiseObsCondContext(Context, State);
		EnterRule(_localctx, 180, RULE_otherwiseObsCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			Match(LPAREN);
			State = 1008;
			Match(OTHERWISE);
			State = 1009;
			observingAgent();
			State = 1010;
			observingAgentGroup();
			State = 1011;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservingAgentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME() { return GetToken(EPDDLParser.AGENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EPDDLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public ObservingAgentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observingAgent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObservingAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObservingAgent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObservingAgent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObservingAgentContext observingAgent() {
		ObservingAgentContext _localctx = new ObservingAgentContext(Context, State);
		EnterRule(_localctx, 182, RULE_observingAgent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 161L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservingAgentGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext[] observingAgent() {
			return GetRuleContexts<ObservingAgentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentContext observingAgent(int i) {
			return GetRuleContext<ObservingAgentContext>(i);
		}
		public ObservingAgentGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observingAgentGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterObservingAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitObservingAgentGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObservingAgentGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObservingAgentGroupContext observingAgentGroup() {
		ObservingAgentGroupContext _localctx = new ObservingAgentGroupContext(Context, State);
		EnterRule(_localctx, 184, RULE_observingAgentGroup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015;
			observingAgent();
			State = 1019;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1016;
					observingAgent();
					}
					} 
				}
				State = 1021;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentGroupNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME() { return GetToken(EPDDLParser.AGENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EPDDLParser.ALL, 0); }
		public AgentGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentGroupName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterAgentGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitAgentGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentGroupName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentGroupNameContext agentGroupName() {
		AgentGroupNameContext _localctx = new AgentGroupNameContext(Context, State);
		EnterRule(_localctx, 186, RULE_agentGroupName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==AGENT_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateNameContext predicateName() {
			return GetRuleContext<PredicateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 188, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			Match(LPAREN);
			State = 1025;
			predicateName();
			State = 1029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 11L) != 0)) {
				{
				{
				State = 1026;
				term();
				}
				}
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1032;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeGroupsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSERVABILITY_GROUPS() { return GetToken(EPDDLParser.OBSERVABILITY_GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext[] observingAgentGroup() {
			return GetRuleContexts<ObservingAgentGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObservingAgentGroupContext observingAgentGroup(int i) {
			return GetRuleContext<ObservingAgentGroupContext>(i);
		}
		public ActionTypeGroupsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeGroupsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeGroupsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeGroupsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeGroupsDefContext actionTypeGroupsDef() {
		ActionTypeGroupsDefContext _localctx = new ActionTypeGroupsDefContext(Context, State);
		EnterRule(_localctx, 190, RULE_actionTypeGroupsDef);
		int _la;
		try {
			State = 1044;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBSERVABILITY_GROUPS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034;
				Match(OBSERVABILITY_GROUPS);
				State = 1035;
				Match(LPAREN);
				State = 1039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 161L) != 0)) {
					{
					{
					State = 1036;
					observingAgentGroup();
					}
					}
					State = 1041;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1042;
				Match(RPAREN);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeEventsDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EPDDLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventSignatureContext[] eventSignature() {
			return GetRuleContexts<EventSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventSignatureContext eventSignature(int i) {
			return GetRuleContext<EventSignatureContext>(i);
		}
		public ActionTypeEventsDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeEventsDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeEventsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeEventsDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeEventsDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeEventsDefContext actionTypeEventsDef() {
		ActionTypeEventsDefContext _localctx = new ActionTypeEventsDefContext(Context, State);
		EnterRule(_localctx, 192, RULE_actionTypeEventsDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(EVENT);
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1047;
				eventSignature();
				}
				}
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public EventSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventSignatureContext eventSignature() {
		EventSignatureContext _localctx = new EventSignatureContext(Context, State);
		EnterRule(_localctx, 194, RULE_eventSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(LPAREN);
			State = 1053;
			eventName();
			State = 1057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 1054;
				parameter();
				}
				}
				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1060;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeRelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONS() { return GetToken(EPDDLParser.RELATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionRelationsContext actionRelations() {
			return GetRuleContext<ActionRelationsContext>(0);
		}
		public ActionTypeRelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeRelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeRelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeRelDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeRelDefContext actionTypeRelDef() {
		ActionTypeRelDefContext _localctx = new ActionTypeRelDefContext(Context, State);
		EnterRule(_localctx, 196, RULE_actionTypeRelDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1062;
			Match(RELATIONS);
			State = 1063;
			actionRelations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionRelationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventRelationContext[] eventRelation() {
			return GetRuleContexts<EventRelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventRelationContext eventRelation(int i) {
			return GetRuleContext<EventRelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIVIAL_DEF() { return GetToken(EPDDLParser.TRIVIAL_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public ActionRelationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionRelations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionRelations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionRelations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionRelationsContext actionRelations() {
		ActionRelationsContext _localctx = new ActionRelationsContext(Context, State);
		EnterRule(_localctx, 198, RULE_actionRelations);
		int _la;
		try {
			State = 1073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1065;
					eventRelation();
					}
					}
					State = 1068;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LPAREN );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1070;
				Match(LPAREN);
				State = 1071;
				Match(TRIVIAL_DEF);
				State = 1072;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentGroupContext agentGroup() {
			return GetRuleContext<AgentGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNamePairContext[] eventNamePair() {
			return GetRuleContexts<EventNamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventNamePairContext eventNamePair(int i) {
			return GetRuleContext<EventNamePairContext>(i);
		}
		public EventRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventRelationContext eventRelation() {
		EventRelationContext _localctx = new EventRelationContext(Context, State);
		EnterRule(_localctx, 200, RULE_eventRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			Match(LPAREN);
			State = 1076;
			agentGroup();
			State = 1078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1077;
				eventNamePair();
				}
				}
				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN );
			State = 1082;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext[] eventName() {
			return GetRuleContexts<EventNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName(int i) {
			return GetRuleContext<EventNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		public EventNamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventNamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterEventNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitEventNamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventNamePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventNamePairContext eventNamePair() {
		EventNamePairContext _localctx = new EventNamePairContext(Context, State);
		EnterRule(_localctx, 202, RULE_eventNamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			Match(LPAREN);
			State = 1085;
			eventName();
			State = 1086;
			eventName();
			State = 1087;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeDesignDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESIGNATED() { return GetToken(EPDDLParser.DESIGNATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext[] eventName() {
			return GetRuleContexts<EventNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName(int i) {
			return GetRuleContext<EventNameContext>(i);
		}
		public ActionTypeDesignDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionTypeDesignDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterActionTypeDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitActionTypeDesignDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionTypeDesignDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeDesignDefContext actionTypeDesignDef() {
		ActionTypeDesignDefContext _localctx = new ActionTypeDesignDefContext(Context, State);
		EnterRule(_localctx, 204, RULE_actionTypeDesignDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			Match(DESIGNATED);
			State = 1090;
			Match(LPAREN);
			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 1091;
				eventName();
				}
				}
				State = 1096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1097;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedAgentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AGENT_NAME() { return GetTokens(EPDDLParser.AGENT_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGENT_NAME(int i) {
			return GetToken(EPDDLParser.AGENT_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(EPDDLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedAgentListContext typedAgentList() {
			return GetRuleContext<TypedAgentListContext>(0);
		}
		public TypedAgentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedAgentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterTypedAgentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitTypedAgentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedAgentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedAgentListContext typedAgentList() {
		TypedAgentListContext _localctx = new TypedAgentListContext(Context, State);
		EnterRule(_localctx, 206, RULE_typedAgentList);
		int _la;
		try {
			State = 1116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 1099;
					Match(AGENT_NAME);
					}
					}
					State = 1104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1105;
				Match(AGENT_NAME);
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AGENT_NAME) {
					{
					{
					State = 1106;
					Match(AGENT_NAME);
					}
					}
					State = 1111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1112;
				Match(DASH);
				State = 1113;
				type();
				State = 1114;
				typedAgentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KnowsWhetherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(EPDDLParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITY_NAME() { return GetToken(EPDDLParser.MODALITY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentNameContext agentName() {
			return GetRuleContext<AgentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(EPDDLParser.RBRACKET, 0); }
		public KnowsWhetherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_knowsWhether; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterKnowsWhether(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitKnowsWhether(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnowsWhether(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KnowsWhetherContext knowsWhether() {
		KnowsWhetherContext _localctx = new KnowsWhetherContext(Context, State);
		EnterRule(_localctx, 208, RULE_knowsWhether);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(LBRACKET);
			State = 1119;
			Match(MODALITY_NAME);
			State = 1120;
			agentName();
			State = 1121;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequirementKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEL() { return GetToken(EPDDLParser.DEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPING() { return GetToken(EPDDLParser.TYPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALITY() { return GetToken(EPDDLParser.EQUALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_AGENT() { return GetToken(EPDDLParser.MULTI_AGENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONTIC_ACTIONS() { return GetToken(EPDDLParser.ONTIC_ACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTENTIAL_FORMULAE() { return GetToken(EPDDLParser.EXISTENTIAL_FORMULAE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIVERSAL_FORMULAE() { return GetToken(EPDDLParser.UNIVERSAL_FORMULAE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIVERSAL_POSTCONDITIONS() { return GetToken(EPDDLParser.UNIVERSAL_POSTCONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODAL_PRECONDITIONS() { return GetToken(EPDDLParser.MODAL_PRECONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODAL_POSTCONDITIONS() { return GetToken(EPDDLParser.MODAL_POSTCONDITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODALITIES() { return GetToken(EPDDLParser.MODALITIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONTIC_CHANGE() { return GetToken(EPDDLParser.ONTIC_CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMON_KNOWLEDGE() { return GetToken(EPDDLParser.COMMON_KNOWLEDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_COMMON_KNOWLEDGE() { return GetToken(EPDDLParser.DYNAMIC_COMMON_KNOWLEDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINITARY_S5_THEORY() { return GetToken(EPDDLParser.FINITARY_S5_THEORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EPDDLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_PRECONDITIONS_DEPTH() { return GetToken(EPDDLParser.MAX_PRECONDITIONS_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(EPDDLParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EPDDLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_POSTCONDITIONS_DEPTH() { return GetToken(EPDDLParser.MAX_POSTCONDITIONS_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_MODAL_DEPTH() { return GetToken(EPDDLParser.MAX_MODAL_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINITARY_THEORY() { return GetToken(EPDDLParser.FINITARY_THEORY, 0); }
		public RequirementKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requirementKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.EnterRequirementKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEPDDLParserListener typedListener = listener as IEPDDLParserListener;
			if (typedListener != null) typedListener.ExitRequirementKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEPDDLParserVisitor<TResult> typedVisitor = visitor as IEPDDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequirementKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequirementKeyContext requirementKey() {
		RequirementKeyContext _localctx = new RequirementKeyContext(Context, State);
		EnterRule(_localctx, 210, RULE_requirementKey);
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1123;
				Match(DEL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1124;
				Match(TYPING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1125;
				Match(EQUALITY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1126;
				Match(MULTI_AGENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1127;
				Match(ONTIC_ACTIONS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1128;
				Match(EXISTENTIAL_FORMULAE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1129;
				Match(UNIVERSAL_FORMULAE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1130;
				Match(UNIVERSAL_POSTCONDITIONS);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1131;
				Match(MODAL_PRECONDITIONS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1132;
				Match(MODAL_POSTCONDITIONS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1133;
				Match(MODALITIES);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1134;
				Match(ONTIC_CHANGE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1135;
				Match(COMMON_KNOWLEDGE);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1136;
				Match(DYNAMIC_COMMON_KNOWLEDGE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1137;
				Match(FINITARY_S5_THEORY);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1138;
				Match(LPAREN);
				State = 1139;
				Match(MAX_PRECONDITIONS_DEPTH);
				State = 1140;
				Match(INT);
				State = 1141;
				Match(RPAREN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1142;
				Match(LPAREN);
				State = 1143;
				Match(MAX_POSTCONDITIONS_DEPTH);
				State = 1144;
				Match(INT);
				State = 1145;
				Match(RPAREN);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1146;
				Match(LPAREN);
				State = 1147;
				Match(MAX_MODAL_DEPTH);
				State = 1148;
				Match(INT);
				State = 1149;
				Match(RPAREN);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1150;
				Match(FINITARY_THEORY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,91,1154,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,1,0,1,0,1,0,3,0,216,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,225,
		8,1,10,1,12,1,228,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,239,8,2,
		10,2,12,2,242,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,253,8,3,10,3,
		12,3,256,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,266,8,4,1,5,1,5,1,5,1,
		5,1,5,3,5,273,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,285,8,6,
		1,7,1,7,1,7,4,7,290,8,7,11,7,12,7,291,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,4,10,309,8,10,11,10,12,10,310,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,5,11,321,8,11,10,11,12,11,324,9,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,4,13,337,8,13,11,13,
		12,13,338,1,13,1,13,1,14,1,14,1,14,5,14,346,8,14,10,14,12,14,349,9,14,
		1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,4,16,361,8,16,11,16,
		12,16,362,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,5,20,
		390,8,20,10,20,12,20,393,9,20,1,20,1,20,1,21,1,21,1,21,5,21,400,8,21,10,
		21,12,21,403,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,24,1,24,1,24,3,24,421,8,24,1,25,1,25,1,25,5,25,426,8,25,
		10,25,12,25,429,9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,3,26,445,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,464,8,27,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,
		1,32,1,32,3,32,498,8,32,1,33,1,33,1,33,1,33,5,33,504,8,33,10,33,12,33,
		507,9,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,5,35,516,8,35,10,35,12,35,
		519,9,35,1,35,3,35,522,8,35,1,36,1,36,5,36,526,8,36,10,36,12,36,529,9,
		36,1,36,1,36,1,36,1,36,5,36,535,8,36,10,36,12,36,538,9,36,1,37,1,37,5,
		37,542,8,37,10,37,12,37,545,9,37,1,37,1,37,1,37,1,37,3,37,551,8,37,1,37,
		3,37,554,8,37,1,38,1,38,3,38,558,8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,5,40,572,8,40,10,40,12,40,575,9,40,1,40,1,
		40,1,40,1,40,1,40,1,40,5,40,583,8,40,10,40,12,40,586,9,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
		40,618,8,40,1,41,1,41,1,41,1,41,5,41,624,8,41,10,41,12,41,627,9,41,1,41,
		1,41,1,41,3,41,632,8,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,640,8,42,1,
		43,1,43,1,43,5,43,645,8,43,10,43,12,43,648,9,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,3,43,658,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,4,44,669,8,44,11,44,12,44,670,1,44,1,44,1,44,1,44,1,44,4,44,678,8,
		44,11,44,12,44,679,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,5,44,708,8,44,10,44,12,44,711,9,44,1,44,1,44,3,44,715,8,44,1,45,
		1,45,1,45,1,45,1,45,1,45,1,46,1,46,3,46,725,8,46,1,47,1,47,3,47,729,8,
		47,1,48,1,48,3,48,733,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
		1,49,3,49,745,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
		50,757,8,50,1,51,1,51,3,51,761,8,51,1,52,1,52,1,52,3,52,766,8,52,1,53,
		1,53,5,53,770,8,53,10,53,12,53,773,9,53,1,54,1,54,1,55,1,55,1,56,1,56,
		1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,
		1,64,1,64,1,65,1,65,1,65,5,65,800,8,65,10,65,12,65,803,9,65,1,65,1,65,
		1,66,1,66,3,66,809,8,66,1,67,1,67,1,67,4,67,814,8,67,11,67,12,67,815,1,
		67,1,67,1,68,1,68,1,68,1,69,4,69,824,8,69,11,69,12,69,825,1,69,1,69,1,
		69,3,69,831,8,69,1,70,1,70,1,70,4,70,836,8,70,11,70,12,70,837,1,70,1,70,
		1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,73,4,73,851,8,73,11,73,12,73,
		852,1,73,1,73,1,73,3,73,858,8,73,1,74,1,74,1,74,1,74,5,74,864,8,74,10,
		74,12,74,867,9,74,1,74,1,74,1,74,1,75,1,75,1,75,4,75,875,8,75,11,75,12,
		75,876,1,75,1,75,1,76,1,76,1,76,1,76,5,76,885,8,76,10,76,12,76,888,9,76,
		1,76,1,76,3,76,892,8,76,1,77,1,77,1,77,1,77,1,77,1,77,3,77,900,8,77,1,
		78,5,78,903,8,78,10,78,12,78,906,9,78,1,78,1,78,1,78,1,78,1,78,3,78,913,
		8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,924,8,79,1,80,1,
		80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
		80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,954,
		8,80,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,3,83,967,8,
		83,1,84,1,84,3,84,971,8,84,1,85,1,85,3,85,975,8,85,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,4,86,985,8,86,11,86,12,86,986,1,86,1,86,1,87,1,87,
		1,87,3,87,994,8,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,
		89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,92,1,92,5,92,1018,8,
		92,10,92,12,92,1021,9,92,1,93,1,93,1,94,1,94,1,94,5,94,1028,8,94,10,94,
		12,94,1031,9,94,1,94,1,94,1,95,1,95,1,95,5,95,1038,8,95,10,95,12,95,1041,
		9,95,1,95,1,95,3,95,1045,8,95,1,96,1,96,4,96,1049,8,96,11,96,12,96,1050,
		1,97,1,97,1,97,5,97,1056,8,97,10,97,12,97,1059,9,97,1,97,1,97,1,98,1,98,
		1,98,1,99,4,99,1067,8,99,11,99,12,99,1068,1,99,1,99,1,99,3,99,1074,8,99,
		1,100,1,100,1,100,4,100,1079,8,100,11,100,12,100,1080,1,100,1,100,1,101,
		1,101,1,101,1,101,1,101,1,102,1,102,1,102,5,102,1093,8,102,10,102,12,102,
		1096,9,102,1,102,1,102,1,103,5,103,1101,8,103,10,103,12,103,1104,9,103,
		1,103,1,103,5,103,1108,8,103,10,103,12,103,1111,9,103,1,103,1,103,1,103,
		1,103,3,103,1117,8,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,105,3,105,1152,8,105,1,105,0,0,106,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
		152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
		188,190,192,194,196,198,200,202,204,206,208,210,0,3,2,0,67,71,74,74,3,
		0,72,72,77,77,79,79,2,0,72,72,77,77,1187,0,215,1,0,0,0,2,217,1,0,0,0,4,
		231,1,0,0,0,6,245,1,0,0,0,8,265,1,0,0,0,10,272,1,0,0,0,12,284,1,0,0,0,
		14,286,1,0,0,0,16,295,1,0,0,0,18,300,1,0,0,0,20,305,1,0,0,0,22,314,1,0,
		0,0,24,328,1,0,0,0,26,333,1,0,0,0,28,342,1,0,0,0,30,352,1,0,0,0,32,357,
		1,0,0,0,34,366,1,0,0,0,36,371,1,0,0,0,38,381,1,0,0,0,40,386,1,0,0,0,42,
		396,1,0,0,0,44,406,1,0,0,0,46,414,1,0,0,0,48,420,1,0,0,0,50,422,1,0,0,
		0,52,444,1,0,0,0,54,463,1,0,0,0,56,465,1,0,0,0,58,475,1,0,0,0,60,484,1,
		0,0,0,62,489,1,0,0,0,64,497,1,0,0,0,66,499,1,0,0,0,68,510,1,0,0,0,70,521,
		1,0,0,0,72,536,1,0,0,0,74,553,1,0,0,0,76,557,1,0,0,0,78,559,1,0,0,0,80,
		617,1,0,0,0,82,631,1,0,0,0,84,639,1,0,0,0,86,657,1,0,0,0,88,714,1,0,0,
		0,90,716,1,0,0,0,92,724,1,0,0,0,94,728,1,0,0,0,96,732,1,0,0,0,98,744,1,
		0,0,0,100,756,1,0,0,0,102,760,1,0,0,0,104,765,1,0,0,0,106,767,1,0,0,0,
		108,774,1,0,0,0,110,776,1,0,0,0,112,778,1,0,0,0,114,780,1,0,0,0,116,782,
		1,0,0,0,118,784,1,0,0,0,120,786,1,0,0,0,122,788,1,0,0,0,124,790,1,0,0,
		0,126,792,1,0,0,0,128,794,1,0,0,0,130,796,1,0,0,0,132,808,1,0,0,0,134,
		810,1,0,0,0,136,819,1,0,0,0,138,830,1,0,0,0,140,832,1,0,0,0,142,841,1,
		0,0,0,144,846,1,0,0,0,146,857,1,0,0,0,148,859,1,0,0,0,150,871,1,0,0,0,
		152,891,1,0,0,0,154,899,1,0,0,0,156,912,1,0,0,0,158,923,1,0,0,0,160,953,
		1,0,0,0,162,955,1,0,0,0,164,957,1,0,0,0,166,966,1,0,0,0,168,970,1,0,0,
		0,170,974,1,0,0,0,172,976,1,0,0,0,174,993,1,0,0,0,176,995,1,0,0,0,178,
		1000,1,0,0,0,180,1007,1,0,0,0,182,1013,1,0,0,0,184,1015,1,0,0,0,186,1022,
		1,0,0,0,188,1024,1,0,0,0,190,1044,1,0,0,0,192,1046,1,0,0,0,194,1052,1,
		0,0,0,196,1062,1,0,0,0,198,1073,1,0,0,0,200,1075,1,0,0,0,202,1084,1,0,
		0,0,204,1089,1,0,0,0,206,1116,1,0,0,0,208,1118,1,0,0,0,210,1151,1,0,0,
		0,212,216,3,2,1,0,213,216,3,4,2,0,214,216,3,6,3,0,215,212,1,0,0,0,215,
		213,1,0,0,0,215,214,1,0,0,0,216,1,1,0,0,0,217,218,5,84,0,0,218,219,5,63,
		0,0,219,220,5,84,0,0,220,221,5,64,0,0,221,222,3,112,56,0,222,226,5,85,
		0,0,223,225,3,8,4,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,
		227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,85,0,0,230,3,1,0,
		0,0,231,232,5,84,0,0,232,233,5,63,0,0,233,234,5,84,0,0,234,235,5,65,0,
		0,235,236,3,116,58,0,236,240,5,85,0,0,237,239,3,10,5,0,238,237,1,0,0,0,
		239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,
		1,0,0,0,243,244,5,85,0,0,244,5,1,0,0,0,245,246,5,84,0,0,246,247,5,63,0,
		0,247,248,5,84,0,0,248,249,5,66,0,0,249,250,3,114,57,0,250,254,5,85,0,
		0,251,253,3,12,6,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,
		255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,85,0,0,258,7,1,0,
		0,0,259,266,3,14,7,0,260,266,3,28,14,0,261,266,3,30,15,0,262,266,3,32,
		16,0,263,266,3,40,20,0,264,266,3,36,18,0,265,259,1,0,0,0,265,260,1,0,0,
		0,265,261,1,0,0,0,265,262,1,0,0,0,265,263,1,0,0,0,265,264,1,0,0,0,266,
		9,1,0,0,0,267,273,3,28,14,0,268,273,3,40,20,0,269,273,3,42,21,0,270,273,
		3,56,28,0,271,273,3,44,22,0,272,267,1,0,0,0,272,268,1,0,0,0,272,269,1,
		0,0,0,272,270,1,0,0,0,272,271,1,0,0,0,273,11,1,0,0,0,274,285,3,16,8,0,
		275,285,3,28,14,0,276,285,3,40,20,0,277,285,3,18,9,0,278,285,3,20,10,0,
		279,285,3,24,12,0,280,285,3,26,13,0,281,285,3,60,30,0,282,285,3,58,29,
		0,283,285,3,62,31,0,284,274,1,0,0,0,284,275,1,0,0,0,284,276,1,0,0,0,284,
		277,1,0,0,0,284,278,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,284,281,1,
		0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,13,1,0,0,0,286,287,5,84,0,0,
		287,289,5,15,0,0,288,290,3,116,58,0,289,288,1,0,0,0,290,291,1,0,0,0,291,
		289,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,5,85,0,0,294,15,1,
		0,0,0,295,296,5,84,0,0,296,297,5,30,0,0,297,298,3,112,56,0,298,299,5,85,
		0,0,299,17,1,0,0,0,300,301,5,84,0,0,301,302,5,20,0,0,302,303,3,206,103,
		0,303,304,5,85,0,0,304,19,1,0,0,0,305,306,5,84,0,0,306,308,5,21,0,0,307,
		309,3,22,11,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,
		1,0,0,0,311,312,1,0,0,0,312,313,5,85,0,0,313,21,1,0,0,0,314,315,5,84,0,
		0,315,316,3,186,93,0,316,317,5,56,0,0,317,318,5,84,0,0,318,322,3,126,63,
		0,319,321,3,126,63,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,
		323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,85,0,0,326,327,5,
		85,0,0,327,23,1,0,0,0,328,329,5,84,0,0,329,330,5,18,0,0,330,331,3,72,36,
		0,331,332,5,85,0,0,332,25,1,0,0,0,333,334,5,84,0,0,334,336,5,19,0,0,335,
		337,3,130,65,0,336,335,1,0,0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,339,
		1,0,0,0,339,340,1,0,0,0,340,341,5,85,0,0,341,27,1,0,0,0,342,343,5,84,0,
		0,343,347,5,16,0,0,344,346,3,210,105,0,345,344,1,0,0,0,346,349,1,0,0,0,
		347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,
		5,85,0,0,351,29,1,0,0,0,352,353,5,84,0,0,353,354,5,17,0,0,354,355,3,72,
		36,0,355,356,5,85,0,0,356,31,1,0,0,0,357,358,5,84,0,0,358,360,5,10,0,0,
		359,361,3,34,17,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
		363,1,0,0,0,363,364,1,0,0,0,364,365,5,85,0,0,365,33,1,0,0,0,366,367,5,
		84,0,0,367,368,3,110,55,0,368,369,3,74,37,0,369,370,5,85,0,0,370,35,1,
		0,0,0,371,372,5,84,0,0,372,373,5,12,0,0,373,374,3,122,61,0,374,375,3,38,
		19,0,375,376,3,64,32,0,376,377,3,68,34,0,377,378,3,66,33,0,378,379,3,70,
		35,0,379,380,5,85,0,0,380,37,1,0,0,0,381,382,5,13,0,0,382,383,5,84,0,0,
		383,384,3,74,37,0,384,385,5,85,0,0,385,39,1,0,0,0,386,387,5,84,0,0,387,
		391,5,11,0,0,388,390,3,128,64,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,
		1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,395,5,85,0,
		0,395,41,1,0,0,0,396,397,5,84,0,0,397,401,5,14,0,0,398,400,3,184,92,0,
		399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,
		1,0,0,0,403,401,1,0,0,0,404,405,5,85,0,0,405,43,1,0,0,0,406,407,5,84,0,
		0,407,408,5,1,0,0,408,409,3,124,62,0,409,410,3,38,19,0,410,411,3,46,23,
		0,411,412,3,48,24,0,412,413,5,85,0,0,413,45,1,0,0,0,414,415,5,2,0,0,415,
		416,3,168,84,0,416,47,1,0,0,0,417,418,5,3,0,0,418,421,3,50,25,0,419,421,
		1,0,0,0,420,417,1,0,0,0,420,419,1,0,0,0,421,49,1,0,0,0,422,423,5,84,0,
		0,423,427,5,47,0,0,424,426,3,52,26,0,425,424,1,0,0,0,426,429,1,0,0,0,427,
		425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,431,5,
		85,0,0,431,51,1,0,0,0,432,445,3,54,27,0,433,434,5,84,0,0,434,435,5,53,
		0,0,435,436,5,84,0,0,436,437,3,74,37,0,437,438,5,85,0,0,438,439,3,54,27,
		0,439,440,5,85,0,0,440,445,1,0,0,0,441,442,5,84,0,0,442,443,5,79,0,0,443,
		445,5,85,0,0,444,432,1,0,0,0,444,433,1,0,0,0,444,441,1,0,0,0,445,53,1,
		0,0,0,446,447,5,84,0,0,447,448,5,58,0,0,448,449,3,168,84,0,449,450,3,154,
		77,0,450,451,5,85,0,0,451,464,1,0,0,0,452,453,5,84,0,0,453,454,5,59,0,
		0,454,455,3,168,84,0,455,456,3,154,77,0,456,457,5,85,0,0,457,464,1,0,0,
		0,458,459,5,84,0,0,459,460,5,60,0,0,460,461,3,154,77,0,461,462,5,85,0,
		0,462,464,1,0,0,0,463,446,1,0,0,0,463,452,1,0,0,0,463,458,1,0,0,0,464,
		55,1,0,0,0,465,466,5,84,0,0,466,467,5,25,0,0,467,468,3,162,81,0,468,469,
		3,38,19,0,469,470,3,190,95,0,470,471,3,192,96,0,471,472,3,196,98,0,472,
		473,3,204,102,0,473,474,5,85,0,0,474,57,1,0,0,0,475,476,5,84,0,0,476,477,
		5,4,0,0,477,478,3,118,59,0,478,479,3,134,67,0,479,480,3,136,68,0,480,481,
		3,144,72,0,481,482,3,150,75,0,482,483,5,85,0,0,483,59,1,0,0,0,484,485,
		5,84,0,0,485,486,5,5,0,0,486,487,3,156,78,0,487,488,5,85,0,0,488,61,1,
		0,0,0,489,490,5,84,0,0,490,491,5,6,0,0,491,492,3,80,40,0,492,493,5,85,
		0,0,493,63,1,0,0,0,494,495,5,7,0,0,495,498,3,82,41,0,496,498,1,0,0,0,497,
		494,1,0,0,0,497,496,1,0,0,0,498,65,1,0,0,0,499,500,5,25,0,0,500,501,5,
		84,0,0,501,505,3,162,81,0,502,504,3,164,82,0,503,502,1,0,0,0,504,507,1,
		0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,
		508,509,5,85,0,0,509,67,1,0,0,0,510,511,5,2,0,0,511,512,3,168,84,0,512,
		69,1,0,0,0,513,517,5,24,0,0,514,516,3,170,85,0,515,514,1,0,0,0,516,519,
		1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,522,1,0,0,0,519,517,1,0,0,
		0,520,522,1,0,0,0,521,513,1,0,0,0,521,520,1,0,0,0,522,71,1,0,0,0,523,527,
		5,76,0,0,524,526,5,76,0,0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,
		0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,527,1,0,0,0,530,531,5,56,0,0,531,
		532,3,76,38,0,532,533,3,72,36,0,533,535,1,0,0,0,534,523,1,0,0,0,535,538,
		1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,73,1,0,0,0,538,536,1,0,0,0,
		539,543,5,79,0,0,540,542,5,79,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,
		541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,547,5,
		83,0,0,547,548,3,76,38,0,548,549,3,74,37,0,549,551,1,0,0,0,550,539,1,0,
		0,0,550,551,1,0,0,0,551,554,1,0,0,0,552,554,1,0,0,0,553,550,1,0,0,0,553,
		552,1,0,0,0,554,75,1,0,0,0,555,558,3,78,39,0,556,558,5,76,0,0,557,555,
		1,0,0,0,557,556,1,0,0,0,558,77,1,0,0,0,559,560,7,0,0,0,560,79,1,0,0,0,
		561,562,5,84,0,0,562,563,5,48,0,0,563,564,3,80,40,0,564,565,3,80,40,0,
		565,566,5,85,0,0,566,618,1,0,0,0,567,568,5,84,0,0,568,569,5,49,0,0,569,
		573,3,80,40,0,570,572,3,80,40,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,
		1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,573,1,0,0,0,576,577,5,85,0,
		0,577,618,1,0,0,0,578,579,5,84,0,0,579,580,5,50,0,0,580,584,3,80,40,0,
		581,583,3,80,40,0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,
		585,1,0,0,0,585,587,1,0,0,0,586,584,1,0,0,0,587,588,5,85,0,0,588,618,1,
		0,0,0,589,590,5,84,0,0,590,591,5,51,0,0,591,592,3,80,40,0,592,593,5,85,
		0,0,593,618,1,0,0,0,594,595,5,84,0,0,595,596,5,52,0,0,596,597,5,84,0,0,
		597,598,3,74,37,0,598,599,5,85,0,0,599,600,3,80,40,0,600,601,5,85,0,0,
		601,618,1,0,0,0,602,603,5,84,0,0,603,604,5,53,0,0,604,605,5,84,0,0,605,
		606,3,74,37,0,606,607,5,85,0,0,607,608,3,80,40,0,608,609,5,85,0,0,609,
		618,1,0,0,0,610,611,3,96,48,0,611,612,3,80,40,0,612,618,1,0,0,0,613,618,
		3,88,44,0,614,618,3,90,45,0,615,618,5,54,0,0,616,618,5,55,0,0,617,561,
		1,0,0,0,617,567,1,0,0,0,617,578,1,0,0,0,617,589,1,0,0,0,617,594,1,0,0,
		0,617,602,1,0,0,0,617,610,1,0,0,0,617,613,1,0,0,0,617,614,1,0,0,0,617,
		615,1,0,0,0,617,616,1,0,0,0,618,81,1,0,0,0,619,620,5,84,0,0,620,621,5,
		50,0,0,621,625,3,84,42,0,622,624,3,84,42,0,623,622,1,0,0,0,624,627,1,0,
		0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,
		629,5,85,0,0,629,632,1,0,0,0,630,632,3,84,42,0,631,619,1,0,0,0,631,630,
		1,0,0,0,632,83,1,0,0,0,633,640,3,86,43,0,634,635,5,84,0,0,635,636,5,51,
		0,0,636,637,3,86,43,0,637,638,5,85,0,0,638,640,1,0,0,0,639,633,1,0,0,0,
		639,634,1,0,0,0,640,85,1,0,0,0,641,642,5,84,0,0,642,646,3,110,55,0,643,
		645,3,92,46,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,
		1,0,0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,650,5,85,0,0,650,658,1,0,0,
		0,651,652,5,84,0,0,652,653,5,56,0,0,653,654,3,92,46,0,654,655,3,92,46,
		0,655,656,5,85,0,0,656,658,1,0,0,0,657,641,1,0,0,0,657,651,1,0,0,0,658,
		87,1,0,0,0,659,660,5,84,0,0,660,661,5,48,0,0,661,662,3,88,44,0,662,663,
		3,88,44,0,663,664,5,85,0,0,664,715,1,0,0,0,665,666,5,84,0,0,666,668,5,
		49,0,0,667,669,3,88,44,0,668,667,1,0,0,0,669,670,1,0,0,0,670,668,1,0,0,
		0,670,671,1,0,0,0,671,672,1,0,0,0,672,673,5,85,0,0,673,715,1,0,0,0,674,
		675,5,84,0,0,675,677,5,50,0,0,676,678,3,88,44,0,677,676,1,0,0,0,678,679,
		1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,5,85,0,
		0,682,715,1,0,0,0,683,684,5,84,0,0,684,685,5,51,0,0,685,686,3,88,44,0,
		686,687,5,85,0,0,687,715,1,0,0,0,688,689,5,84,0,0,689,690,5,52,0,0,690,
		691,5,84,0,0,691,692,3,74,37,0,692,693,5,85,0,0,693,694,3,88,44,0,694,
		695,5,85,0,0,695,715,1,0,0,0,696,697,5,84,0,0,697,698,5,53,0,0,698,699,
		5,84,0,0,699,700,3,74,37,0,700,701,5,85,0,0,701,702,3,88,44,0,702,703,
		5,85,0,0,703,715,1,0,0,0,704,705,5,84,0,0,705,709,3,110,55,0,706,708,3,
		94,47,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,
		0,710,712,1,0,0,0,711,709,1,0,0,0,712,713,5,85,0,0,713,715,1,0,0,0,714,
		659,1,0,0,0,714,665,1,0,0,0,714,674,1,0,0,0,714,683,1,0,0,0,714,688,1,
		0,0,0,714,696,1,0,0,0,714,704,1,0,0,0,715,89,1,0,0,0,716,717,5,84,0,0,
		717,718,5,56,0,0,718,719,3,92,46,0,719,720,3,92,46,0,720,721,5,85,0,0,
		721,91,1,0,0,0,722,725,3,94,47,0,723,725,5,79,0,0,724,722,1,0,0,0,724,
		723,1,0,0,0,725,93,1,0,0,0,726,729,5,76,0,0,727,729,3,126,63,0,728,726,
		1,0,0,0,728,727,1,0,0,0,729,95,1,0,0,0,730,733,3,98,49,0,731,733,3,100,
		50,0,732,730,1,0,0,0,732,731,1,0,0,0,733,97,1,0,0,0,734,735,5,86,0,0,735,
		736,3,102,51,0,736,737,3,104,52,0,737,738,5,87,0,0,738,745,1,0,0,0,739,
		740,5,90,0,0,740,741,3,102,51,0,741,742,3,104,52,0,742,743,5,91,0,0,743,
		745,1,0,0,0,744,734,1,0,0,0,744,739,1,0,0,0,745,99,1,0,0,0,746,747,5,86,
		0,0,747,748,3,102,51,0,748,749,3,106,53,0,749,750,5,87,0,0,750,757,1,0,
		0,0,751,752,5,90,0,0,752,753,3,102,51,0,753,754,3,106,53,0,754,755,5,91,
		0,0,755,757,1,0,0,0,756,746,1,0,0,0,756,751,1,0,0,0,757,101,1,0,0,0,758,
		761,3,128,64,0,759,761,1,0,0,0,760,758,1,0,0,0,760,759,1,0,0,0,761,103,
		1,0,0,0,762,766,3,126,63,0,763,766,5,79,0,0,764,766,3,108,54,0,765,762,
		1,0,0,0,765,763,1,0,0,0,765,764,1,0,0,0,766,105,1,0,0,0,767,771,3,104,
		52,0,768,770,3,104,52,0,769,768,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,
		0,771,772,1,0,0,0,772,107,1,0,0,0,773,771,1,0,0,0,774,775,5,72,0,0,775,
		109,1,0,0,0,776,777,5,76,0,0,777,111,1,0,0,0,778,779,5,76,0,0,779,113,
		1,0,0,0,780,781,5,76,0,0,781,115,1,0,0,0,782,783,5,76,0,0,783,117,1,0,
		0,0,784,785,5,76,0,0,785,119,1,0,0,0,786,787,5,76,0,0,787,121,1,0,0,0,
		788,789,5,76,0,0,789,123,1,0,0,0,790,791,5,76,0,0,791,125,1,0,0,0,792,
		793,5,77,0,0,793,127,1,0,0,0,794,795,5,78,0,0,795,129,1,0,0,0,796,797,
		5,84,0,0,797,801,3,110,55,0,798,800,3,132,66,0,799,798,1,0,0,0,800,803,
		1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,
		0,804,805,5,85,0,0,805,131,1,0,0,0,806,809,5,76,0,0,807,809,3,126,63,0,
		808,806,1,0,0,0,808,807,1,0,0,0,809,133,1,0,0,0,810,811,5,26,0,0,811,813,
		5,84,0,0,812,814,3,120,60,0,813,812,1,0,0,0,814,815,1,0,0,0,815,813,1,
		0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,818,5,85,0,0,818,135,1,0,0,0,
		819,820,5,8,0,0,820,821,3,138,69,0,821,137,1,0,0,0,822,824,3,140,70,0,
		823,822,1,0,0,0,824,825,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,831,
		1,0,0,0,827,828,5,84,0,0,828,829,5,75,0,0,829,831,5,85,0,0,830,823,1,0,
		0,0,830,827,1,0,0,0,831,139,1,0,0,0,832,833,5,84,0,0,833,835,3,152,76,
		0,834,836,3,142,71,0,835,834,1,0,0,0,836,837,1,0,0,0,837,835,1,0,0,0,837,
		838,1,0,0,0,838,839,1,0,0,0,839,840,5,85,0,0,840,141,1,0,0,0,841,842,5,
		84,0,0,842,843,3,120,60,0,843,844,3,120,60,0,844,845,5,85,0,0,845,143,
		1,0,0,0,846,847,5,22,0,0,847,848,3,146,73,0,848,145,1,0,0,0,849,851,3,
		148,74,0,850,849,1,0,0,0,851,852,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,
		0,853,858,1,0,0,0,854,855,5,84,0,0,855,856,5,75,0,0,856,858,5,85,0,0,857,
		850,1,0,0,0,857,854,1,0,0,0,858,147,1,0,0,0,859,860,5,84,0,0,860,861,3,
		120,60,0,861,865,5,86,0,0,862,864,3,154,77,0,863,862,1,0,0,0,864,867,1,
		0,0,0,865,863,1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,865,1,0,0,0,
		868,869,5,87,0,0,869,870,5,85,0,0,870,149,1,0,0,0,871,872,5,9,0,0,872,
		874,5,84,0,0,873,875,3,120,60,0,874,873,1,0,0,0,875,876,1,0,0,0,876,874,
		1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,879,5,85,0,0,879,151,1,0,0,
		0,880,892,3,186,93,0,881,882,5,88,0,0,882,886,3,126,63,0,883,885,3,126,
		63,0,884,883,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,
		889,1,0,0,0,888,886,1,0,0,0,889,890,5,89,0,0,890,892,1,0,0,0,891,880,1,
		0,0,0,891,881,1,0,0,0,892,153,1,0,0,0,893,900,3,188,94,0,894,895,5,84,
		0,0,895,896,5,51,0,0,896,897,3,188,94,0,897,898,5,85,0,0,898,900,1,0,0,
		0,899,893,1,0,0,0,899,894,1,0,0,0,900,155,1,0,0,0,901,903,3,158,79,0,902,
		901,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,913,1,
		0,0,0,906,904,1,0,0,0,907,908,5,84,0,0,908,909,5,23,0,0,909,910,3,118,
		59,0,910,911,5,85,0,0,911,913,1,0,0,0,912,904,1,0,0,0,912,907,1,0,0,0,
		913,157,1,0,0,0,914,924,3,160,80,0,915,916,5,84,0,0,916,917,5,53,0,0,917,
		918,5,84,0,0,918,919,3,74,37,0,919,920,5,85,0,0,920,921,3,160,80,0,921,
		922,5,85,0,0,922,924,1,0,0,0,923,914,1,0,0,0,923,915,1,0,0,0,924,159,1,
		0,0,0,925,954,3,88,44,0,926,927,5,86,0,0,927,928,5,72,0,0,928,929,5,87,
		0,0,929,954,3,88,44,0,930,931,5,86,0,0,931,932,5,72,0,0,932,933,5,87,0,
		0,933,934,5,86,0,0,934,935,3,126,63,0,935,936,5,87,0,0,936,937,3,88,44,
		0,937,954,1,0,0,0,938,939,5,86,0,0,939,940,5,72,0,0,940,941,5,87,0,0,941,
		942,3,208,104,0,942,943,3,88,44,0,943,954,1,0,0,0,944,945,5,86,0,0,945,
		946,5,72,0,0,946,947,5,87,0,0,947,948,5,84,0,0,948,949,5,51,0,0,949,950,
		3,208,104,0,950,951,3,88,44,0,951,952,5,85,0,0,952,954,1,0,0,0,953,925,
		1,0,0,0,953,926,1,0,0,0,953,930,1,0,0,0,953,938,1,0,0,0,953,944,1,0,0,
		0,954,161,1,0,0,0,955,956,5,76,0,0,956,163,1,0,0,0,957,958,5,84,0,0,958,
		959,5,79,0,0,959,960,5,56,0,0,960,961,3,166,83,0,961,962,5,85,0,0,962,
		165,1,0,0,0,963,967,3,92,46,0,964,967,3,80,40,0,965,967,3,50,25,0,966,
		963,1,0,0,0,966,964,1,0,0,0,966,965,1,0,0,0,967,167,1,0,0,0,968,971,3,
		80,40,0,969,971,5,75,0,0,970,968,1,0,0,0,970,969,1,0,0,0,971,169,1,0,0,
		0,972,975,3,172,86,0,973,975,3,174,87,0,974,972,1,0,0,0,974,973,1,0,0,
		0,975,171,1,0,0,0,976,977,5,84,0,0,977,978,5,53,0,0,978,979,5,84,0,0,979,
		980,5,79,0,0,980,981,5,83,0,0,981,982,3,76,38,0,982,984,5,85,0,0,983,985,
		3,174,87,0,984,983,1,0,0,0,985,986,1,0,0,0,986,984,1,0,0,0,986,987,1,0,
		0,0,987,988,1,0,0,0,988,989,5,85,0,0,989,173,1,0,0,0,990,994,3,176,88,
		0,991,994,3,178,89,0,992,994,3,180,90,0,993,990,1,0,0,0,993,991,1,0,0,
		0,993,992,1,0,0,0,994,175,1,0,0,0,995,996,5,84,0,0,996,997,3,182,91,0,
		997,998,3,184,92,0,998,999,5,85,0,0,999,177,1,0,0,0,1000,1001,5,84,0,0,
		1001,1002,5,61,0,0,1002,1003,3,80,40,0,1003,1004,3,182,91,0,1004,1005,
		3,184,92,0,1005,1006,5,85,0,0,1006,179,1,0,0,0,1007,1008,5,84,0,0,1008,
		1009,5,62,0,0,1009,1010,3,182,91,0,1010,1011,3,184,92,0,1011,1012,5,85,
		0,0,1012,181,1,0,0,0,1013,1014,7,1,0,0,1014,183,1,0,0,0,1015,1019,3,182,
		91,0,1016,1018,3,182,91,0,1017,1016,1,0,0,0,1018,1021,1,0,0,0,1019,1017,
		1,0,0,0,1019,1020,1,0,0,0,1020,185,1,0,0,0,1021,1019,1,0,0,0,1022,1023,
		7,2,0,0,1023,187,1,0,0,0,1024,1025,5,84,0,0,1025,1029,3,110,55,0,1026,
		1028,3,92,46,0,1027,1026,1,0,0,0,1028,1031,1,0,0,0,1029,1027,1,0,0,0,1029,
		1030,1,0,0,0,1030,1032,1,0,0,0,1031,1029,1,0,0,0,1032,1033,5,85,0,0,1033,
		189,1,0,0,0,1034,1035,5,14,0,0,1035,1039,5,84,0,0,1036,1038,3,184,92,0,
		1037,1036,1,0,0,0,1038,1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,
		0,1040,1042,1,0,0,0,1041,1039,1,0,0,0,1042,1045,5,85,0,0,1043,1045,1,0,
		0,0,1044,1034,1,0,0,0,1044,1043,1,0,0,0,1045,191,1,0,0,0,1046,1048,5,1,
		0,0,1047,1049,3,194,97,0,1048,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1048,
		1,0,0,0,1050,1051,1,0,0,0,1051,193,1,0,0,0,1052,1053,5,84,0,0,1053,1057,
		3,124,62,0,1054,1056,3,164,82,0,1055,1054,1,0,0,0,1056,1059,1,0,0,0,1057,
		1055,1,0,0,0,1057,1058,1,0,0,0,1058,1060,1,0,0,0,1059,1057,1,0,0,0,1060,
		1061,5,85,0,0,1061,195,1,0,0,0,1062,1063,5,8,0,0,1063,1064,3,198,99,0,
		1064,197,1,0,0,0,1065,1067,3,200,100,0,1066,1065,1,0,0,0,1067,1068,1,0,
		0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1074,1,0,0,0,1070,1071,5,
		84,0,0,1071,1072,5,75,0,0,1072,1074,5,85,0,0,1073,1066,1,0,0,0,1073,1070,
		1,0,0,0,1074,199,1,0,0,0,1075,1076,5,84,0,0,1076,1078,3,152,76,0,1077,
		1079,3,202,101,0,1078,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1078,1,0,0,0,
		1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1083,5,85,0,0,1083,201,1,0,0,
		0,1084,1085,5,84,0,0,1085,1086,3,124,62,0,1086,1087,3,124,62,0,1087,1088,
		5,85,0,0,1088,203,1,0,0,0,1089,1090,5,9,0,0,1090,1094,5,84,0,0,1091,1093,
		3,124,62,0,1092,1091,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,
		1095,1,0,0,0,1095,1097,1,0,0,0,1096,1094,1,0,0,0,1097,1098,5,85,0,0,1098,
		205,1,0,0,0,1099,1101,5,77,0,0,1100,1099,1,0,0,0,1101,1104,1,0,0,0,1102,
		1100,1,0,0,0,1102,1103,1,0,0,0,1103,1117,1,0,0,0,1104,1102,1,0,0,0,1105,
		1109,5,77,0,0,1106,1108,5,77,0,0,1107,1106,1,0,0,0,1108,1111,1,0,0,0,1109,
		1107,1,0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,1109,1,0,0,0,1112,
		1113,5,83,0,0,1113,1114,3,76,38,0,1114,1115,3,206,103,0,1115,1117,1,0,
		0,0,1116,1102,1,0,0,0,1116,1105,1,0,0,0,1117,207,1,0,0,0,1118,1119,5,86,
		0,0,1119,1120,5,78,0,0,1120,1121,3,126,63,0,1121,1122,5,87,0,0,1122,209,
		1,0,0,0,1123,1152,5,27,0,0,1124,1152,5,28,0,0,1125,1152,5,29,0,0,1126,
		1152,5,32,0,0,1127,1152,5,33,0,0,1128,1152,5,31,0,0,1129,1152,5,34,0,0,
		1130,1152,5,35,0,0,1131,1152,5,36,0,0,1132,1152,5,37,0,0,1133,1152,5,38,
		0,0,1134,1152,5,39,0,0,1135,1152,5,40,0,0,1136,1152,5,41,0,0,1137,1152,
		5,42,0,0,1138,1139,5,84,0,0,1139,1140,5,43,0,0,1140,1141,5,80,0,0,1141,
		1152,5,85,0,0,1142,1143,5,84,0,0,1143,1144,5,44,0,0,1144,1145,5,80,0,0,
		1145,1152,5,85,0,0,1146,1147,5,84,0,0,1147,1148,5,45,0,0,1148,1149,5,80,
		0,0,1149,1152,5,85,0,0,1150,1152,5,46,0,0,1151,1123,1,0,0,0,1151,1124,
		1,0,0,0,1151,1125,1,0,0,0,1151,1126,1,0,0,0,1151,1127,1,0,0,0,1151,1128,
		1,0,0,0,1151,1129,1,0,0,0,1151,1130,1,0,0,0,1151,1131,1,0,0,0,1151,1132,
		1,0,0,0,1151,1133,1,0,0,0,1151,1134,1,0,0,0,1151,1135,1,0,0,0,1151,1136,
		1,0,0,0,1151,1137,1,0,0,0,1151,1138,1,0,0,0,1151,1142,1,0,0,0,1151,1146,
		1,0,0,0,1151,1150,1,0,0,0,1152,211,1,0,0,0,85,215,226,240,254,265,272,
		284,291,310,322,338,347,362,391,401,420,427,444,463,497,505,517,521,527,
		536,543,550,553,557,573,584,617,625,631,639,646,657,670,679,709,714,724,
		728,732,744,756,760,765,771,801,808,815,825,830,837,852,857,865,876,886,
		891,899,904,912,923,953,966,970,974,986,993,1019,1029,1039,1044,1050,1057,
		1068,1073,1080,1094,1102,1109,1116,1151
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
