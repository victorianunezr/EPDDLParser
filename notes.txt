Notes:
- Parser rule "Parameter" (used by action-type and events) doesn't match syntax from examples.
- Some requirement keys that appear in examples are not defined in grammar, e.g. 'ma-star-finitary-theory', 'ontic-actions'
    - Since we don't need requirement keys for our purposes, I've just allowed any string starting with ':' to be parsed as a requirement key.
- Modalities definition rule missing in .cf file (:modalities, in cb5(3).epddl). It appears as a requirement key in current grammar rules, but in example it appears as a problem item with a parameter.
- Making actionTypeSignatureDef optional in the action definition, for simplicity.
actionDef
    : LPAREN ACTION actionName parametersDef actionConditionDef actionPreDef actionTypeSignatureDef? actionObsDef RPAREN
    ;
- Action/initial state definition: I'm going to change the structure in which actions are defined, allowing to define event model already in the library, going away from action type definitions, as this is unnecessary complexity for testing forward induction.
    Changing the entry points: actionDef, initDef.
    Created new rules e.g. worldsDef, eventsDef, accessibility...
    - As in PDDL, the worlds in a state define which predicates are true in a given world:
        "The initial state (init) defines specifically what predicates are true at the start of the problem. This is not a logical expression because it is simply a list of predicates which are true."
        https://planning.wiki/ref/pddl/problem#init


TODO
In Parser:
- Implement action owners in EPDDL. Should they be defined at the domain level?
- Designated worlds/events.

In DEL implementation:
- Test empty owners
- Test accessibility between events

QUESTIONS
- Should action owners be defined as part of the domain?

DESIGN
Since the DEL project already defines all the necessary models (actions, events, states, etc.), implementing the visitor in the DEL project does make more sense.

Single Set of Model Classes: I only need model classes in the DEL project, avoiding duplication of the definitions across projects.

Visitor Implementation in DEL: By implementing the visitor directly in the DEL project, leverage the existing models and avoid coupling the parser too tightly with any specific interpretation of EPDDL.

Why Implement the Visitor in the DEL Project?
The visitor’s purpose is to translate the parsed EPDDL structure into instantiated DEL objects. If the DEL project already has these model classes, implementing the visitor there:

Centralizes Object Creation Logic: The DEL project becomes the source of truth for instantiating and managing these objects.
Maintains Separation: The parser project can stay focused on parsing, without embedding any application-specific logic (like DEL’s interpretation of actions and states).
Increases Reusability: Other projects or components can use the EPDDL parser independently, without assuming that DEL's logic will always be applied.
Revised Step-by-Step Plan
Parser Project: Keep the parser project as is, focusing on parsing EPDDL syntax and generating an abstract syntax tree (AST) or parse tree.

DEL Project:

Visitor Implementation: Implement a visitor in the DEL project that walks through the AST produced by the EPDDL parser and creates instances of DEL’s State, Action, EventModel, etc., based on the parsed EPDDL input.
Parsing Integration: Use the EPDDL parser from the DEL project, feeding the parse tree directly into the DEL-specific visitor.
Integration: From an entry point in the DEL project (such as Program.cs), parse the EPDDL input, apply the visitor, and generate DEL-compatible objects.

This setup keeps the parser general and reusable while placing the DEL-specific interpretation logic in the DEL project, where it naturally belongs.

---------------------
COMMANDS
To generate parser:
java -jar antlr-4.13.2-complete.jar -Dlanguage=CSharp -visitor Parser/EPDDLLexer.g4 Parser/EPDDLParser.g4

To pack parser:
Change version in csproj and run:
dotnet pack -o ~/NuGetLocalPackages