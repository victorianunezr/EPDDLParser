---------- LBNF Grammar for EPDDL ----------
--
-- Authors: Alessandro Burigana, Francesco Fabiano
-- License: MIT
--


-- EPDDL Comments
comment                 ";" ;


-- Parsing Entrypoints
entrypoints             MainDef ;

-- Using MainDef because multiple entrypoints are not supported by BNFC cpp backend
-- Domain, action type library and problem definitions MUST come in different files
Domain.                 MainDef                 ::= DomainDef ;
ActionTypeLibrary.      MainDef                 ::= LibraryDef ;
Problem.                MainDef                 ::= ProblemDef ;





---------------------------------------- EPDDL Domain ----------------------------------------

-- A domain definition consists of the following:
--  * A domain name: <DomainName>
--  * A list of domain elements (the order is not relevant): <DomainItemDef>

EPDDLDomain.            DomainDef               ::= "(" "define" "(" "domain" DomainName ")" [DomainItemDef] ")" ;


---------- Elements of an EPDDL domain ----------

-- D1. Action type libraries adopted in the domain
EPDDLDomLibrary.        DomainItemDef           ::= DomainLibrariesNameDef ;

-- D2. Requirements of the domain
EPDDLDomRequire.        DomainItemDef           ::= RequireDef ;

-- D3. Types declaration
EPDDLDomTypes.          DomainItemDef           ::= TypesDef ;

-- D4. Predicates definition
EPDDLDomPredicates.     DomainItemDef           ::= PredicateListDef ;

-- D5. Modality declaration
EPDDLDomModality.     DomainItemDef           ::= ModalityDef ;

-- D6. Actions
EPDDLDomAction.         DomainItemDef           ::= ActionDef ;
separator               DomainItemDef "" ;



---------- EPDDL Domain Library Definition ----------

-- D1: we can specify one or more action type libraries to use in the domain

EPDDLDomLibraryNames.   DomainLibrariesNameDef  ::= "(" ":action-type-libraries" [LibraryName] ")" ;



---------- EPDDL Requirements Definition ----------

-- D2, L1: list of requirements
--
-- See also: RequirementKey

EPDDLRequire.           RequireDef              ::= "(" ":requirements" [RequirementKey] ")" ;



---------- EPDDL Types Definition ----------

-- D3: list of types
--
-- See also: TypedIdentList

EPDDLTypes.             TypesDef                ::= "(" ":types" TypedIdentList ")" ;



---------- EPDDL Predicates Definition ----------

-- D4: list of predicates
--
-- See also: TypedVariableList

EPDDLPredicateList.     PredicateListDef        ::= "(" ":predicates" [PredicateDef] ")" ;
EPDDLPredicateDef.      PredicateDef            ::= "(" PredicateName TypedVariableList ")" ;
separator nonempty      PredicateDef "" ;


---------- EPDDL Modality Definition ----------

-- D5, L2: definition of (non-primitive) modalities
--
-- See also: ModalityName

EPDDLModality.          ModalityDef           ::= "(" ":modality" [ModalityName] ")" ;
-- TODO: finish rework of modalities


---------- EPDDL Actions Definition ----------

-- D6: definition of actions. An action is composed by different elements (A1-A6), that must be given in the order below

EPDDLAction.            ActionDef               ::= "(" ":action" ActionName ParametersDef ActionConditionDef ActionTypeSignatureDef ActionPreDef ActionObsDef ")" ;

-- A1: name of the action

-- A2, AT2, E2: list of action/action type/event parameters
--
-- See also: TypedVariableList

Parameters.             ParametersDef           ::= ":parameters" "(" TypedVariableList ")" ;


-- A3: an action instance is generated during the grounding phase if and only if the "action condition" formula holds.
--     An action condition is a conjunction of static literals (i.e., elements that are not subject to change during
--     planning) and equality terms
--
-- Optional field
--
-- See also: ConditionFormula, Condition

ActionCond.             ActionConditionDef      ::= ":where" ConditionFormula ;
EmptyActionCond.        ActionConditionDef      ::= ;


-- A4: an action must specify its action type (possibly with parameters). An action type represents the "underlying skeleton"
--     of the action (i.e., the abstract frame of the event model)
--
-- See also: Parameter

ActionSignature.        ActionTypeSignatureDef  ::= ":action-type" "(" ActionTypeName [Parameter] ")" ;


-- A5: the precondition of the action
--
-- See also: Precondition

ActionPre.              ActionPreDef            ::= ":precondition" FormulaOrEmpty ;


-- A6: list of observability conditions. We specify the conditions for which an agent belongs to a certain observability group
--
-- Optional field
--
-- See also: ObsConditionDef

ActionObs.              ActionObsDef            ::= ":observability-conditions" [ObsConditionDef] ;
EmptyActionObs.         ActionObsDef            ::= ;

-- Observability Conditions
-- An observability condition is either a simple o.c. or a universal o.c.

-- An universal observability condition quantifies over agents (the type might be "agent" or one of the agent sub-types)
-- and it speficies one or more simple observability consitions
UniversalObsCond.       ObsConditionDef         ::= "(" "forall" "(" Variable "-" Type ")" [ObsCondition] ")" ;
ObsCond.                ObsConditionDef         ::= ObsCondition ;
separator nonempty      ObsConditionDef "" ;

-- A simple observability condition might be one of the following three kinds:

-- A trivial o.c.: the agent always belong to the group (i.e., the condition is set to true);
TrivialObsCond.         ObsCondition            ::= "("                     ObservingAgent ObservingAgentGroup ")" ;

-- An actual o.c.: the agent belongs to the group *if* the given condition (formula) is satisfied
IfObsCond.              ObsCondition            ::= "(" "if"        Formula ObservingAgent ObservingAgentGroup ")" ;

-- An otherwise o.c.: if none of the above "if conditions" is satisfied, the agent belongs to this group
OtherwiseObsCond.       ObsCondition            ::= "(" "otherwise"         ObservingAgent ObservingAgentGroup ")" ;
separator nonempty      ObsCondition "" ;

---------------------------------------- End EPDDL Domain ----------------------------------------





---------------------------------------- EPDDL Action Type Library ----------------------------------------

-- An action type library definition consists of the following:
--  * A library name: <LibraryName>
--  * A list of library elements (the order is not relevant): <LibraryItemDef>

EPDDLLibrary.           LibraryDef              ::= "(" "define" "(" "library" LibraryName ")" [LibraryItemDef] ")" ;

-- L1. Requirements of the action type library (similar to domain)
EPDDLLibRequire.        LibraryItemDef          ::= RequireDef ;

-- L2. Modality declaration (similar to domain)
EPDDLLibModality.       LibraryItemDef          ::= ModalityDef ;

-- L3. Observability groups declaration
EPDDLLibObsGroups.      LibraryItemDef          ::= ObservabilityGroupsDef ;

-- L4. Action types
EPDDLLibActionType.     LibraryItemDef          ::= ActionTypeDef ;

-- L5. Events
EPDDLLibEvent.          LibraryItemDef          ::= EventDef ;
separator               LibraryItemDef "" ;



---------- EPDDL Observability Groups Definition ----------

-- L1: see D2

-- L2: see D5



-- L3: list of observability groups. An observability group is an abstract group of agents that represents
--     a particular condition of observability, e.g., fully observant or partially observant agents
--
-- See also: ObservingAgentGroup, ActionTypeGroupsDef

EPDDLObsGroupsNames.    ObservabilityGroupsDef  ::= "(" ":observability-groups" [ObservingAgentGroup] ")" ;



---------- EPDDL Action Types Definition ----------

-- L4: definition of action types. An action type is composed by different elements (AT1-AT6), that must be given in the order below

EPDDLActType.           ActionTypeDef           ::= "(" ":action-type" ActionTypeName ParametersDef ActionTypeGroupsDef ActionTypeEventsDef ActionTypeRelDef ActionTypeDesignDef ")" ;

-- AT1: name of the action type

-- AT2: see A2


-- AT3: observability groups (see L3) of the action type
--
-- Optional field
--
-- See also: ObservingAgentGroup, ObservabilityGroupsDef

ActTypeGroups.          ActionTypeGroupsDef     ::= ":observability-groups" "(" [ObservingAgentGroup] ")" ;
EmptyActTypeGroups.     ActionTypeGroupsDef     ::= ;


-- AT4: events (possibly with parameters) of the action type
--
-- See also: Parameter

ActTypeEvents.          ActionTypeEventsDef     ::= ":events" [EventSignature] ;

EventSign.              EventSignature          ::= "(" EventName [Parameter] ")" ;
separator nonempty      EventSignature "" ;


-- AT5: relations of the action type
--
-- See also: AgentGroup

ActTypeRel.             ActionTypeRelDef        ::= ":relations" ActionRelations ;

EventsActionRel.        ActionRelations         ::= [EventRelation] ;
TrivialActionRel.       ActionRelations         ::= TrivialDef ;

EventRel.               EventRelation           ::= "(" AgentGroup [EventNamePair] ")" ;
TrivialEventRel.        EventRelation           ::= "(" AgentGroup TrivialDef ")" ;
separator nonempty      EventRelation "" ;

EventPair.              EventNamePair           ::= "(" EventName EventName ")" ;
separator nonempty      EventNamePair "" ;


-- AT6: designated events of the action type

ActTypeDesign.          ActionTypeDesignDef     ::= ":designated" "(" [EventName] ")" ;



---------- EPDDL Events Definition ----------

-- L5: definition of events. An event is composed by different elements (E1-E4), that must be given in the order below

EPDDLEvent.             EventDef                ::= "(" ":event" EventName ParametersDef EventPreDef EventPostDef ")" ;

-- E1: name of the event

-- E2: see A2


-- E3: precondition of the event
--
-- See also: Formula, FormulaOrEmpty

EventPre.               EventPreDef             ::= ":precondition" FormulaOrEmpty ;


-- E4: postconditions of the event
--
-- Optional field
--
-- See also: Formula, FormulaOrEmpty

EventPost.              EventPostDef            ::= ":postconditions" PostconditionBlock ;
EmptyEventPost.         EventPostDef            ::= ;

-- Postconditions are defined inside an anonymous block delimited by <(:> and <)>
PostAnonBlock.          PostconditionBlock      ::= "(" ":" [Postcondition] ")" ;

-- A postcondition is either simple, universal or a variable
SimplePost.             Postcondition           ::= SimplePostcondition ;
UniversalPost.          Postcondition           ::= "(" "forall" "(" TypedVariableList ")" [SimplePostcondition] ")" ;
VarPost.                Postcondition           ::= "(" Variable ")" ;
separator               Postcondition "" ;

-- A simple postcondition is one of the following kinds (PC1-PC3):

-- PC1: standard DEL postcondition that has an "iff" semantics

IffPost.                SimplePostcondition     ::= "(" "iff"  FormulaOrEmpty Literal ")" ;

-- PC2: conditional effects as in classic PDDL

WhenPost.               SimplePostcondition     ::= "(" "when" FormulaOrEmpty Literal ")" ;

-- PC3: simple literal (syntactic sugar for <(iff true Literal )>)

TrivialLiteralPost.     SimplePostcondition     ::= "(" "always" Literal ")" ;
separator nonempty      SimplePostcondition "" ;

---------------------------------------- End EPDDL Action Type Library ----------------------------------------





---------------------------------------- EPDDL Problem ----------------------------------------

-- A problem definition consists of the following:
--  * A library name: <ProblemName>
--  * A list of library elements (the order is not relevant): <ProblemItemDef>

EPDDLProblem.           ProblemDef              ::= "(" "define" "(" "problem" ProblemName ")" [ProblemItemDef] ")" ;


-- P1. The domain relative to the problem
EPDDLProbDomain.        ProblemItemDef          ::= ProblemDomainNameDef ;

-- P2. Requirements of the problem (similar to domain)
EPDDLProbRequire.       ProblemItemDef          ::= RequireDef ;

-- P3. Modality declaration (similar to domain)
EPDDLProbModality.      ProblemItemDef          ::= ModalityDef ;

-- P4. Agents declaration
EPDDLProbAgents.        ProblemItemDef          ::= AgentNamesDef ;

-- P5. Agent groups declaration
EPDDLProbAgentGroups.   ProblemItemDef          ::= AgentGroupsListDef ;

-- P6. Objects declaration
EPDDLProbObjects.       ProblemItemDef          ::= ObjectNamesDef ;

-- P7. Static predicates declaration
EPDDLProbStaticPred.    ProblemItemDef          ::= StaticPredListDef ;

-- P8. Initial state definition
EPDDLProbInit.          ProblemItemDef          ::= InitDef ;

-- P9. Explicit initial state definition
EPDDLProbInitState.     ProblemItemDef          ::= StateDef ;

-- P10. Goal definition
EPDDLProbGoal.          ProblemItemDef          ::= GoalDef ;
separator               ProblemItemDef "" ;



---------- EPDDL Problem Domain Definition ----------

-- P1: the domain of the problem

EPDDLProbDomainName.    ProblemDomainNameDef    ::= "(" ":domain" DomainName ")" ;



-- P2: see D2

-- P3: see D5



---------- EPDDL Agents Definition ----------

-- P4: the agents of the problem, each with their own type ("agent" or some user-defined sub-type)
--
-- See also: TypedAgentList

EPDDLAgentNames.        AgentNamesDef           ::= "(" ":agents" TypedAgentList ")" ;



---------- EPDDL Agent Groups Definition ----------

-- P5: agent groups are syntactic sugars to refer to multiple agents at the same time (not to be
--     confused with observability groups)
--
-- See also: AgentName, AgentGroupName

EPDDLAgentGroupsList.   AgentGroupsListDef      ::= "(" ":agent-groups" [AgentGroupDef] ")" ;

EPDDLAgentGroupDef.     AgentGroupDef           ::= "(" AgentGroupName "<-"  "(" AgentName [AgentName] ")" ")" ;
separator               AgentGroupDef "" ;



---------- EPDDL Objects Definition ----------

-- P6: objects of the problem
--
-- See also: TypedIdentList

EPDDLObjectNames.       ObjectNamesDef          ::= "(" ":objects" TypedIdentList ")" ;



---------- EPDDL Static Predicates Definition ----------

-- P7: static predicates of the problem. Namely, predicates which values are never changed
--
-- See also: GenericName

EPDDLStaticPredList.    StaticPredListDef       ::= "(" ":static" [StaticPredDef] ")" ;
EPDDLStaticPredDef.     StaticPredDef           ::= "(" PredicateName [GenericName] ")" ;
separator nonempty      StaticPredDef "" ;



---------- EPDDL Initial State Definition ----------

-- P8: initial state definition
--
-- See also: PredicateFormula

EPDDLInitialState.      InitDef                 ::= "(" ":init" InitialStateDescr ")" ;

-- The initial state can be defined in two ways:
--  * (I1) A Finitary S5-Theory
--  * (I2) An explicit epistemic state

FinitaryTheoryDescr.    InitialStateDescr       ::= [FTheoryFormula] ;
InitStateNameDescr.     InitialStateDescr       ::= "(" ":state-name" StateName ")" ;


-- I1: a Finitary S5-Theory is a set of formulae of a particular form (F1-F5)

-- We allow both "simple" formulae and universally quantified formulae, which are a syntactic sugar to express the conjunction
-- of simple formulae

SimpleFTheoryForm.      FTheoryFormula          ::= SimpleFTheoryFormula ;
UniversalFTheoryForm.   FTheoryFormula          ::= "(" "forall" "(" TypedVariableList ")" SimpleFTheoryFormula ")" ;
separator nonempty      FTheoryFormula "" ;


-- F1. Formulae that are true in the designated worlds
FTheoryPredForm.        SimpleFTheoryFormula    ::= PredicateFormula ;


-- F2. Formule that are true in all worlds
FTheoryCKPredForm.      SimpleFTheoryFormula    ::= "[" AllAgents "]" PredicateFormula ;


-- F3. Formulae that are true in the worlds that are considered possible by a particular agent
FTheoryCKKPredForm.     SimpleFTheoryFormula    ::= "[" AllAgents "]" "[" AgentName "]" PredicateFormula ;


-- F4. Formulae that remove uncertainty of a particular agent
FTheoryCKOrKPredForm.   SimpleFTheoryFormula    ::= "[" AllAgents "]" KnowsWhether PredicateFormula ;


-- F5. Formulae that state the uncertainty of a particular agent
FTheoryCKAndKPredForm.  SimpleFTheoryFormula    ::= "[" AllAgents "]" "(" "not" KnowsWhether PredicateFormula ")" ;



---------- EPDDL Explicit Initial State ----------

-- P9/I2: explicit definition of initial epistemic state. An epistemic state is composed by different elements (S1-S5), that must be given in the order below
--
-- See also: InitialStateDescr

EPDDLExplicitState.     StateDef                ::= "(" ":state" StateName StateWorldsDef StateRelDef StateValDef StateDesignDef ")" ;



-- S1: name of the epistemic state that is referred to in <InitialStateDescr>

-- S2: worlds of the epistemic state. A world represents a possible situation of the current state of affairs

StateWorlds.            StateWorldsDef          ::= ":worlds" "(" [WorldName] ")" ;


-- S3: accessibility relations of the epistemic state. Relations express what worlds are considered to be possible by agents
--
-- See also: AgentGroup

StateRel.               StateRelDef             ::= ":relations" StateRelations ;

WorldsStateRel.         StateRelations          ::= [WorldRelation] ;
TrivialStateRel.        StateRelations          ::= TrivialDef ;

WorldRel.               WorldRelation           ::= "(" AgentGroup [WorldNamePair] ")" ;
TrivialWorldRel.        WorldRelation           ::= "(" AgentGroup TrivialDef ")" ;
separator nonempty      WorldRelation "" ;

WorldPair.              WorldNamePair           ::= "(" WorldName WorldName ")" ;
separator nonempty      WorldNamePair "" ;


-- S4: valuation of the epistemic state. It states what is true in each world

StateVal.               StateValDef             ::= ":valuation" StateValuation ;

WorldsStateVal.         StateValuation          ::= [WorldValuation] ;
TrivialStateVal.        StateValuation          ::= TrivialDef ;

WorldVal.               WorldValuation          ::= "(" WorldName "[" [Literal] "]" ")" ;
separator nonempty      WorldValuation "" ;


-- S5: designated worlds of the epistemic state. The worlds that are "actually true" according the perspective of an omniscient observer

StateDesign.            StateDesignDef          ::= ":designated" "(" [WorldName] ")" ;



---------- EPDDL Goal Definition ----------

-- P10: goal definition
--
-- See also: Formula

EPDDLGoals.             GoalDef                 ::= "(" ":goal" Formula ")" ;

---------------------------------------- End EPDDL Problem ----------------------------------------





----- EPDDL Formulae -----
ImplyFormula.           Formula                 ::= "(" "imply" Formula  Formula  ")" ;
OrFormula.              Formula                 ::= "(" "or"    Formula [Formula] ")" ;
AndFormula.             Formula                 ::= "(" "and"   Formula [Formula] ")" ;
NotFormula.             Formula                 ::= "(" "not"   Formula           ")" ;

ExistsFormula.          Formula                 ::= "(" "exists" "(" TypedVariableList ")" Formula ")" ;
ForAllFormula.          Formula                 ::= "(" "forall" "(" TypedVariableList ")" Formula ")" ;

ModalFormula.           Formula                 ::= Modality Formula ;
ModalFormulaPar.        Formula                 ::= "(" Modality Formula ")" ;

AtmFormula.             Formula                 ::= AtomicFormula ;
AtmEqFormula.           Formula                 ::= AtomicEqFormula ;
TrueFormula.            Formula                 ::= "true" ;
FalseFormula.           Formula                 ::= "false" ;
separator nonempty      Formula "" ;


GroundAtmForm.          AtomicFormula           ::= Predicate ;
VarAtmForm.             AtomicFormula           ::= "(" Variable ")" ;

PredicateAtmForm.       Predicate               ::= "(" PredicateName [Term] ")" ;

EqFormula.              AtomicEqFormula         ::= "(" "=" Term Term ")" ;

NonTrivialFormula.      FormulaOrEmpty          ::= Formula ;
TrivialFormula.         FormulaOrEmpty          ::= TrivialDef ;


---------- EPDDL Terms ----------
EPDDLGroundTerm.        Term                    ::= GroundTerm ;
EPDDLTermVar.           Term                    ::= Variable ;
separator               Term "" ;

EPDDLGroundTermName.    GroundTerm              ::= Name ;
EPDDLGroundTermAgName.  GroundTerm              ::= AgentName ;
separator               GroundTerm "" ;


---------- EPDDL Modality ----------
EPDDLLabeledMod.        Modality                ::= SingleModality ;
EPDDLLabeledGroupMod.   Modality                ::= GroupModality ;

LabBoxMod.              SingleModality          ::= "[" ModalityLabel ModalityAgent "]" ;
LabDiamondMod.          SingleModality          ::= "<" ModalityLabel ModalityAgent ">" ;

LabBoxGroupMod.         GroupModality           ::= "[" ModalityLabel ModalityAgentGroup "]" ;
LabDiamondGroupMod.     GroupModality           ::= "<" ModalityLabel ModalityAgentGroup ">" ;

ModLabel.               ModalityLabel           ::= ModalityName ;
EmptyModLabel.          ModalityLabel           ::= ;

-- Used in Finitary Theories definition
KnowsWhetherMod.        KnowsWhether            ::= "[" ModalityName AgentName "]" ;    -- During type-checking, we force ModalityName to be "kw."


---------- Literals ----------
PosLiteral.             Literal                 ::= Predicate ;
NegLiteral.             Literal                 ::= "(" "not" Predicate ")" ;
separator               Literal "" ;


---------- EPDDL Conditions ----------
AndCondFomula.          ConditionFormula        ::= "(" "and" Condition [Condition] ")" ;
CondFomula.             ConditionFormula        ::= Condition ;

AtmCond.                Condition               ::= AtomicCondition ;
NotAtmCond.             Condition               ::= "(" "not" AtomicCondition ")" ;
separator nonempty      Condition "" ;

AtmCondPredicate.       AtomicCondition         ::= "(" PredicateName [Term] ")" ;
AtmCondEqFormula.       AtomicCondition         ::= "(" "=" Term Term ")" ;


---------- Predicate Formulae ----------
ImplyPredFormula.       PredicateFormula        ::= "(" "imply"  PredicateFormula  PredicateFormula  ")" ;
OrPredFormula.          PredicateFormula        ::= "(" "or"     PredicateFormula [PredicateFormula] ")" ;
AndPredFormula.         PredicateFormula        ::= "(" "and"    PredicateFormula [PredicateFormula] ")" ;
NotPredFormula.         PredicateFormula        ::= "(" "not"    PredicateFormula                    ")" ;

ExistsPredFormula.      PredicateFormula        ::= "(" "exists" "(" TypedVariableList ")" PredicateFormula ")" ;
ForAllPredFormula.      PredicateFormula        ::= "(" "forall" "(" TypedVariableList ")" PredicateFormula ")" ;

AtmPredFormula.         PredicateFormula        ::= "(" PredicateName [GroundTerm] ")" ;
separator nonempty      PredicateFormula "" ;



----- Basic EPDDL Elements -----

---------- EPDDL Generic Name ----------
EPDDLGenericNameObj.    GenericName             ::= Name ;
EPDDLGenericNameAg.     GenericName             ::= AgentName ;
separator               GenericName "" ;


---------- Typed Name List ----------
IdList.                 TypedIdentList          ::= [Name] ;
TypedIdList.            TypedIdentList          ::= Name [Name] "-" Type TypedIdentList ;


---------- Typed Agent Name List ----------
AgList.                 TypedAgentList          ::= [AgentName] ;
TypedAgList.            TypedAgentList          ::= AgentName [AgentName] "-" Type TypedAgentList ;


---------- Typed Variable List ----------
VarList.                TypedVariableList       ::= [Variable] ;
TypedVarList.           TypedVariableList       ::= Variable [Variable] "-" Type TypedVariableList ;


---------- EPDDL Predicate Name ----------
EPDDLPredicate.         PredicateName           ::= Name ;


-- EPDDL Agents
EPDDLModAgent.          ModalityAgent           ::= AgentName ;         -- Agents and agent groups
EPDDLModVarAgent.       ModalityAgent           ::= Variable ;
EPDDLModAllAgents.      ModalityAgent           ::= AllAgents ;
separator nonempty      ModalityAgent "" ;

EPDDLModAgList.         ModalityAgentGroup      ::= ModalityAgent [ModalityAgent] ;

EPDDLSingleAgentGroup.  AgentGroupName          ::= AgentName ;
EPDDLAllAgentsGroup.    AgentGroupName          ::= AllAgents ;

EPDDLObsAgentGroup.     ObservingAgentGroup     ::= AgentName ;
separator nonempty      ObservingAgentGroup "" ;

EPDDLObsAgent.          ObservingAgent          ::= AgentName ;
EPDDLObsAllAgents.      ObservingAgent          ::= AllAgents ;
EPDDLObsVarAgent.       ObservingAgent          ::= Variable ;

EPDDLAgentGroup.        AgentGroup              ::= AgentGroupName ;
EPDDLAgentNameGroup.    AgentGroup              ::= "{" AgentName [AgentName] "}" ;

EPDDLAllAgents.         AllAgents               ::= "All" ;


---------- EPDDL Parameters ----------
EPDDLParam.             Parameter               ::= "(" Variable "<-" Expression ")" ;
separator               Parameter "" ;

EPDDLTermExpr.          Expression              ::= Term ;
EPDDLFormulaExpr.       Expression              ::= Formula ;   -- Usare f? per formula variables?
EPDDLPostExpr.          Expression              ::= PostconditionBlock ;



---------- EPDDL Types ----------
EPDDLTypeName.          Type                    ::= Name ;
EPDDLResType.           Type                    ::= ReservedType ;

ResAgentType.           ReservedType            ::= "agent" ;
PredicateType.          ReservedType            ::= "predicate" ;
LiteralType.            ReservedType            ::= "literal" ;
PredFormulaType.        ReservedType            ::= "predicate-formula" ;
FormulaType.            ReservedType            ::= "formula" ;
PostconditionType.      ReservedType            ::= "postcondition" ;


---------- EPDDL Domain Name ----------
EPDDLDomainName.        DomainName              ::= Name ;


---------- EPDDL Library Name ----------

EPDDLLibraryName.       LibraryName             ::= Name ;
separator nonempty      LibraryName "" ;


---------- EPDDL Problem Name ----------
EPDDLProblemName.       ProblemName             ::= Name ;


---------- EPDDL Action Name ----------
EPDDLActionName.        ActionName              ::= Name ;


---------- EPDDL Action Type Name ----------
EPDDLActTypeName.       ActionTypeName          ::= Name ;


---------- EPDDL Event Name ----------
EPDDLEventName.         EventName               ::= Name ;
separator nonempty      EventName "" ;


---------- EPDDL States ----------
EPDDLStateName.         StateName               ::= Name ;
EPDDLWorldName.         WorldName               ::= Name ;
separator nonempty      WorldName "" ;


---------- EPDDL Requirements ----------
EPDDLReqDel.            RequirementKey          ::= ":del" ;
EPDDLReqTyping.         RequirementKey          ::= ":typing" ;
EPDDLReqEquality.       RequirementKey          ::= ":equality" ;

EPDDLReqExiForm.        RequirementKey          ::= ":existential-formulae" ;
EPDDLReqUniForm.        RequirementKey          ::= ":universal-formulae" ;
EPDDLReqUniPost.        RequirementKey          ::= ":universal-postconditions" ;

EPDDLReqModPre.         RequirementKey          ::= ":modal-preconditions" ;
EPDDLReqModPost.        RequirementKey          ::= ":modal-postconditions" ;
EPDDLReqModality.       RequirementKey          ::= ":modalities" ;

EPDDLReqOnticChange.    RequirementKey          ::= ":ontic-change" ;

EPDDLReqCK.             RequirementKey          ::= ":common-knowledge" ;
EPDDLReqDynCK.          RequirementKey          ::= ":dynamic-common-knowledge" ;

EPDDLReqFTheory.        RequirementKey          ::= ":finitary-S5-theory" ;

EPDDLReqMaxPreDepth.    RequirementKey          ::= "(" ":maximum-preconditions-depth" Integer ")" ;
EPDDLReqMaxPostDepth.   RequirementKey          ::= "(" ":maximum-postconditions-depth" Integer ")" ;
EPDDLReqMaxDepth.       RequirementKey          ::= "(" ":maximum-modal-depth" Integer ")" ;
separator nonempty      RequirementKey "" ;
-- todo: trova paper con teorema su epistemic actions con propositional preconditions


---------- Trivial Definition ----------
EPDDLTrivialDef.        TrivialDef              ::= "(" ")" ;



----- Tokens -----

---------- Names ----------
position token          Name                        (lower (letter|digit|'_'|'\'')*) ;
separator               Name "" ;

position token          AgentName                   (upper (letter|digit|'_')*) ;
separator               AgentName "" ;

position token          ModalityName                (lower (letter|digit|'_'|'\'')* '.') ;
separator               ModalityName "" ;

---------- Variables ----------
position token          Variable                    ('?' (letter (letter|digit|'_'|'\'')*)) ;
separator               Variable "" ;
